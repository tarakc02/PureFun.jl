var documenterSearchIndex = {"docs":
[{"location":"generated/hamt/","page":"Hash Array Mapped Tries","title":"Hash Array Mapped Tries","text":"EditURL = \"https://github.com/tarakc02/PureFun.jl/blob/main/docs/src/hamt.jl\"","category":"page"},{"location":"generated/hamt/","page":"Hash Array Mapped Tries","title":"Hash Array Mapped Tries","text":"using PureFun, PureFun.HashMaps, PureFun.Tries\nusing Test, BenchmarkTools, Random","category":"page"},{"location":"generated/hamt/#Setup:-testing-dictionary-implementations-for-correctness","page":"Hash Array Mapped Tries","title":"Setup: testing dictionary implementations for correctness","text":"","category":"section"},{"location":"generated/hamt/","page":"Hash Array Mapped Tries","title":"Hash Array Mapped Tries","text":"In the following essay, we'll construct a variety of immutable dictionary types. We start with some basic tests to convince ourselves that the dictionaries work as expected","category":"page"},{"location":"generated/hamt/","page":"Hash Array Mapped Tries","title":"Hash Array Mapped Tries","text":"nstrings(n) = collect(randstring(rand(8:15)) for _ in 1:n)\nrandpairs(n) = (k => v for (k,v) in zip(nstrings(n), rand(Int, n)))\n\nfunction test_dicttype(D)\n    @testset \"basic tests for $D\" begin\n\n        kvs = randpairs(100)\n        testdict = D(kvs)\n\n        @test all(testdict[p.first] == p.second for p in kvs)\n        @test empty(testdict) |> isempty\n\n        e = D{String,String}()\n        @test isempty(e)\n\n        d1 = setindex(e, \"world\", \"hello\")\n        @test length(d1) == 1\n        @test d1[\"hello\"] == \"world\"\n    end\n    return nothing\nend;","category":"page"},{"location":"generated/hamt/","page":"Hash Array Mapped Tries","title":"Hash Array Mapped Tries","text":"Microbenchmarks will be noisy when run on the documentation server. In the essay below, instead of running the benchmarking code, I'll report my results from running the code locally. But I'm including the benchmarking code used here for those who want to follow along. Note that actual performance of any dictionary will depend on the size and distribution of keys, the tests here are not meant to be comprehensive, but are meant to illustrate the concepts and tradeoffs explored below.","category":"page"},{"location":"generated/hamt/","page":"Hash Array Mapped Tries","title":"Hash Array Mapped Tries","text":"function bench_dicttype(D, n)\n    kvs = randpairs(n)\n    testdict = D(kvs)\n    ks = collect(kv.first for kv in kvs)\n    search_hit  = @benchmark $testdict[k] setup=k=rand($ks)\n    search_miss = @benchmark get($testdict, \"nonexisting key\", -1)\n    (size = n,\n     search_hit_ns  = round(Int, median(search_hit).time),\n     search_miss_ns = round(Int, median(search_miss).time))\nend;","category":"page"},{"location":"generated/hamt/","page":"Hash Array Mapped Tries","title":"Hash Array Mapped Tries","text":"As a reference point, we see how Base.Dict looks:","category":"page"},{"location":"generated/hamt/","page":"Hash Array Mapped Tries","title":"Hash Array Mapped Tries","text":"julia> bench_dicttype(Dict, 10)\n(size = 10, search_hit_ns = 12, search_miss_ns = 11)\n\njulia> bench_dicttype(Dict, 100)\n(size = 100, search_hit_ns = 11, search_miss_ns = 11)\n\njulia> bench_dicttype(Dict, 100_000)\n(size = 100000, search_hit_ns = 12, search_miss_ns = 11)\n\njulia> bench_dicttype(Dict, 1_000_000)\n(size = 1000000, search_hit_ns = 12, search_miss_ns = 18)","category":"page"},{"location":"generated/hamt/#Introduction:-hashmaps","page":"Hash Array Mapped Tries","title":"Introduction: hashmaps","text":"","category":"section"},{"location":"generated/hamt/","page":"Hash Array Mapped Tries","title":"Hash Array Mapped Tries","text":"Exercise 10.11 of Purely Functional Data Structures describes a hashmap (or hashtable) as a nested dictionary, an outer dictionary that maps approximate keys to inner dictionaries keyed by exact keys. We complete the definition by specifying a hash function that converts exact keys to approximate keys. For example, in C++ the std::unordered_map uses std::hash as a hash function that maps input keys to integers, an array as the approximate dictionary (think of an array as a dictionary with integer keys), and a linked list as the exact dictionary.","category":"page"},{"location":"generated/hamt/","page":"Hash Array Mapped Tries","title":"Hash Array Mapped Tries","text":"PureFun.HashMaps.@hashmap constructs new dictionary types by assembling hashmaps from specified components:","category":"page"},{"location":"generated/hamt/","page":"Hash Array Mapped Tries","title":"Hash Array Mapped Tries","text":"const RBDict = PureFun.RedBlack.RBDict{Base.Order.ForwardOrdering}\n\n@hashmap(RedBlackHashMap,\n         approx   = RBDict,\n         exact    = PureFun.Association.List,\n         hashfunc = hash)","category":"page"},{"location":"generated/hamt/","page":"Hash Array Mapped Tries","title":"Hash Array Mapped Tries","text":"hashfunc is optional, and is set to Base.hash by default.[hashfuncs]","category":"page"},{"location":"generated/hamt/","page":"Hash Array Mapped Tries","title":"Hash Array Mapped Tries","text":"We now test and benchmark RedBlackHashMap:","category":"page"},{"location":"generated/hamt/","page":"Hash Array Mapped Tries","title":"Hash Array Mapped Tries","text":"test_dicttype(RedBlackHashMap)","category":"page"},{"location":"generated/hamt/","page":"Hash Array Mapped Tries","title":"Hash Array Mapped Tries","text":"Test Summary:                                   | Pass  Total  Time\nbasic tests for Main.var\"##319\".RedBlackHashMap |    5      5  0.8s\n","category":"page"},{"location":"generated/hamt/","page":"Hash Array Mapped Tries","title":"Hash Array Mapped Tries","text":"Though the resulting benchmarks are still impressive, we can see that search times slow down as the collection gets larger.","category":"page"},{"location":"generated/hamt/","page":"Hash Array Mapped Tries","title":"Hash Array Mapped Tries","text":"julia> bench_dicttype(RedBlackHashMap, 10)\n(size = 10, search_hit_ns = 31, search_miss_ns = 16)\n\njulia> bench_dicttype(RedBlackHashMap, 100)\n(size = 100, search_hit_ns = 35, search_miss_ns = 24)\n\njulia> bench_dicttype(RedBlackHashMap, 100_000)\n(size = 100000, search_hit_ns = 69, search_miss_ns = 59)\n\njulia> bench_dicttype(RedBlackHashMap, 1_000_000)\n(size = 1000000, search_hit_ns = 81, search_miss_ns = 71)","category":"page"},{"location":"generated/hamt/","page":"Hash Array Mapped Tries","title":"Hash Array Mapped Tries","text":"Alas, anyone who's been using Base.Dict will have become accustomed to constant time lookups and inserts, while the RedBlackHashMap requires log_2n time. Can we do better?","category":"page"},{"location":"generated/hamt/","page":"Hash Array Mapped Tries","title":"Hash Array Mapped Tries","text":"[hashfuncs]: We can specify different hash functions to achieve a variety of           behaviors. For example, in near duplicate           detection,           we utilize locality-sensitive hash functions, which hash           \"similar\" input values to the same output value, for           domain-specific definitions of \"similar.\" Given a           soundex implementation,           we could expand RedBlackHashMap into a dictionary of named           tuples indexed into \"blocks\" of similar records:@hashmap(SoundexDict,\n         approx   = RedBlackHashMap,\n         exact    = RedBlackHashMap,\n         hashfunc = x -> soundex(x.lastname))","category":"page"},{"location":"generated/hamt/#Improving-on-\\mathcal{O}(\\log_{2}n)","page":"Hash Array Mapped Tries","title":"Improving on mathcalO(log_2n)","text":"","category":"section"},{"location":"generated/hamt/","page":"Hash Array Mapped Tries","title":"Hash Array Mapped Tries","text":"PureFun.Contiguous.bitmap allows us to construct fast and compact dictionaries over integer keys, with lookups requiring a single memory access plus a couple of hardware-optimized bit-shift operations. The resulting dictionary is nearly as fast at indexing integer keys as a raw Base.Vector, but is sparse, requiring just one bit of extra storage for each key that is not present. The drawback is that we are limited to small keys. Still, we can construct a tiny version of C++'s std::unordered_map[addone]:","category":"page"},{"location":"generated/hamt/","page":"Hash Array Mapped Tries","title":"Hash Array Mapped Tries","text":"const BitMap = PureFun.Contiguous.bitmap(64)\n\n@hashmap(BitMapHashMap,\n         approx   = BitMap,\n         exact    = PureFun.Association.List,\n         hashfunc = x -> 1 + hash(x) % 64)\n\ntest_dicttype(BitMapHashMap)","category":"page"},{"location":"generated/hamt/","page":"Hash Array Mapped Tries","title":"Hash Array Mapped Tries","text":"Test Summary:                                 | Pass  Total  Time\nbasic tests for Main.var\"##319\".BitMapHashMap |    5      5  0.2s\n","category":"page"},{"location":"generated/hamt/","page":"Hash Array Mapped Tries","title":"Hash Array Mapped Tries","text":"Once again I ran the benchmarks locally:","category":"page"},{"location":"generated/hamt/","page":"Hash Array Mapped Tries","title":"Hash Array Mapped Tries","text":"julia> bench_dicttype(BitMapHashMap, 10)\n(size = 10, search_hit_ns = 23, search_miss_ns = 11)\n\njulia> bench_dicttype(BitMapHashMap, 100)\n(size = 100, search_hit_ns = 24, search_miss_ns = 18)\n\njulia> bench_dicttype(BitMapHashMap, 100_000)\n(size = 100000, search_hit_ns = 4171, search_miss_ns = 11417)","category":"page"},{"location":"generated/hamt/","page":"Hash Array Mapped Tries","title":"Hash Array Mapped Tries","text":"[addone]: When taking the modulo to convert the hash to a valid key for the bitmap   we have to add 1, since the bitmaps expect keys in the range 12^n   rather than 02^n-1","category":"page"},{"location":"generated/hamt/","page":"Hash Array Mapped Tries","title":"Hash Array Mapped Tries","text":"For small collections, the BitMapHashMap provides lookup times comparable to Base.Dict, but if our collection grows much at all, lookup times devolve to linear in the number of elements, as the pigeonhole principle pushes most of the search down to the linked lists. We're calculating a full 64-bit hash, but we lose most of that information when we squeeze it into a BitMap that can only hold small numbers. What we need is a way to generalize the performance benefits of the BitMap to larger keys.","category":"page"},{"location":"generated/hamt/#Tries:-chaining-together-smaller-dictionaries","page":"Hash Array Mapped Tries","title":"Tries: chaining together smaller dictionaries","text":"","category":"section"},{"location":"generated/hamt/","page":"Hash Array Mapped Tries","title":"Hash Array Mapped Tries","text":"Chapter 10, (S1031) of Purely Functional Data Structures introduces another dictionary type, the trie. It's described as \"a multiway tree where each edge is labelled with a character.\" In PureFun.jl, tries can be used not just with strings, but with any type of key that decomposes into a sequence of simpler keys.","category":"page"},{"location":"generated/hamt/","page":"Hash Array Mapped Tries","title":"Hash Array Mapped Tries","text":"Lookup and insertion times in tries are independent of the number of keys, and are instead linear in the length of keys. Tries in PureFun.jl use path compression, so in practice looking up well-distributed keys requires visiting a small number of nodes regardless of key length.","category":"page"},{"location":"generated/hamt/","page":"Hash Array Mapped Tries","title":"Hash Array Mapped Tries","text":"When implementing a trie, a critical question:","category":"page"},{"location":"generated/hamt/","page":"Hash Array Mapped Tries","title":"Hash Array Mapped Tries","text":"... is how to represent edges leaving a node. Ordinarily, we would represent the children of a multiway node as a list of trees, but here we also need to represent the edge labels. Depending on the choice of base type and the expected density of the trie, we might represent the edges leaving a node as a vector, an association list, a binary search tree, or even, if the base type is itself a list or a string, another trie! We abstract away from the particular representation of these edge maps ...","category":"page"},{"location":"generated/hamt/","page":"Hash Array Mapped Tries","title":"Hash Array Mapped Tries","text":"PureFun.Tries.@trie constructs new trie types given an edgemap type.","category":"page"},{"location":"generated/hamt/","page":"Hash Array Mapped Tries","title":"Hash Array Mapped Tries","text":"@trie(RedBlackTrie,\n      edgemap = PureFun.RedBlack.RBDict{Base.Order.ForwardOrdering})\n\ntest_dicttype(RedBlackTrie)","category":"page"},{"location":"generated/hamt/","page":"Hash Array Mapped Tries","title":"Hash Array Mapped Tries","text":"Test Summary:                                | Pass  Total  Time\nbasic tests for Main.var\"##319\".RedBlackTrie |    5      5  0.8s\n","category":"page"},{"location":"generated/hamt/","page":"Hash Array Mapped Tries","title":"Hash Array Mapped Tries","text":"We can use any key type that decomposes into a sequence of simpler keys, for example we can use a trie to organize integer sequences stored as linked lists:","category":"page"},{"location":"generated/hamt/","page":"Hash Array Mapped Tries","title":"Hash Array Mapped Tries","text":"const ∅ = PureFun.Linked.List{Int}()\n\nRedBlackTrie((1 ⇀ 2 ⇀ ∅     => \"inorder\",\n              3 ⇀ 2 ⇀ 1 ⇀ ∅ => \"reversed\",\n              2 ⇀ 1 ⇀ 3 ⇀ ∅ => \"random\"))","category":"page"},{"location":"generated/hamt/","page":"Hash Array Mapped Tries","title":"Hash Array Mapped Tries","text":"Main.var\"##319\".RedBlackTrie{PureFun.Linked.NonEmpty{Int64}, String} with 3 entries:\n  1, 2,  => \"inorder\"\n  2, 1, 3,  => \"random\"\n  3, 2, 1,  => \"reversed\"","category":"page"},{"location":"generated/hamt/","page":"Hash Array Mapped Tries","title":"Hash Array Mapped Tries","text":"Because we started with already randomized string keys (which we expect to be nicely distributed), the RedBlackTrie can shine without need for a hash function:","category":"page"},{"location":"generated/hamt/","page":"Hash Array Mapped Tries","title":"Hash Array Mapped Tries","text":"julia> bench_dicttype(RedBlackTrie, 10)\n(size = 10, search_hit_ns = 40, search_miss_ns = 26)\n\njulia> bench_dicttype(RedBlackTrie, 100)\n(size = 100, search_hit_ns = 55, search_miss_ns = 39)\n\njulia> bench_dicttype(RedBlackTrie, 100_000)\n(size = 100000, search_hit_ns = 89, search_miss_ns = 68)\n\njulia> bench_dicttype(RedBlackTrie, 1_000_000)\n(size = 1000000, search_hit_ns = 109, search_miss_ns = 86)","category":"page"},{"location":"generated/hamt/#biterate:-iterating-over-sequences-of-bits","page":"Hash Array Mapped Tries","title":"biterate: iterating over sequences of bits","text":"","category":"section"},{"location":"generated/hamt/","page":"Hash Array Mapped Tries","title":"Hash Array Mapped Tries","text":"@trie takes, as an optional argument, a keyfunc that reinterprets the input key as a sequence of simpler keys. By default, keyfunc is equal to codeunits for String keys, in order to correctly handle strings with variable-width character encodings.","category":"page"},{"location":"generated/hamt/","page":"Hash Array Mapped Tries","title":"Hash Array Mapped Tries","text":"PureFun.Contiguous.biterate, which takes an integer key and efficiently[biterate] reinterprets it as a sequence of smaller integers, is especially relevant to the current discussion. The resulting sequence can be thought of as vector indexes, and in keeping with Julia's convention of 1-based indexing, the iterated elements start at 1. In the following example, we iterate over the input 8 bits at a time, outputting sequences of integers in the range 1 256 (since 2^8 == 256)","category":"page"},{"location":"generated/hamt/","page":"Hash Array Mapped Tries","title":"Hash Array Mapped Tries","text":"[biterate]: biterate works by consuming its input a few bits at a time, and          interprets those bits as an integer (after adding a 1). It is          implemented in terms of bit-shifting operations and so is very          fast.","category":"page"},{"location":"generated/hamt/","page":"Hash Array Mapped Tries","title":"Hash Array Mapped Tries","text":"for i in PureFun.Contiguous.biterate(8, 19481210) println(i) end","category":"page"},{"location":"generated/hamt/","page":"Hash Array Mapped Tries","title":"Hash Array Mapped Tries","text":"123\n67\n42\n2\n1\n1\n1\n1\n","category":"page"},{"location":"generated/hamt/","page":"Hash Array Mapped Tries","title":"Hash Array Mapped Tries","text":"We can use biterate to help us chain together BitMaps to store larger integer keys, we call the resulting structure a bitmapped trie or bitmapped array trie:","category":"page"},{"location":"generated/hamt/","page":"Hash Array Mapped Tries","title":"Hash Array Mapped Tries","text":"@trie(BitMapTrie,\n      edgemap = PureFun.Contiguous.bitmap(64),\n      keyfunc = PureFun.Contiguous.biterate(6))","category":"page"},{"location":"generated/hamt/","page":"Hash Array Mapped Tries","title":"Hash Array Mapped Tries","text":"This dictionary type can only store integer keys, so instead of running it through the usual tests, we just run these ad hoc tests to make sure things are working:","category":"page"},{"location":"generated/hamt/","page":"Hash Array Mapped Tries","title":"Hash Array Mapped Tries","text":"bmt = BitMapTrie((0 => \"wee\", 1 => \"hello\", 2 => \"world\"))\n@assert bmt[2] == \"world\"\n@assert length(bmt) == 3","category":"page"},{"location":"generated/hamt/","page":"Hash Array Mapped Tries","title":"Hash Array Mapped Tries","text":"In the worst case, a lookup in BitMapTrie takes 11 memory accesses, one for each chunk of bits that we use to represent the 64 bit input[biteratelength]. But due to path compression, if our keys are spread out we'll only ever have to lookup a couple of the indexes before uniquely identifying a key. For that reason, when combined with a good hash function, BitMapTrie makes an ideal approx dictionary for a hash table:","category":"page"},{"location":"generated/hamt/","page":"Hash Array Mapped Tries","title":"Hash Array Mapped Tries","text":"[biteratelength]: since 6 doesn't divide evenly into 64, the last index                produced by biterate will only have 4 bits and sit in the                range 116. Also we can reduce the worst-case number of                memory accesses in this case by using a smaller key, such as                a 32-bit or 16-bit integer (Int32 or Int16).","category":"page"},{"location":"generated/hamt/","page":"Hash Array Mapped Tries","title":"Hash Array Mapped Tries","text":"@hashmap(HAMT,\n         approx = BitMapTrie,\n         exact  = PureFun.Association.List)\n\ntest_dicttype(HAMT)","category":"page"},{"location":"generated/hamt/","page":"Hash Array Mapped Tries","title":"Hash Array Mapped Tries","text":"Test Summary:                        | Pass  Total  Time\nbasic tests for Main.var\"##319\".HAMT |    5      5  0.4s\n","category":"page"},{"location":"generated/hamt/","page":"Hash Array Mapped Tries","title":"Hash Array Mapped Tries","text":"julia> bench_dicttype(HAMT, 10)\n(size = 10, search_hit_ns = 31, search_miss_ns = 14)\n\njulia> bench_dicttype(HAMT, 100)\n(size = 100, search_hit_ns = 42, search_miss_ns = 21)\n\njulia> bench_dicttype(HAMT, 100_000)\n(size = 100000, search_hit_ns = 58, search_miss_ns = 49)\n\njulia> bench_dicttype(HAMT, 1_000_000)\n(size = 1000000, search_hit_ns = 75, search_miss_ns = 49)","category":"page"},{"location":"generated/hamt/","page":"Hash Array Mapped Tries","title":"Hash Array Mapped Tries","text":"The HAMT is described as a constant-time container, so why does it look like search times increase (gradually – notice that each of the last two steps are 1000x increases in number of elements) with the number of elements?","category":"page"},{"location":"generated/hamt/","page":"Hash Array Mapped Tries","title":"Hash Array Mapped Tries","text":"Our hash function maps all keys to hashes of the same length. As a result, the worst-case lookup time after having calculated the hash is in fact constant, defined by the total number of hops, 5 bits at a time, required to consume 64 bits[caveat].","category":"page"},{"location":"generated/hamt/","page":"Hash Array Mapped Tries","title":"Hash Array Mapped Tries","text":"But as we can see, in practice lookups are much faster than the theoretical worst-case due to the path compression in the tries. We only end up using as much of the hash as is necessary to uniquely identify a key. That number will grow slowly as we keep adding additional elements, and as a result the observed search times will slowly approach the theoretical worst-case.","category":"page"},{"location":"generated/hamt/","page":"Hash Array Mapped Tries","title":"Hash Array Mapped Tries","text":"[caveat]: Barring a hash collision, which is extremely unlikely outside of an        adversarial attack, as we are using the full 64 bits of the hash","category":"page"},{"location":"generated/hamt/#References-and-further-reading","page":"Hash Array Mapped Tries","title":"References and further reading","text":"","category":"section"},{"location":"generated/hamt/","page":"Hash Array Mapped Tries","title":"Hash Array Mapped Tries","text":"The idea of tries as bootstrapping a finite map over a simple type to a finite map over aggregate types is introduced in section 10.3.1 in Purely Functional Data Structures. Exercise 10.10 describes collapsing paths of nodes with only a single child into a single node, such that no node is both invalid and an only child. However, that exercise suggests achieving this by storing in each node the longest common prefix of the keys stored below. Trie path compression in PureFun.jl, on the other hand, follows the section \"Compressed trie with digit number\" in these notes by Sartaj Sahni, resulting in a much more compact (and as a result, performant) trie structure.","category":"page"},{"location":"generated/hamt/","page":"Hash Array Mapped Tries","title":"Hash Array Mapped Tries","text":"The Array Mapped Tree, the inspiration for PureFun.Contiguous.bitmap, is described in Fast and Space Efficient Trie Searches.","category":"page"},{"location":"generated/hamt/","page":"Hash Array Mapped Tries","title":"Hash Array Mapped Tries","text":"The idea behind PureFun.Contiguous.biterate, iterating over several bits of an integer at a time, is presented in Ideal Hash Trees. That paper introduces the HAMT as it is described here.","category":"page"},{"location":"generated/hamt/","page":"Hash Array Mapped Tries","title":"Hash Array Mapped Tries","text":"This presentation by @theVtuberCh is a good introduction to Hash Array Mapped Tries and several related concepts and data structures.","category":"page"},{"location":"generated/hamt/","page":"Hash Array Mapped Tries","title":"Hash Array Mapped Tries","text":"","category":"page"},{"location":"generated/hamt/","page":"Hash Array Mapped Tries","title":"Hash Array Mapped Tries","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/suffixes/","page":"Generating Suffixes","title":"Generating Suffixes","text":"EditURL = \"https://github.com/tarakc02/PureFun.jl/blob/main/docs/src/suffixes.jl\"","category":"page"},{"location":"generated/suffixes/","page":"Generating Suffixes","title":"Generating Suffixes","text":"using PureFun\nusing PureFun.Linked: List\nusing Plots, BenchmarkTools","category":"page"},{"location":"generated/suffixes/","page":"Generating Suffixes","title":"Generating Suffixes","text":"Exercise 2.1: Write a function suffixes of type List{α} -> List{List{α}} that takes a list xs and returns a list of all the suffixes of xs in decreasing order of length. For example:suffixes([1,2,3,4]) = [[1,2,3,4], [2,3,4], [3,4], [4], []]Show that the resulting list of suffixes can be generated in mathcalO(n) time and represented in mathcalO(n) space","category":"page"},{"location":"generated/suffixes/#Set-up-a-test-case","page":"Generating Suffixes","title":"Set up a test case","text":"","category":"section"},{"location":"generated/suffixes/","page":"Generating Suffixes","title":"Generating Suffixes","text":"test = [1,2,3,4];\nexpected_output = [[1,2,3,4], [2,3,4], [3,4], [4], Int[]];","category":"page"},{"location":"generated/suffixes/#The-suffixes-function","page":"Generating Suffixes","title":"The suffixes function","text":"","category":"section"},{"location":"generated/suffixes/","page":"Generating Suffixes","title":"Generating Suffixes","text":"Our strategy is: we'll traverse the input from the right. We'll generate the suffixes in ascending order and successively place each one at the top of our solution, so that at the end we have the desired output:","category":"page"},{"location":"generated/suffixes/","page":"Generating Suffixes","title":"Generating Suffixes","text":"suffixes(l) = foldr( add_suffix, l, init = empty_suffixlist(eltype(l)) );","category":"page"},{"location":"generated/suffixes/","page":"Generating Suffixes","title":"Generating Suffixes","text":"We still have to define add_suffix and empty_suffixlist.","category":"page"},{"location":"generated/suffixes/","page":"Generating Suffixes","title":"Generating Suffixes","text":"For each element, add_suffix creates the next suffix by adding the element to the front of the most recently generated suffix, and then pushes the new suffix on to the top of the suffix list.","category":"page"},{"location":"generated/suffixes/","page":"Generating Suffixes","title":"Generating Suffixes","text":"add_suffix(x, sufs) = (x ⇀ sufs[1]) ⇀ sufs;","category":"page"},{"location":"generated/suffixes/","page":"Generating Suffixes","title":"Generating Suffixes","text":"For the base case, we initialize a list containing just the empty suffix:","category":"page"},{"location":"generated/suffixes/","page":"Generating Suffixes","title":"Generating Suffixes","text":"empty_suffixlist(::Type{T}) where T = List{T}() ⇀ List{List{T}}();","category":"page"},{"location":"generated/suffixes/#Confirm-the-solution-is-valid","page":"Generating Suffixes","title":"Confirm the solution is valid","text":"","category":"section"},{"location":"generated/suffixes/","page":"Generating Suffixes","title":"Generating Suffixes","text":"suffixes(test)\n@assert all(collect.(suffixes(test)) .== expected_output)","category":"page"},{"location":"generated/suffixes/#Time-and-space-complexity","page":"Generating Suffixes","title":"Time and space complexity","text":"","category":"section"},{"location":"generated/suffixes/","page":"Generating Suffixes","title":"Generating Suffixes","text":"First, we generate some data for the experiments:","category":"page"},{"location":"generated/suffixes/","page":"Generating Suffixes","title":"Generating Suffixes","text":"input_lists = List.(1:k for k in 25:25:500);\ninput_lengths = length.(input_lists);","category":"page"},{"location":"generated/suffixes/","page":"Generating Suffixes","title":"Generating Suffixes","text":"Now, we measure the time and the space used to generate suffixes. I'd like to avoid running benchmarking code on a documentation server. But it seems reasonable by looking at the code that the time required to generate suffixes will be proportional to the amount of memory allocated, so I'll use memory allocated during the operation as a proxy for time:","category":"page"},{"location":"generated/suffixes/","page":"Generating Suffixes","title":"Generating Suffixes","text":"allocated = map(input_lists) do l\n    @allocated suffixes(l)\nend;\n\nsuffix_sizes = map(suffixes.(input_lists)) do s\n    Base.summarysize(s)\nend;","category":"page"},{"location":"generated/suffixes/","page":"Generating Suffixes","title":"Generating Suffixes","text":"Our solution satisfies the mathcalO(n) space requirement:","category":"page"},{"location":"generated/suffixes/","page":"Generating Suffixes","title":"Generating Suffixes","text":"plot(input_lengths, suffix_sizes/1000,\n     seriestype = :scatter,\n     xlabel = \"# of input elements\",\n     ylabel = \"kB\",\n     title = \"Space required to represent all suffixes of a list\",\n     legend = false)","category":"page"},{"location":"generated/suffixes/","page":"Generating Suffixes","title":"Generating Suffixes","text":"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"600\" height=\"400\" viewBox=\"0 0 2400 1600\">\n<defs>\n  <clipPath id=\"clip160\">\n    <rect x=\"0\" y=\"0\" width=\"2400\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip160)\" d=\"\nM0 1600 L2400 1600 L2400 0 L0 0  Z\n  \" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip161\">\n    <rect x=\"480\" y=\"0\" width=\"1681\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip160)\" d=\"\nM102.74 1505.26 L2352.76 1505.26 L2352.76 62.9921 L102.74 62.9921  Z\n  \" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip162\">\n    <rect x=\"102\" y=\"62\" width=\"2251\" height=\"1443\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip162)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"\n  501.576,1505.26 501.576,62.9921 \n  \"/>\n<polyline clip-path=\"url(#clip162)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"\n  948.451,1505.26 948.451,62.9921 \n  \"/>\n<polyline clip-path=\"url(#clip162)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"\n  1395.33,1505.26 1395.33,62.9921 \n  \"/>\n<polyline clip-path=\"url(#clip162)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"\n  1842.2,1505.26 1842.2,62.9921 \n  \"/>\n<polyline clip-path=\"url(#clip162)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"\n  2289.08,1505.26 2289.08,62.9921 \n  \"/>\n<polyline clip-path=\"url(#clip160)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"\n  102.74,1505.26 2352.76,1505.26 \n  \"/>\n<polyline clip-path=\"url(#clip160)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"\n  501.576,1505.26 501.576,1486.36 \n  \"/>\n<polyline clip-path=\"url(#clip160)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"\n  948.451,1505.26 948.451,1486.36 \n  \"/>\n<polyline clip-path=\"url(#clip160)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"\n  1395.33,1505.26 1395.33,1486.36 \n  \"/>\n<polyline clip-path=\"url(#clip160)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"\n  1842.2,1505.26 1842.2,1486.36 \n  \"/>\n<polyline clip-path=\"url(#clip160)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"\n  2289.08,1505.26 2289.08,1486.36 \n  \"/>\n<path clip-path=\"url(#clip160)\" d=\"M461.183 1563.72 L468.822 1563.72 L468.822 1537.36 L460.512 1539.03 L460.512 1534.77 L468.775 1533.1 L473.451 1533.1 L473.451 1563.72 L481.09 1563.72 L481.09 1567.66 L461.183 1567.66 L461.183 1563.72 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M500.534 1536.18 Q496.923 1536.18 495.095 1539.74 Q493.289 1543.28 493.289 1550.41 Q493.289 1557.52 495.095 1561.09 Q496.923 1564.63 500.534 1564.63 Q504.169 1564.63 505.974 1561.09 Q507.803 1557.52 507.803 1550.41 Q507.803 1543.28 505.974 1539.74 Q504.169 1536.18 500.534 1536.18 M500.534 1532.47 Q506.345 1532.47 509.4 1537.08 Q512.479 1541.66 512.479 1550.41 Q512.479 1559.14 509.4 1563.75 Q506.345 1568.33 500.534 1568.33 Q494.724 1568.33 491.646 1563.75 Q488.59 1559.14 488.59 1550.41 Q488.59 1541.66 491.646 1537.08 Q494.724 1532.47 500.534 1532.47 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M530.696 1536.18 Q527.085 1536.18 525.257 1539.74 Q523.451 1543.28 523.451 1550.41 Q523.451 1557.52 525.257 1561.09 Q527.085 1564.63 530.696 1564.63 Q534.331 1564.63 536.136 1561.09 Q537.965 1557.52 537.965 1550.41 Q537.965 1543.28 536.136 1539.74 Q534.331 1536.18 530.696 1536.18 M530.696 1532.47 Q536.506 1532.47 539.562 1537.08 Q542.641 1541.66 542.641 1550.41 Q542.641 1559.14 539.562 1563.75 Q536.506 1568.33 530.696 1568.33 Q524.886 1568.33 521.807 1563.75 Q518.752 1559.14 518.752 1550.41 Q518.752 1541.66 521.807 1537.08 Q524.886 1532.47 530.696 1532.47 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M912.143 1563.72 L928.463 1563.72 L928.463 1567.66 L906.518 1567.66 L906.518 1563.72 Q909.181 1560.97 913.764 1556.34 Q918.37 1551.69 919.551 1550.35 Q921.796 1547.82 922.676 1546.09 Q923.579 1544.33 923.579 1542.64 Q923.579 1539.88 921.634 1538.15 Q919.713 1536.41 916.611 1536.41 Q914.412 1536.41 911.958 1537.17 Q909.528 1537.94 906.75 1539.49 L906.75 1534.77 Q909.574 1533.63 912.028 1533.05 Q914.481 1532.47 916.518 1532.47 Q921.889 1532.47 925.083 1535.16 Q928.278 1537.85 928.278 1542.34 Q928.278 1544.47 927.467 1546.39 Q926.68 1548.28 924.574 1550.88 Q923.995 1551.55 920.893 1554.77 Q917.792 1557.96 912.143 1563.72 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M948.278 1536.18 Q944.666 1536.18 942.838 1539.74 Q941.032 1543.28 941.032 1550.41 Q941.032 1557.52 942.838 1561.09 Q944.666 1564.63 948.278 1564.63 Q951.912 1564.63 953.717 1561.09 Q955.546 1557.52 955.546 1550.41 Q955.546 1543.28 953.717 1539.74 Q951.912 1536.18 948.278 1536.18 M948.278 1532.47 Q954.088 1532.47 957.143 1537.08 Q960.222 1541.66 960.222 1550.41 Q960.222 1559.14 957.143 1563.75 Q954.088 1568.33 948.278 1568.33 Q942.467 1568.33 939.389 1563.75 Q936.333 1559.14 936.333 1550.41 Q936.333 1541.66 939.389 1537.08 Q942.467 1532.47 948.278 1532.47 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M978.439 1536.18 Q974.828 1536.18 973 1539.74 Q971.194 1543.28 971.194 1550.41 Q971.194 1557.52 973 1561.09 Q974.828 1564.63 978.439 1564.63 Q982.074 1564.63 983.879 1561.09 Q985.708 1557.52 985.708 1550.41 Q985.708 1543.28 983.879 1539.74 Q982.074 1536.18 978.439 1536.18 M978.439 1532.47 Q984.25 1532.47 987.305 1537.08 Q990.384 1541.66 990.384 1550.41 Q990.384 1559.14 987.305 1563.75 Q984.25 1568.33 978.439 1568.33 Q972.629 1568.33 969.551 1563.75 Q966.495 1559.14 966.495 1550.41 Q966.495 1541.66 969.551 1537.08 Q972.629 1532.47 978.439 1532.47 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M1369.09 1549.03 Q1372.44 1549.74 1374.32 1552.01 Q1376.22 1554.28 1376.22 1557.61 Q1376.22 1562.73 1372.7 1565.53 Q1369.18 1568.33 1362.7 1568.33 Q1360.52 1568.33 1358.21 1567.89 Q1355.92 1567.47 1353.46 1566.62 L1353.46 1562.1 Q1355.41 1563.24 1357.72 1563.82 Q1360.04 1564.4 1362.56 1564.4 Q1366.96 1564.4 1369.25 1562.66 Q1371.56 1560.92 1371.56 1557.61 Q1371.56 1554.56 1369.41 1552.85 Q1367.28 1551.11 1363.46 1551.11 L1359.44 1551.11 L1359.44 1547.27 L1363.65 1547.27 Q1367.1 1547.27 1368.93 1545.9 Q1370.75 1544.51 1370.75 1541.92 Q1370.75 1539.26 1368.86 1537.85 Q1366.98 1536.41 1363.46 1536.41 Q1361.54 1536.41 1359.34 1536.83 Q1357.14 1537.24 1354.5 1538.12 L1354.5 1533.96 Q1357.17 1533.22 1359.48 1532.85 Q1361.82 1532.47 1363.88 1532.47 Q1369.2 1532.47 1372.31 1534.91 Q1375.41 1537.31 1375.41 1541.43 Q1375.41 1544.3 1373.76 1546.29 Q1372.12 1548.26 1369.09 1549.03 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M1395.08 1536.18 Q1391.47 1536.18 1389.64 1539.74 Q1387.84 1543.28 1387.84 1550.41 Q1387.84 1557.52 1389.64 1561.09 Q1391.47 1564.63 1395.08 1564.63 Q1398.72 1564.63 1400.52 1561.09 Q1402.35 1557.52 1402.35 1550.41 Q1402.35 1543.28 1400.52 1539.74 Q1398.72 1536.18 1395.08 1536.18 M1395.08 1532.47 Q1400.89 1532.47 1403.95 1537.08 Q1407.03 1541.66 1407.03 1550.41 Q1407.03 1559.14 1403.95 1563.75 Q1400.89 1568.33 1395.08 1568.33 Q1389.27 1568.33 1386.19 1563.75 Q1383.14 1559.14 1383.14 1550.41 Q1383.14 1541.66 1386.19 1537.08 Q1389.27 1532.47 1395.08 1532.47 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M1425.24 1536.18 Q1421.63 1536.18 1419.81 1539.74 Q1418 1543.28 1418 1550.41 Q1418 1557.52 1419.81 1561.09 Q1421.63 1564.63 1425.24 1564.63 Q1428.88 1564.63 1430.68 1561.09 Q1432.51 1557.52 1432.51 1550.41 Q1432.51 1543.28 1430.68 1539.74 Q1428.88 1536.18 1425.24 1536.18 M1425.24 1532.47 Q1431.06 1532.47 1434.11 1537.08 Q1437.19 1541.66 1437.19 1550.41 Q1437.19 1559.14 1434.11 1563.75 Q1431.06 1568.33 1425.24 1568.33 Q1419.43 1568.33 1416.36 1563.75 Q1413.3 1559.14 1413.3 1550.41 Q1413.3 1541.66 1416.36 1537.08 Q1419.43 1532.47 1425.24 1532.47 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M1815.29 1537.17 L1803.49 1555.62 L1815.29 1555.62 L1815.29 1537.17 M1814.06 1533.1 L1819.94 1533.1 L1819.94 1555.62 L1824.87 1555.62 L1824.87 1559.51 L1819.94 1559.51 L1819.94 1567.66 L1815.29 1567.66 L1815.29 1559.51 L1799.69 1559.51 L1799.69 1555 L1814.06 1533.1 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M1842.61 1536.18 Q1839 1536.18 1837.17 1539.74 Q1835.36 1543.28 1835.36 1550.41 Q1835.36 1557.52 1837.17 1561.09 Q1839 1564.63 1842.61 1564.63 Q1846.24 1564.63 1848.05 1561.09 Q1849.87 1557.52 1849.87 1550.41 Q1849.87 1543.28 1848.05 1539.74 Q1846.24 1536.18 1842.61 1536.18 M1842.61 1532.47 Q1848.42 1532.47 1851.47 1537.08 Q1854.55 1541.66 1854.55 1550.41 Q1854.55 1559.14 1851.47 1563.75 Q1848.42 1568.33 1842.61 1568.33 Q1836.8 1568.33 1833.72 1563.75 Q1830.66 1559.14 1830.66 1550.41 Q1830.66 1541.66 1833.72 1537.08 Q1836.8 1532.47 1842.61 1532.47 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M1872.77 1536.18 Q1869.16 1536.18 1867.33 1539.74 Q1865.52 1543.28 1865.52 1550.41 Q1865.52 1557.52 1867.33 1561.09 Q1869.16 1564.63 1872.77 1564.63 Q1876.4 1564.63 1878.21 1561.09 Q1880.04 1557.52 1880.04 1550.41 Q1880.04 1543.28 1878.21 1539.74 Q1876.4 1536.18 1872.77 1536.18 M1872.77 1532.47 Q1878.58 1532.47 1881.63 1537.08 Q1884.71 1541.66 1884.71 1550.41 Q1884.71 1559.14 1881.63 1563.75 Q1878.58 1568.33 1872.77 1568.33 Q1866.96 1568.33 1863.88 1563.75 Q1860.82 1559.14 1860.82 1550.41 Q1860.82 1541.66 1863.88 1537.08 Q1866.96 1532.47 1872.77 1532.47 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M2248.69 1533.1 L2267.05 1533.1 L2267.05 1537.04 L2252.98 1537.04 L2252.98 1545.51 Q2254 1545.16 2255.01 1545 Q2256.03 1544.81 2257.05 1544.81 Q2262.84 1544.81 2266.22 1547.98 Q2269.6 1551.16 2269.6 1556.57 Q2269.6 1562.15 2266.12 1565.25 Q2262.65 1568.33 2256.33 1568.33 Q2254.16 1568.33 2251.89 1567.96 Q2249.64 1567.59 2247.24 1566.85 L2247.24 1562.15 Q2249.32 1563.28 2251.54 1563.84 Q2253.76 1564.4 2256.24 1564.4 Q2260.25 1564.4 2262.58 1562.29 Q2264.92 1560.18 2264.92 1556.57 Q2264.92 1552.96 2262.58 1550.85 Q2260.25 1548.75 2256.24 1548.75 Q2254.37 1548.75 2252.49 1549.16 Q2250.64 1549.58 2248.69 1550.46 L2248.69 1533.1 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M2288.81 1536.18 Q2285.2 1536.18 2283.37 1539.74 Q2281.56 1543.28 2281.56 1550.41 Q2281.56 1557.52 2283.37 1561.09 Q2285.2 1564.63 2288.81 1564.63 Q2292.44 1564.63 2294.25 1561.09 Q2296.08 1557.52 2296.08 1550.41 Q2296.08 1543.28 2294.25 1539.74 Q2292.44 1536.18 2288.81 1536.18 M2288.81 1532.47 Q2294.62 1532.47 2297.68 1537.08 Q2300.75 1541.66 2300.75 1550.41 Q2300.75 1559.14 2297.68 1563.75 Q2294.62 1568.33 2288.81 1568.33 Q2283 1568.33 2279.92 1563.75 Q2276.87 1559.14 2276.87 1550.41 Q2276.87 1541.66 2279.92 1537.08 Q2283 1532.47 2288.81 1532.47 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M2318.97 1536.18 Q2315.36 1536.18 2313.53 1539.74 Q2311.73 1543.28 2311.73 1550.41 Q2311.73 1557.52 2313.53 1561.09 Q2315.36 1564.63 2318.97 1564.63 Q2322.61 1564.63 2324.41 1561.09 Q2326.24 1557.52 2326.24 1550.41 Q2326.24 1543.28 2324.41 1539.74 Q2322.61 1536.18 2318.97 1536.18 M2318.97 1532.47 Q2324.78 1532.47 2327.84 1537.08 Q2330.92 1541.66 2330.92 1550.41 Q2330.92 1559.14 2327.84 1563.75 Q2324.78 1568.33 2318.97 1568.33 Q2313.16 1568.33 2310.08 1563.75 Q2307.03 1559.14 2307.03 1550.41 Q2307.03 1541.66 2310.08 1537.08 Q2313.16 1532.47 2318.97 1532.47 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M935.132 1621.45 L925.87 1621.45 L923.197 1632.08 L932.522 1632.08 L935.132 1621.45 M930.358 1603.34 L927.048 1616.54 L936.342 1616.54 L939.684 1603.34 L944.776 1603.34 L941.498 1616.54 L951.429 1616.54 L951.429 1621.45 L940.257 1621.45 L937.647 1632.08 L947.768 1632.08 L947.768 1636.95 L936.406 1636.95 L933.095 1650.12 L928.003 1650.12 L931.281 1636.95 L921.955 1636.95 L918.677 1650.12 L913.553 1650.12 L916.863 1636.95 L906.837 1636.95 L906.837 1632.08 L918.04 1632.08 L920.714 1621.45 L910.465 1621.45 L910.465 1616.54 L921.955 1616.54 L925.202 1603.34 L930.358 1603.34 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M997.103 1618.58 Q992.392 1618.58 989.655 1622.27 Q986.917 1625.93 986.917 1632.33 Q986.917 1638.73 989.623 1642.42 Q992.36 1646.08 997.103 1646.08 Q1001.78 1646.08 1004.52 1642.39 Q1007.26 1638.7 1007.26 1632.33 Q1007.26 1626 1004.52 1622.31 Q1001.78 1618.58 997.103 1618.58 M997.103 1613.62 Q1004.74 1613.62 1009.1 1618.58 Q1013.46 1623.55 1013.46 1632.33 Q1013.46 1641.08 1009.1 1646.08 Q1004.74 1651.05 997.103 1651.05 Q989.432 1651.05 985.071 1646.08 Q980.743 1641.08 980.743 1632.33 Q980.743 1623.55 985.071 1618.58 Q989.432 1613.62 997.103 1613.62 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M1041.22 1600.6 L1041.22 1605.47 L1035.62 1605.47 Q1032.46 1605.47 1031.22 1606.74 Q1030.01 1608.01 1030.01 1611.32 L1030.01 1614.48 L1039.66 1614.48 L1039.66 1619.03 L1030.01 1619.03 L1030.01 1650.12 L1024.12 1650.12 L1024.12 1619.03 L1018.52 1619.03 L1018.52 1614.48 L1024.12 1614.48 L1024.12 1611.99 Q1024.12 1606.04 1026.89 1603.34 Q1029.66 1600.6 1035.68 1600.6 L1041.22 1600.6 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M1066.84 1614.48 L1072.7 1614.48 L1072.7 1650.12 L1066.84 1650.12 L1066.84 1614.48 M1066.84 1600.6 L1072.7 1600.6 L1072.7 1608.01 L1066.84 1608.01 L1066.84 1600.6 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M1114.58 1628.61 L1114.58 1650.12 L1108.73 1650.12 L1108.73 1628.8 Q1108.73 1623.74 1106.75 1621.22 Q1104.78 1618.71 1100.83 1618.71 Q1096.09 1618.71 1093.35 1621.73 Q1090.61 1624.76 1090.61 1629.98 L1090.61 1650.12 L1084.73 1650.12 L1084.73 1614.48 L1090.61 1614.48 L1090.61 1620.01 Q1092.72 1616.8 1095.55 1615.21 Q1098.41 1613.62 1102.14 1613.62 Q1108.28 1613.62 1111.43 1617.44 Q1114.58 1621.22 1114.58 1628.61 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M1131.93 1644.78 L1131.93 1663.68 L1126.04 1663.68 L1126.04 1614.48 L1131.93 1614.48 L1131.93 1619.89 Q1133.77 1616.7 1136.58 1615.18 Q1139.41 1613.62 1143.32 1613.62 Q1149.82 1613.62 1153.86 1618.77 Q1157.93 1623.93 1157.93 1632.33 Q1157.93 1640.73 1153.86 1645.89 Q1149.82 1651.05 1143.32 1651.05 Q1139.41 1651.05 1136.58 1649.52 Q1133.77 1647.96 1131.93 1644.78 M1151.85 1632.33 Q1151.85 1625.87 1149.18 1622.21 Q1146.54 1618.52 1141.89 1618.52 Q1137.24 1618.52 1134.57 1622.21 Q1131.93 1625.87 1131.93 1632.33 Q1131.93 1638.79 1134.57 1642.48 Q1137.24 1646.15 1141.89 1646.15 Q1146.54 1646.15 1149.18 1642.48 Q1151.85 1638.79 1151.85 1632.33 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M1167.04 1636.06 L1167.04 1614.48 L1172.89 1614.48 L1172.89 1635.83 Q1172.89 1640.89 1174.86 1643.44 Q1176.84 1645.95 1180.79 1645.95 Q1185.53 1645.95 1188.26 1642.93 Q1191.03 1639.91 1191.03 1634.69 L1191.03 1614.48 L1196.89 1614.48 L1196.89 1650.12 L1191.03 1650.12 L1191.03 1644.65 Q1188.9 1647.9 1186.07 1649.49 Q1183.27 1651.05 1179.54 1651.05 Q1173.4 1651.05 1170.22 1647.23 Q1167.04 1643.41 1167.04 1636.06 M1181.77 1613.62 L1181.77 1613.62 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M1214.75 1604.35 L1214.75 1614.48 L1226.81 1614.48 L1226.81 1619.03 L1214.75 1619.03 L1214.75 1638.38 Q1214.75 1642.74 1215.92 1643.98 Q1217.13 1645.22 1220.79 1645.22 L1226.81 1645.22 L1226.81 1650.12 L1220.79 1650.12 Q1214.01 1650.12 1211.44 1647.61 Q1208.86 1645.06 1208.86 1638.38 L1208.86 1619.03 L1204.56 1619.03 L1204.56 1614.48 L1208.86 1614.48 L1208.86 1604.35 L1214.75 1604.35 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M1285.72 1630.84 L1285.72 1633.7 L1258.8 1633.7 Q1259.18 1639.75 1262.43 1642.93 Q1265.7 1646.08 1271.53 1646.08 Q1274.9 1646.08 1278.05 1645.25 Q1281.24 1644.43 1284.36 1642.77 L1284.36 1648.31 Q1281.2 1649.65 1277.89 1650.35 Q1274.58 1651.05 1271.18 1651.05 Q1262.65 1651.05 1257.65 1646.08 Q1252.69 1641.12 1252.69 1632.65 Q1252.69 1623.9 1257.4 1618.77 Q1262.14 1613.62 1270.16 1613.62 Q1277.35 1613.62 1281.52 1618.26 Q1285.72 1622.88 1285.72 1630.84 M1279.87 1629.12 Q1279.8 1624.31 1277.16 1621.45 Q1274.55 1618.58 1270.22 1618.58 Q1265.32 1618.58 1262.36 1621.35 Q1259.43 1624.12 1258.99 1629.15 L1279.87 1629.12 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M1295.34 1600.6 L1301.19 1600.6 L1301.19 1650.12 L1295.34 1650.12 L1295.34 1600.6 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M1343.94 1630.84 L1343.94 1633.7 L1317.01 1633.7 Q1317.39 1639.75 1320.64 1642.93 Q1323.92 1646.08 1329.74 1646.08 Q1333.12 1646.08 1336.27 1645.25 Q1339.45 1644.43 1342.57 1642.77 L1342.57 1648.31 Q1339.42 1649.65 1336.11 1650.35 Q1332.8 1651.05 1329.39 1651.05 Q1320.86 1651.05 1315.87 1646.08 Q1310.9 1641.12 1310.9 1632.65 Q1310.9 1623.9 1315.61 1618.77 Q1320.35 1613.62 1328.37 1613.62 Q1335.57 1613.62 1339.74 1618.26 Q1343.94 1622.88 1343.94 1630.84 M1338.08 1629.12 Q1338.02 1624.31 1335.38 1621.45 Q1332.77 1618.58 1328.44 1618.58 Q1323.54 1618.58 1320.58 1621.35 Q1317.65 1624.12 1317.2 1629.15 L1338.08 1629.12 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M1381.3 1621.32 Q1383.5 1617.37 1386.56 1615.49 Q1389.61 1613.62 1393.75 1613.62 Q1399.32 1613.62 1402.34 1617.53 Q1405.37 1621.41 1405.37 1628.61 L1405.37 1650.12 L1399.48 1650.12 L1399.48 1628.8 Q1399.48 1623.67 1397.66 1621.19 Q1395.85 1618.71 1392.13 1618.71 Q1387.58 1618.71 1384.93 1621.73 Q1382.29 1624.76 1382.29 1629.98 L1382.29 1650.12 L1376.4 1650.12 L1376.4 1628.8 Q1376.4 1623.64 1374.59 1621.19 Q1372.77 1618.71 1368.99 1618.71 Q1364.5 1618.71 1361.86 1621.76 Q1359.22 1624.79 1359.22 1629.98 L1359.22 1650.12 L1353.33 1650.12 L1353.33 1614.48 L1359.22 1614.48 L1359.22 1620.01 Q1361.22 1616.74 1364.02 1615.18 Q1366.82 1613.62 1370.67 1613.62 Q1374.56 1613.62 1377.26 1615.59 Q1380 1617.56 1381.3 1621.32 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M1447.54 1630.84 L1447.54 1633.7 L1420.61 1633.7 Q1420.99 1639.75 1424.24 1642.93 Q1427.52 1646.08 1433.34 1646.08 Q1436.72 1646.08 1439.87 1645.25 Q1443.05 1644.43 1446.17 1642.77 L1446.17 1648.31 Q1443.02 1649.65 1439.71 1650.35 Q1436.4 1651.05 1432.99 1651.05 Q1424.46 1651.05 1419.47 1646.08 Q1414.5 1641.12 1414.5 1632.65 Q1414.5 1623.9 1419.21 1618.77 Q1423.96 1613.62 1431.98 1613.62 Q1439.17 1613.62 1443.34 1618.26 Q1447.54 1622.88 1447.54 1630.84 M1441.68 1629.12 Q1441.62 1624.31 1438.98 1621.45 Q1436.37 1618.58 1432.04 1618.58 Q1427.14 1618.58 1424.18 1621.35 Q1421.25 1624.12 1420.8 1629.15 L1441.68 1629.12 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M1486.78 1628.61 L1486.78 1650.12 L1480.93 1650.12 L1480.93 1628.8 Q1480.93 1623.74 1478.95 1621.22 Q1476.98 1618.71 1473.03 1618.71 Q1468.29 1618.71 1465.55 1621.73 Q1462.82 1624.76 1462.82 1629.98 L1462.82 1650.12 L1456.93 1650.12 L1456.93 1614.48 L1462.82 1614.48 L1462.82 1620.01 Q1464.92 1616.8 1467.75 1615.21 Q1470.62 1613.62 1474.34 1613.62 Q1480.48 1613.62 1483.63 1617.44 Q1486.78 1621.22 1486.78 1628.61 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M1504.26 1604.35 L1504.26 1614.48 L1516.32 1614.48 L1516.32 1619.03 L1504.26 1619.03 L1504.26 1638.38 Q1504.26 1642.74 1505.44 1643.98 Q1506.65 1645.22 1510.31 1645.22 L1516.32 1645.22 L1516.32 1650.12 L1510.31 1650.12 Q1503.53 1650.12 1500.95 1647.61 Q1498.37 1645.06 1498.37 1638.38 L1498.37 1619.03 L1494.07 1619.03 L1494.07 1614.48 L1498.37 1614.48 L1498.37 1604.35 L1504.26 1604.35 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M1546.75 1615.53 L1546.75 1621.06 Q1544.27 1619.79 1541.59 1619.15 Q1538.92 1618.52 1536.06 1618.52 Q1531.69 1618.52 1529.5 1619.85 Q1527.33 1621.19 1527.33 1623.87 Q1527.33 1625.9 1528.89 1627.08 Q1530.45 1628.23 1535.16 1629.28 L1537.17 1629.72 Q1543.41 1631.06 1546.02 1633.51 Q1548.66 1635.93 1548.66 1640.29 Q1548.66 1645.25 1544.71 1648.15 Q1540.8 1651.05 1533.92 1651.05 Q1531.06 1651.05 1527.94 1650.47 Q1524.85 1649.93 1521.41 1648.82 L1521.41 1642.77 Q1524.66 1644.46 1527.81 1645.32 Q1530.96 1646.15 1534.05 1646.15 Q1538.19 1646.15 1540.42 1644.74 Q1542.64 1643.31 1542.64 1640.73 Q1542.64 1638.35 1541.02 1637.07 Q1539.43 1635.8 1533.99 1634.62 L1531.95 1634.15 Q1526.51 1633 1524.09 1630.64 Q1521.67 1628.26 1521.67 1624.12 Q1521.67 1619.09 1525.23 1616.35 Q1528.8 1613.62 1535.35 1613.62 Q1538.6 1613.62 1541.47 1614.09 Q1544.33 1614.57 1546.75 1615.53 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip162)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"\n  102.74,1268.94 2352.76,1268.94 \n  \"/>\n<polyline clip-path=\"url(#clip162)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"\n  102.74,1000.39 2352.76,1000.39 \n  \"/>\n<polyline clip-path=\"url(#clip162)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"\n  102.74,731.849 2352.76,731.849 \n  \"/>\n<polyline clip-path=\"url(#clip162)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"\n  102.74,463.304 2352.76,463.304 \n  \"/>\n<polyline clip-path=\"url(#clip162)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"\n  102.74,194.758 2352.76,194.758 \n  \"/>\n<polyline clip-path=\"url(#clip160)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"\n  102.74,1505.26 102.74,62.9921 \n  \"/>\n<polyline clip-path=\"url(#clip160)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"\n  102.74,1268.94 121.638,1268.94 \n  \"/>\n<polyline clip-path=\"url(#clip160)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"\n  102.74,1000.39 121.638,1000.39 \n  \"/>\n<polyline clip-path=\"url(#clip160)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"\n  102.74,731.849 121.638,731.849 \n  \"/>\n<polyline clip-path=\"url(#clip160)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"\n  102.74,463.304 121.638,463.304 \n  \"/>\n<polyline clip-path=\"url(#clip160)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"\n  102.74,194.758 121.638,194.758 \n  \"/>\n<path clip-path=\"url(#clip160)\" d=\"M59.6106 1267.59 Q62.967 1268.3 64.842 1270.57 Q66.7402 1272.84 66.7402 1276.17 Q66.7402 1281.29 63.2217 1284.09 Q59.7032 1286.89 53.2217 1286.89 Q51.0458 1286.89 48.731 1286.45 Q46.4393 1286.03 43.9856 1285.18 L43.9856 1280.66 Q45.9301 1281.8 48.2449 1282.38 Q50.5597 1282.96 53.0828 1282.96 Q57.4809 1282.96 59.7726 1281.22 Q62.0874 1279.48 62.0874 1276.17 Q62.0874 1273.12 59.9346 1271.41 Q57.805 1269.67 53.9856 1269.67 L49.9578 1269.67 L49.9578 1265.83 L54.1708 1265.83 Q57.6198 1265.83 59.4485 1264.46 Q61.2772 1263.07 61.2772 1260.48 Q61.2772 1257.82 59.3791 1256.41 Q57.5041 1254.97 53.9856 1254.97 Q52.0643 1254.97 49.8652 1255.39 Q47.6662 1255.8 45.0273 1256.68 L45.0273 1252.52 Q47.6893 1251.78 50.0041 1251.41 Q52.3421 1251.03 54.4023 1251.03 Q59.7263 1251.03 62.8281 1253.47 Q65.93 1255.87 65.93 1259.99 Q65.93 1262.86 64.2865 1264.85 Q62.643 1266.82 59.6106 1267.59 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M55.2124 998.531 Q52.0643 998.531 50.2125 1000.68 Q48.3838 1002.84 48.3838 1006.59 Q48.3838 1010.31 50.2125 1012.49 Q52.0643 1014.64 55.2124 1014.64 Q58.3606 1014.64 60.1893 1012.49 Q62.0411 1010.31 62.0411 1006.59 Q62.0411 1002.84 60.1893 1000.68 Q58.3606 998.531 55.2124 998.531 M64.4948 983.878 L64.4948 988.138 Q62.7355 987.304 60.93 986.865 Q59.1476 986.425 57.3884 986.425 Q52.7588 986.425 50.3051 989.55 Q47.8745 992.675 47.5273 998.994 Q48.893 996.98 50.9532 995.915 Q53.0134 994.827 55.4902 994.827 Q60.6985 994.827 63.7078 997.999 Q66.7402 1001.15 66.7402 1006.59 Q66.7402 1011.91 63.592 1015.13 Q60.4439 1018.35 55.2124 1018.35 Q49.2171 1018.35 46.0458 1013.76 Q42.8745 1009.16 42.8745 1000.43 Q42.8745 992.235 46.7634 987.374 Q50.6523 982.49 57.2032 982.49 Q58.9624 982.49 60.7448 982.837 Q62.5504 983.184 64.4948 983.878 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M45.1199 748.412 L45.1199 744.152 Q46.8792 744.986 48.6847 745.425 Q50.4902 745.865 52.2263 745.865 Q56.856 745.865 59.2865 742.763 Q61.7402 739.638 62.0874 733.296 Q60.7448 735.287 58.6846 736.351 Q56.6245 737.416 54.1245 737.416 Q48.9393 737.416 45.9069 734.291 Q42.8977 731.143 42.8977 725.703 Q42.8977 720.379 46.0458 717.162 Q49.194 713.944 54.4254 713.944 Q60.4207 713.944 63.5689 718.551 Q66.7402 723.134 66.7402 731.884 Q66.7402 740.055 62.8513 744.939 Q58.9856 749.8 52.4347 749.8 Q50.6754 749.8 48.8699 749.453 Q47.0643 749.106 45.1199 748.412 M54.4254 733.759 Q57.5735 733.759 59.4022 731.606 Q61.2541 729.453 61.2541 725.703 Q61.2541 721.977 59.4022 719.824 Q57.5735 717.648 54.4254 717.648 Q51.2773 717.648 49.4254 719.824 Q47.5967 721.977 47.5967 725.703 Q47.5967 729.453 49.4254 731.606 Q51.2773 733.759 54.4254 733.759 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M17.0413 476.649 L24.6802 476.649 L24.6802 450.283 L16.3701 451.95 L16.3701 447.69 L24.6339 446.024 L29.3098 446.024 L29.3098 476.649 L36.9487 476.649 L36.9487 480.584 L17.0413 480.584 L17.0413 476.649 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M50.4208 476.649 L66.7402 476.649 L66.7402 480.584 L44.7958 480.584 L44.7958 476.649 Q47.4579 473.894 52.0412 469.264 Q56.6476 464.612 57.8282 463.269 Q60.0735 460.746 60.9532 459.01 Q61.8559 457.251 61.8559 455.561 Q61.8559 452.806 59.9115 451.07 Q57.9902 449.334 54.8884 449.334 Q52.6893 449.334 50.2356 450.098 Q47.8051 450.862 45.0273 452.413 L45.0273 447.69 Q47.8514 446.556 50.3051 445.977 Q52.7588 445.399 54.7958 445.399 Q60.1661 445.399 63.3605 448.084 Q66.555 450.769 66.555 455.26 Q66.555 457.389 65.7448 459.311 Q64.9578 461.209 62.8513 463.801 Q62.2726 464.473 59.1708 467.69 Q56.0689 470.885 50.4208 476.649 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M16.4395 208.103 L24.0783 208.103 L24.0783 181.738 L15.7682 183.404 L15.7682 179.145 L24.0321 177.478 L28.708 177.478 L28.708 208.103 L36.3468 208.103 L36.3468 212.038 L16.4395 212.038 L16.4395 208.103 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M45.8375 177.478 L64.1939 177.478 L64.1939 181.414 L50.1199 181.414 L50.1199 189.886 Q51.1384 189.539 52.1569 189.376 Q53.1754 189.191 54.1939 189.191 Q59.9809 189.191 63.3605 192.363 Q66.7402 195.534 66.7402 200.95 Q66.7402 206.529 63.268 209.631 Q59.7958 212.71 53.4763 212.71 Q51.3004 212.71 49.0319 212.339 Q46.7866 211.969 44.3792 211.228 L44.3792 206.529 Q46.4625 207.663 48.6847 208.219 Q50.9069 208.775 53.3837 208.775 Q57.3884 208.775 59.7263 206.668 Q62.0643 204.562 62.0643 200.95 Q62.0643 197.339 59.7263 195.233 Q57.3884 193.126 53.3837 193.126 Q51.5088 193.126 49.6338 193.543 Q47.7819 193.96 45.8375 194.839 L45.8375 177.478 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M-84.013 820.092 L-84.013 814.204 L-54.7626 814.204 L-70.1357 796.73 L-70.1357 789.25 L-53.4576 808.157 L-34.4878 788.455 L-34.4878 796.094 L-51.898 814.204 L-34.4878 814.204 L-34.4878 820.092 L-84.013 820.092 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M-57.1815 775.437 L-39.7713 775.437 L-39.7713 765.124 Q-39.7713 759.936 -41.9038 757.454 Q-44.0682 754.939 -48.4923 754.939 Q-52.9483 754.939 -55.049 757.454 Q-57.1815 759.936 -57.1815 765.124 L-57.1815 775.437 M-76.7243 775.437 L-62.4014 775.437 L-62.4014 765.92 Q-62.4014 761.209 -64.152 758.918 Q-65.9344 756.594 -69.5628 756.594 Q-73.1595 756.594 -74.9419 758.918 Q-76.7243 761.209 -76.7243 765.92 L-76.7243 775.437 M-82.0078 781.866 L-82.0078 765.443 Q-82.0078 758.09 -78.9523 754.112 Q-75.8967 750.133 -70.2631 750.133 Q-65.9026 750.133 -63.3244 752.17 Q-60.7463 754.207 -60.1098 758.154 Q-59.0912 753.411 -55.8447 750.802 Q-52.6301 748.16 -47.7921 748.16 Q-41.4264 748.16 -37.9571 752.488 Q-34.4878 756.817 -34.4878 764.806 L-34.4878 781.866 L-82.0078 781.866 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M289.883 14.0809 L289.883 22.0612 Q285.224 19.8332 281.092 18.7395 Q276.96 17.6457 273.112 17.6457 Q266.428 17.6457 262.782 20.2383 Q259.177 22.8309 259.177 27.611 Q259.177 31.6214 261.567 33.6873 Q263.997 35.7128 270.722 36.9686 L275.664 37.9813 Q284.819 39.7232 289.154 44.1387 Q293.529 48.5136 293.529 55.8863 Q293.529 64.6767 287.614 69.2137 Q281.74 73.7508 270.357 73.7508 Q266.063 73.7508 261.202 72.7785 Q256.382 71.8063 251.197 69.9024 L251.197 61.4765 Q256.179 64.2716 260.959 65.6895 Q265.739 67.1073 270.357 67.1073 Q277.365 67.1073 281.173 64.3527 Q284.981 61.598 284.981 56.4939 Q284.981 52.0379 282.226 49.5264 Q279.512 47.0148 273.274 45.759 L268.291 44.7868 Q259.136 42.9639 255.045 39.075 Q250.953 35.1862 250.953 28.2591 Q250.953 20.2383 256.584 15.6203 Q262.256 11.0023 272.18 11.0023 Q276.434 11.0023 280.849 11.7719 Q285.265 12.5416 289.883 14.0809 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M313.175 65.7705 L313.175 89.8329 L305.681 89.8329 L305.681 27.2059 L313.175 27.2059 L313.175 34.0924 Q315.525 30.0415 319.09 28.0971 Q322.695 26.1121 327.678 26.1121 Q335.941 26.1121 341.086 32.6746 Q346.271 39.2371 346.271 49.9314 Q346.271 60.6258 341.086 67.1883 Q335.941 73.7508 327.678 73.7508 Q322.695 73.7508 319.09 71.8063 Q315.525 69.8214 313.175 65.7705 M338.534 49.9314 Q338.534 41.7081 335.131 37.0496 Q331.769 32.3505 325.855 32.3505 Q319.94 32.3505 316.538 37.0496 Q313.175 41.7081 313.175 49.9314 Q313.175 58.1548 316.538 62.8538 Q319.94 67.5124 325.855 67.5124 Q331.769 67.5124 335.131 62.8538 Q338.534 58.1548 338.534 49.9314 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M379.246 49.7694 Q370.212 49.7694 366.728 51.8354 Q363.245 53.9013 363.245 58.8839 Q363.245 62.8538 365.837 65.2034 Q368.47 67.5124 372.967 67.5124 Q379.165 67.5124 382.891 63.1374 Q386.659 58.7219 386.659 51.4303 L386.659 49.7694 L379.246 49.7694 M394.112 46.6907 L394.112 72.576 L386.659 72.576 L386.659 65.6895 Q384.107 69.8214 380.299 71.8063 Q376.491 73.7508 370.982 73.7508 Q364.014 73.7508 359.882 69.8619 Q355.791 65.9325 355.791 59.3701 Q355.791 51.7138 360.895 47.825 Q366.04 43.9361 376.207 43.9361 L386.659 43.9361 L386.659 43.2069 Q386.659 38.0623 383.256 35.2672 Q379.894 32.4315 373.777 32.4315 Q369.888 32.4315 366.202 33.3632 Q362.515 34.295 359.113 36.1584 L359.113 29.2718 Q363.204 27.692 367.052 26.9223 Q370.901 26.1121 374.547 26.1121 Q384.39 26.1121 389.251 31.2163 Q394.112 36.3204 394.112 46.6907 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M442.116 28.9478 L442.116 35.9153 Q438.956 34.1734 435.756 33.3227 Q432.596 32.4315 429.355 32.4315 Q422.104 32.4315 418.094 37.0496 Q414.083 41.6271 414.083 49.9314 Q414.083 58.2358 418.094 62.8538 Q422.104 67.4314 429.355 67.4314 Q432.596 67.4314 435.756 66.5807 Q438.956 65.6895 442.116 63.9476 L442.116 70.8341 Q438.996 72.2924 435.634 73.0216 Q432.312 73.7508 428.545 73.7508 Q418.296 73.7508 412.261 67.3098 Q406.225 60.8689 406.225 49.9314 Q406.225 38.832 412.301 32.472 Q418.418 26.1121 429.031 26.1121 Q432.475 26.1121 435.756 26.8413 Q439.037 27.5299 442.116 28.9478 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M493.886 48.0275 L493.886 51.6733 L459.616 51.6733 Q460.102 59.3701 464.234 63.421 Q468.406 67.4314 475.819 67.4314 Q480.113 67.4314 484.124 66.3781 Q488.174 65.3249 492.144 63.2184 L492.144 70.267 Q488.134 71.9684 483.921 72.8596 Q479.708 73.7508 475.374 73.7508 Q464.517 73.7508 458.157 67.4314 Q451.838 61.1119 451.838 50.3365 Q451.838 39.1965 457.833 32.6746 Q463.869 26.1121 474.077 26.1121 Q483.232 26.1121 488.539 32.0264 Q493.886 37.9003 493.886 48.0275 M486.433 45.84 Q486.352 39.7232 482.989 36.0774 Q479.668 32.4315 474.158 32.4315 Q467.92 32.4315 464.153 35.9558 Q460.426 39.4801 459.859 45.8805 L486.433 45.84 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M558.782 34.1734 Q557.526 33.4443 556.027 33.1202 Q554.569 32.7556 552.786 32.7556 Q546.467 32.7556 543.064 36.8875 Q539.702 40.9789 539.702 48.6757 L539.702 72.576 L532.208 72.576 L532.208 27.2059 L539.702 27.2059 L539.702 34.2544 Q542.051 30.1225 545.819 28.1376 Q549.586 26.1121 554.974 26.1121 Q555.744 26.1121 556.675 26.2337 Q557.607 26.3147 558.741 26.5172 L558.782 34.1734 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M603.585 48.0275 L603.585 51.6733 L569.314 51.6733 Q569.8 59.3701 573.932 63.421 Q578.105 67.4314 585.518 67.4314 Q589.812 67.4314 593.822 66.3781 Q597.873 65.3249 601.843 63.2184 L601.843 70.267 Q597.832 71.9684 593.619 72.8596 Q589.407 73.7508 585.072 73.7508 Q574.216 73.7508 567.856 67.4314 Q561.536 61.1119 561.536 50.3365 Q561.536 39.1965 567.532 32.6746 Q573.568 26.1121 583.776 26.1121 Q592.931 26.1121 598.238 32.0264 Q603.585 37.9003 603.585 48.0275 M596.131 45.84 Q596.05 39.7232 592.688 36.0774 Q589.366 32.4315 583.857 32.4315 Q577.618 32.4315 573.851 35.9558 Q570.124 39.4801 569.557 45.8805 L596.131 45.84 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M620.274 49.9314 Q620.274 58.1548 623.637 62.8538 Q627.039 67.5124 632.954 67.5124 Q638.868 67.5124 642.271 62.8538 Q645.674 58.1548 645.674 49.9314 Q645.674 41.7081 642.271 37.0496 Q638.868 32.3505 632.954 32.3505 Q627.039 32.3505 623.637 37.0496 Q620.274 41.7081 620.274 49.9314 M645.674 65.7705 Q643.324 69.8214 639.719 71.8063 Q636.154 73.7508 631.131 73.7508 Q622.908 73.7508 617.722 67.1883 Q612.578 60.6258 612.578 49.9314 Q612.578 39.2371 617.722 32.6746 Q622.908 26.1121 631.131 26.1121 Q636.154 26.1121 639.719 28.0971 Q643.324 30.0415 645.674 34.0924 L645.674 27.2059 L653.127 27.2059 L653.127 89.8329 L645.674 89.8329 L645.674 65.7705 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M667.711 54.671 L667.711 27.2059 L675.164 27.2059 L675.164 54.3874 Q675.164 60.8284 677.676 64.0691 Q680.187 67.2693 685.21 67.2693 Q691.246 67.2693 694.73 63.421 Q698.254 59.5726 698.254 52.9291 L698.254 27.2059 L705.708 27.2059 L705.708 72.576 L698.254 72.576 L698.254 65.6084 Q695.54 69.7404 691.935 71.7658 Q688.37 73.7508 683.631 73.7508 Q675.812 73.7508 671.761 68.8897 Q667.711 64.0286 667.711 54.671 M686.466 26.1121 L686.466 26.1121 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M721.061 27.2059 L728.515 27.2059 L728.515 72.576 L721.061 72.576 L721.061 27.2059 M721.061 9.54393 L728.515 9.54393 L728.515 18.9825 L721.061 18.9825 L721.061 9.54393 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M770.401 34.1734 Q769.145 33.4443 767.646 33.1202 Q766.188 32.7556 764.406 32.7556 Q758.086 32.7556 754.683 36.8875 Q751.321 40.9789 751.321 48.6757 L751.321 72.576 L743.827 72.576 L743.827 27.2059 L751.321 27.2059 L751.321 34.2544 Q753.671 30.1225 757.438 28.1376 Q761.205 26.1121 766.593 26.1121 Q767.363 26.1121 768.294 26.2337 Q769.226 26.3147 770.36 26.5172 L770.401 34.1734 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M815.204 48.0275 L815.204 51.6733 L780.933 51.6733 Q781.419 59.3701 785.551 63.421 Q789.724 67.4314 797.137 67.4314 Q801.431 67.4314 805.441 66.3781 Q809.492 65.3249 813.462 63.2184 L813.462 70.267 Q809.452 71.9684 805.239 72.8596 Q801.026 73.7508 796.691 73.7508 Q785.835 73.7508 779.475 67.4314 Q773.156 61.1119 773.156 50.3365 Q773.156 39.1965 779.151 32.6746 Q785.187 26.1121 795.395 26.1121 Q804.55 26.1121 809.857 32.0264 Q815.204 37.9003 815.204 48.0275 M807.75 45.84 Q807.669 39.7232 804.307 36.0774 Q800.985 32.4315 795.476 32.4315 Q789.238 32.4315 785.47 35.9558 Q781.743 39.4801 781.176 45.8805 L807.75 45.84 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M857.293 34.0924 L857.293 9.54393 L864.747 9.54393 L864.747 72.576 L857.293 72.576 L857.293 65.7705 Q854.943 69.8214 851.338 71.8063 Q847.773 73.7508 842.75 73.7508 Q834.527 73.7508 829.342 67.1883 Q824.197 60.6258 824.197 49.9314 Q824.197 39.2371 829.342 32.6746 Q834.527 26.1121 842.75 26.1121 Q847.773 26.1121 851.338 28.0971 Q854.943 30.0415 857.293 34.0924 M831.894 49.9314 Q831.894 58.1548 835.256 62.8538 Q838.659 67.5124 844.573 67.5124 Q850.487 67.5124 853.89 62.8538 Q857.293 58.1548 857.293 49.9314 Q857.293 41.7081 853.89 37.0496 Q850.487 32.3505 844.573 32.3505 Q838.659 32.3505 835.256 37.0496 Q831.894 41.7081 831.894 49.9314 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M913.843 14.324 L913.843 27.2059 L929.196 27.2059 L929.196 32.9987 L913.843 32.9987 L913.843 57.6282 Q913.843 63.1779 915.342 64.7578 Q916.882 66.3376 921.54 66.3376 L929.196 66.3376 L929.196 72.576 L921.54 72.576 Q912.912 72.576 909.631 69.3758 Q906.349 66.1351 906.349 57.6282 L906.349 32.9987 L900.881 32.9987 L900.881 27.2059 L906.349 27.2059 L906.349 14.324 L913.843 14.324 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M956.581 32.4315 Q950.585 32.4315 947.101 37.1306 Q943.618 41.7891 943.618 49.9314 Q943.618 58.0738 947.061 62.7728 Q950.545 67.4314 956.581 67.4314 Q962.535 67.4314 966.019 62.7323 Q969.503 58.0333 969.503 49.9314 Q969.503 41.8701 966.019 37.1711 Q962.535 32.4315 956.581 32.4315 M956.581 26.1121 Q966.303 26.1121 971.852 32.4315 Q977.402 38.7509 977.402 49.9314 Q977.402 61.0714 971.852 67.4314 Q966.303 73.7508 956.581 73.7508 Q946.818 73.7508 941.268 67.4314 Q935.759 61.0714 935.759 49.9314 Q935.759 38.7509 941.268 32.4315 Q946.818 26.1121 956.581 26.1121 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M1042.42 34.1734 Q1041.16 33.4443 1039.66 33.1202 Q1038.21 32.7556 1036.42 32.7556 Q1030.1 32.7556 1026.7 36.8875 Q1023.34 40.9789 1023.34 48.6757 L1023.34 72.576 L1015.85 72.576 L1015.85 27.2059 L1023.34 27.2059 L1023.34 34.2544 Q1025.69 30.1225 1029.46 28.1376 Q1033.22 26.1121 1038.61 26.1121 Q1039.38 26.1121 1040.31 26.2337 Q1041.24 26.3147 1042.38 26.5172 L1042.42 34.1734 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M1087.22 48.0275 L1087.22 51.6733 L1052.95 51.6733 Q1053.44 59.3701 1057.57 63.421 Q1061.74 67.4314 1069.16 67.4314 Q1073.45 67.4314 1077.46 66.3781 Q1081.51 65.3249 1085.48 63.2184 L1085.48 70.267 Q1081.47 71.9684 1077.26 72.8596 Q1073.04 73.7508 1068.71 73.7508 Q1057.85 73.7508 1051.49 67.4314 Q1045.17 61.1119 1045.17 50.3365 Q1045.17 39.1965 1051.17 32.6746 Q1057.2 26.1121 1067.41 26.1121 Q1076.57 26.1121 1081.87 32.0264 Q1087.22 37.9003 1087.22 48.0275 M1079.77 45.84 Q1079.69 39.7232 1076.33 36.0774 Q1073 32.4315 1067.49 32.4315 Q1061.26 32.4315 1057.49 35.9558 Q1053.76 39.4801 1053.19 45.8805 L1079.77 45.84 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M1106.67 65.7705 L1106.67 89.8329 L1099.17 89.8329 L1099.17 27.2059 L1106.67 27.2059 L1106.67 34.0924 Q1109.02 30.0415 1112.58 28.0971 Q1116.19 26.1121 1121.17 26.1121 Q1129.43 26.1121 1134.58 32.6746 Q1139.76 39.2371 1139.76 49.9314 Q1139.76 60.6258 1134.58 67.1883 Q1129.43 73.7508 1121.17 73.7508 Q1116.19 73.7508 1112.58 71.8063 Q1109.02 69.8214 1106.67 65.7705 M1132.03 49.9314 Q1132.03 41.7081 1128.62 37.0496 Q1125.26 32.3505 1119.35 32.3505 Q1113.43 32.3505 1110.03 37.0496 Q1106.67 41.7081 1106.67 49.9314 Q1106.67 58.1548 1110.03 62.8538 Q1113.43 67.5124 1119.35 67.5124 Q1125.26 67.5124 1128.62 62.8538 Q1132.03 58.1548 1132.03 49.9314 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M1178.41 34.1734 Q1177.15 33.4443 1175.65 33.1202 Q1174.2 32.7556 1172.41 32.7556 Q1166.09 32.7556 1162.69 36.8875 Q1159.33 40.9789 1159.33 48.6757 L1159.33 72.576 L1151.83 72.576 L1151.83 27.2059 L1159.33 27.2059 L1159.33 34.2544 Q1161.68 30.1225 1165.45 28.1376 Q1169.21 26.1121 1174.6 26.1121 Q1175.37 26.1121 1176.3 26.2337 Q1177.23 26.3147 1178.37 26.5172 L1178.41 34.1734 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M1223.21 48.0275 L1223.21 51.6733 L1188.94 51.6733 Q1189.43 59.3701 1193.56 63.421 Q1197.73 67.4314 1205.14 67.4314 Q1209.44 67.4314 1213.45 66.3781 Q1217.5 65.3249 1221.47 63.2184 L1221.47 70.267 Q1217.46 71.9684 1213.25 72.8596 Q1209.03 73.7508 1204.7 73.7508 Q1193.84 73.7508 1187.48 67.4314 Q1181.16 61.1119 1181.16 50.3365 Q1181.16 39.1965 1187.16 32.6746 Q1193.19 26.1121 1203.4 26.1121 Q1212.56 26.1121 1217.86 32.0264 Q1223.21 37.9003 1223.21 48.0275 M1215.76 45.84 Q1215.68 39.7232 1212.31 36.0774 Q1208.99 32.4315 1203.48 32.4315 Q1197.24 32.4315 1193.48 35.9558 Q1189.75 39.4801 1189.18 45.8805 L1215.76 45.84 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M1264.37 28.5427 L1264.37 35.5912 Q1261.21 33.9709 1257.81 33.1607 Q1254.4 32.3505 1250.76 32.3505 Q1245.21 32.3505 1242.41 34.0519 Q1239.66 35.7533 1239.66 39.156 Q1239.66 41.7486 1241.64 43.2475 Q1243.63 44.7058 1249.62 46.0426 L1252.17 46.6097 Q1260.11 48.3111 1263.44 51.4303 Q1266.8 54.509 1266.8 60.0587 Q1266.8 66.3781 1261.78 70.0644 Q1256.79 73.7508 1248.04 73.7508 Q1244.4 73.7508 1240.43 73.0216 Q1236.5 72.3329 1232.12 70.9151 L1232.12 63.2184 Q1236.25 65.3654 1240.27 66.4591 Q1244.28 67.5124 1248.21 67.5124 Q1253.47 67.5124 1256.31 65.73 Q1259.14 63.9071 1259.14 60.6258 Q1259.14 57.5877 1257.08 55.9673 Q1255.05 54.3469 1248.12 52.8481 L1245.53 52.2405 Q1238.6 50.7821 1235.53 47.7845 Q1232.45 44.7463 1232.45 39.4801 Q1232.45 33.0797 1236.98 29.5959 Q1241.52 26.1121 1249.87 26.1121 Q1254 26.1121 1257.64 26.7198 Q1261.29 27.3274 1264.37 28.5427 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M1317.48 48.0275 L1317.48 51.6733 L1283.2 51.6733 Q1283.69 59.3701 1287.82 63.421 Q1292 67.4314 1299.41 67.4314 Q1303.7 67.4314 1307.71 66.3781 Q1311.76 65.3249 1315.73 63.2184 L1315.73 70.267 Q1311.72 71.9684 1307.51 72.8596 Q1303.3 73.7508 1298.96 73.7508 Q1288.11 73.7508 1281.75 67.4314 Q1275.43 61.1119 1275.43 50.3365 Q1275.43 39.1965 1281.42 32.6746 Q1287.46 26.1121 1297.67 26.1121 Q1306.82 26.1121 1312.13 32.0264 Q1317.48 37.9003 1317.48 48.0275 M1310.02 45.84 Q1309.94 39.7232 1306.58 36.0774 Q1303.26 32.4315 1297.75 32.4315 Q1291.51 32.4315 1287.74 35.9558 Q1284.02 39.4801 1283.45 45.8805 L1310.02 45.84 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M1367.42 45.1919 L1367.42 72.576 L1359.97 72.576 L1359.97 45.4349 Q1359.97 38.994 1357.46 35.7938 Q1354.95 32.5936 1349.92 32.5936 Q1343.89 32.5936 1340.4 36.4419 Q1336.92 40.2903 1336.92 46.9338 L1336.92 72.576 L1329.43 72.576 L1329.43 27.2059 L1336.92 27.2059 L1336.92 34.2544 Q1339.59 30.163 1343.2 28.1376 Q1346.84 26.1121 1351.58 26.1121 Q1359.4 26.1121 1363.41 30.9732 Q1367.42 35.7938 1367.42 45.1919 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M1389.66 14.324 L1389.66 27.2059 L1405.02 27.2059 L1405.02 32.9987 L1389.66 32.9987 L1389.66 57.6282 Q1389.66 63.1779 1391.16 64.7578 Q1392.7 66.3376 1397.36 66.3376 L1405.02 66.3376 L1405.02 72.576 L1397.36 72.576 Q1388.73 72.576 1385.45 69.3758 Q1382.17 66.1351 1382.17 57.6282 L1382.17 32.9987 L1376.7 32.9987 L1376.7 27.2059 L1382.17 27.2059 L1382.17 14.324 L1389.66 14.324 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M1461.81 49.7694 Q1452.78 49.7694 1449.29 51.8354 Q1445.81 53.9013 1445.81 58.8839 Q1445.81 62.8538 1448.4 65.2034 Q1451.03 67.5124 1455.53 67.5124 Q1461.73 67.5124 1465.46 63.1374 Q1469.22 58.7219 1469.22 51.4303 L1469.22 49.7694 L1461.81 49.7694 M1476.68 46.6907 L1476.68 72.576 L1469.22 72.576 L1469.22 65.6895 Q1466.67 69.8214 1462.86 71.8063 Q1459.05 73.7508 1453.55 73.7508 Q1446.58 73.7508 1442.45 69.8619 Q1438.35 65.9325 1438.35 59.3701 Q1438.35 51.7138 1443.46 47.825 Q1448.6 43.9361 1458.77 43.9361 L1469.22 43.9361 L1469.22 43.2069 Q1469.22 38.0623 1465.82 35.2672 Q1462.46 32.4315 1456.34 32.4315 Q1452.45 32.4315 1448.77 33.3632 Q1445.08 34.295 1441.68 36.1584 L1441.68 29.2718 Q1445.77 27.692 1449.62 26.9223 Q1453.46 26.1121 1457.11 26.1121 Q1466.95 26.1121 1471.82 31.2163 Q1476.68 36.3204 1476.68 46.6907 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M1492.03 9.54393 L1499.48 9.54393 L1499.48 72.576 L1492.03 72.576 L1492.03 9.54393 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M1515.08 9.54393 L1522.53 9.54393 L1522.53 72.576 L1515.08 72.576 L1515.08 9.54393 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M1593.42 28.5427 L1593.42 35.5912 Q1590.26 33.9709 1586.86 33.1607 Q1583.46 32.3505 1579.81 32.3505 Q1574.26 32.3505 1571.47 34.0519 Q1568.71 35.7533 1568.71 39.156 Q1568.71 41.7486 1570.7 43.2475 Q1572.68 44.7058 1578.68 46.0426 L1581.23 46.6097 Q1589.17 48.3111 1592.49 51.4303 Q1595.85 54.509 1595.85 60.0587 Q1595.85 66.3781 1590.83 70.0644 Q1585.85 73.7508 1577.1 73.7508 Q1573.45 73.7508 1569.48 73.0216 Q1565.55 72.3329 1561.18 70.9151 L1561.18 63.2184 Q1565.31 65.3654 1569.32 66.4591 Q1573.33 67.5124 1577.26 67.5124 Q1582.53 67.5124 1585.36 65.73 Q1588.2 63.9071 1588.2 60.6258 Q1588.2 57.5877 1586.13 55.9673 Q1584.11 54.3469 1577.18 52.8481 L1574.59 52.2405 Q1567.66 50.7821 1564.58 47.7845 Q1561.5 44.7463 1561.5 39.4801 Q1561.5 33.0797 1566.04 29.5959 Q1570.58 26.1121 1578.92 26.1121 Q1583.05 26.1121 1586.7 26.7198 Q1590.34 27.3274 1593.42 28.5427 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M1606.95 54.671 L1606.95 27.2059 L1614.41 27.2059 L1614.41 54.3874 Q1614.41 60.8284 1616.92 64.0691 Q1619.43 67.2693 1624.45 67.2693 Q1630.49 67.2693 1633.97 63.421 Q1637.5 59.5726 1637.5 52.9291 L1637.5 27.2059 L1644.95 27.2059 L1644.95 72.576 L1637.5 72.576 L1637.5 65.6084 Q1634.78 69.7404 1631.18 71.7658 Q1627.61 73.7508 1622.87 73.7508 Q1615.05 73.7508 1611 68.8897 Q1606.95 64.0286 1606.95 54.671 M1625.71 26.1121 L1625.71 26.1121 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M1683.27 9.54393 L1683.27 15.7418 L1676.14 15.7418 Q1672.13 15.7418 1670.55 17.3622 Q1669.01 18.9825 1669.01 23.1955 L1669.01 27.2059 L1681.29 27.2059 L1681.29 32.9987 L1669.01 32.9987 L1669.01 72.576 L1661.52 72.576 L1661.52 32.9987 L1654.39 32.9987 L1654.39 27.2059 L1661.52 27.2059 L1661.52 24.0462 Q1661.52 16.471 1665.04 13.0277 Q1668.57 9.54393 1676.22 9.54393 L1683.27 9.54393 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M1712.48 9.54393 L1712.48 15.7418 L1705.35 15.7418 Q1701.34 15.7418 1699.76 17.3622 Q1698.22 18.9825 1698.22 23.1955 L1698.22 27.2059 L1710.49 27.2059 L1710.49 32.9987 L1698.22 32.9987 L1698.22 72.576 L1690.73 72.576 L1690.73 32.9987 L1683.6 32.9987 L1683.6 27.2059 L1690.73 27.2059 L1690.73 24.0462 Q1690.73 16.471 1694.25 13.0277 Q1697.77 9.54393 1705.43 9.54393 L1712.48 9.54393 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M1718.72 27.2059 L1726.17 27.2059 L1726.17 72.576 L1718.72 72.576 L1718.72 27.2059 M1718.72 9.54393 L1726.17 9.54393 L1726.17 18.9825 L1718.72 18.9825 L1718.72 9.54393 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M1779.48 27.2059 L1763.08 49.2833 L1780.33 72.576 L1771.54 72.576 L1758.34 54.752 L1745.13 72.576 L1736.34 72.576 L1753.96 48.8377 L1737.84 27.2059 L1746.63 27.2059 L1758.66 43.369 L1770.69 27.2059 L1779.48 27.2059 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M1827.12 48.0275 L1827.12 51.6733 L1792.85 51.6733 Q1793.34 59.3701 1797.47 63.421 Q1801.64 67.4314 1809.05 67.4314 Q1813.35 67.4314 1817.36 66.3781 Q1821.41 65.3249 1825.38 63.2184 L1825.38 70.267 Q1821.37 71.9684 1817.15 72.8596 Q1812.94 73.7508 1808.61 73.7508 Q1797.75 73.7508 1791.39 67.4314 Q1785.07 61.1119 1785.07 50.3365 Q1785.07 39.1965 1791.07 32.6746 Q1797.1 26.1121 1807.31 26.1121 Q1816.47 26.1121 1821.77 32.0264 Q1827.12 37.9003 1827.12 48.0275 M1819.67 45.84 Q1819.59 39.7232 1816.22 36.0774 Q1812.9 32.4315 1807.39 32.4315 Q1801.15 32.4315 1797.39 35.9558 Q1793.66 39.4801 1793.09 45.8805 L1819.67 45.84 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M1868.28 28.5427 L1868.28 35.5912 Q1865.12 33.9709 1861.71 33.1607 Q1858.31 32.3505 1854.67 32.3505 Q1849.12 32.3505 1846.32 34.0519 Q1843.57 35.7533 1843.57 39.156 Q1843.57 41.7486 1845.55 43.2475 Q1847.54 44.7058 1853.53 46.0426 L1856.08 46.6097 Q1864.02 48.3111 1867.35 51.4303 Q1870.71 54.509 1870.71 60.0587 Q1870.71 66.3781 1865.68 70.0644 Q1860.7 73.7508 1851.95 73.7508 Q1848.31 73.7508 1844.34 73.0216 Q1840.41 72.3329 1836.03 70.9151 L1836.03 63.2184 Q1840.16 65.3654 1844.17 66.4591 Q1848.18 67.5124 1852.11 67.5124 Q1857.38 67.5124 1860.22 65.73 Q1863.05 63.9071 1863.05 60.6258 Q1863.05 57.5877 1860.99 55.9673 Q1858.96 54.3469 1852.03 52.8481 L1849.44 52.2405 Q1842.51 50.7821 1839.43 47.7845 Q1836.36 44.7463 1836.36 39.4801 Q1836.36 33.0797 1840.89 29.5959 Q1845.43 26.1121 1853.77 26.1121 Q1857.91 26.1121 1861.55 26.7198 Q1865.2 27.3274 1868.28 28.5427 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M1926.53 32.4315 Q1920.53 32.4315 1917.05 37.1306 Q1913.57 41.7891 1913.57 49.9314 Q1913.57 58.0738 1917.01 62.7728 Q1920.49 67.4314 1926.53 67.4314 Q1932.48 67.4314 1935.97 62.7323 Q1939.45 58.0333 1939.45 49.9314 Q1939.45 41.8701 1935.97 37.1711 Q1932.48 32.4315 1926.53 32.4315 M1926.53 26.1121 Q1936.25 26.1121 1941.8 32.4315 Q1947.35 38.7509 1947.35 49.9314 Q1947.35 61.0714 1941.8 67.4314 Q1936.25 73.7508 1926.53 73.7508 Q1916.77 73.7508 1911.22 67.4314 Q1905.71 61.0714 1905.71 49.9314 Q1905.71 38.7509 1911.22 32.4315 Q1916.77 26.1121 1926.53 26.1121 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M1982.67 9.54393 L1982.67 15.7418 L1975.54 15.7418 Q1971.53 15.7418 1969.95 17.3622 Q1968.42 18.9825 1968.42 23.1955 L1968.42 27.2059 L1980.69 27.2059 L1980.69 32.9987 L1968.42 32.9987 L1968.42 72.576 L1960.92 72.576 L1960.92 32.9987 L1953.79 32.9987 L1953.79 27.2059 L1960.92 27.2059 L1960.92 24.0462 Q1960.92 16.471 1964.45 13.0277 Q1967.97 9.54393 1975.63 9.54393 L1982.67 9.54393 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M2035.9 49.7694 Q2026.87 49.7694 2023.39 51.8354 Q2019.9 53.9013 2019.9 58.8839 Q2019.9 62.8538 2022.49 65.2034 Q2025.13 67.5124 2029.62 67.5124 Q2035.82 67.5124 2039.55 63.1374 Q2043.32 58.7219 2043.32 51.4303 L2043.32 49.7694 L2035.9 49.7694 M2050.77 46.6907 L2050.77 72.576 L2043.32 72.576 L2043.32 65.6895 Q2040.76 69.8214 2036.96 71.8063 Q2033.15 73.7508 2027.64 73.7508 Q2020.67 73.7508 2016.54 69.8619 Q2012.45 65.9325 2012.45 59.3701 Q2012.45 51.7138 2017.55 47.825 Q2022.7 43.9361 2032.87 43.9361 L2043.32 43.9361 L2043.32 43.2069 Q2043.32 38.0623 2039.91 35.2672 Q2036.55 32.4315 2030.43 32.4315 Q2026.55 32.4315 2022.86 33.3632 Q2019.17 34.295 2015.77 36.1584 L2015.77 29.2718 Q2019.86 27.692 2023.71 26.9223 Q2027.56 26.1121 2031.2 26.1121 Q2041.05 26.1121 2045.91 31.2163 Q2050.77 36.3204 2050.77 46.6907 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M2092.49 9.54393 L2099.95 9.54393 L2099.95 72.576 L2092.49 72.576 L2092.49 9.54393 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M2115.54 27.2059 L2123 27.2059 L2123 72.576 L2115.54 72.576 L2115.54 27.2059 M2115.54 9.54393 L2123 9.54393 L2123 18.9825 L2115.54 18.9825 L2115.54 9.54393 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M2167.52 28.5427 L2167.52 35.5912 Q2164.36 33.9709 2160.95 33.1607 Q2157.55 32.3505 2153.91 32.3505 Q2148.36 32.3505 2145.56 34.0519 Q2142.81 35.7533 2142.81 39.156 Q2142.81 41.7486 2144.79 43.2475 Q2146.78 44.7058 2152.77 46.0426 L2155.32 46.6097 Q2163.26 48.3111 2166.59 51.4303 Q2169.95 54.509 2169.95 60.0587 Q2169.95 66.3781 2164.92 70.0644 Q2159.94 73.7508 2151.19 73.7508 Q2147.55 73.7508 2143.58 73.0216 Q2139.65 72.3329 2135.27 70.9151 L2135.27 63.2184 Q2139.4 65.3654 2143.41 66.4591 Q2147.42 67.5124 2151.35 67.5124 Q2156.62 67.5124 2159.46 65.73 Q2162.29 63.9071 2162.29 60.6258 Q2162.29 57.5877 2160.23 55.9673 Q2158.2 54.3469 2151.27 52.8481 L2148.68 52.2405 Q2141.75 50.7821 2138.67 47.7845 Q2135.6 44.7463 2135.6 39.4801 Q2135.6 33.0797 2140.13 29.5959 Q2144.67 26.1121 2153.02 26.1121 Q2157.15 26.1121 2160.79 26.7198 Q2164.44 27.3274 2167.52 28.5427 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip160)\" d=\"M2189.19 14.324 L2189.19 27.2059 L2204.54 27.2059 L2204.54 32.9987 L2189.19 32.9987 L2189.19 57.6282 Q2189.19 63.1779 2190.69 64.7578 Q2192.23 66.3376 2196.89 66.3376 L2204.54 66.3376 L2204.54 72.576 L2196.89 72.576 Q2188.26 72.576 2184.98 69.3758 Q2181.7 66.1351 2181.7 57.6282 L2181.7 32.9987 L2176.23 32.9987 L2176.23 27.2059 L2181.7 27.2059 L2181.7 14.324 L2189.19 14.324 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><circle clip-path=\"url(#clip162)\" cx=\"166.42\" cy=\"1464.44\" r=\"14.4\" fill=\"#009af9\" fill-rule=\"evenodd\" fill-opacity=\"1\" stroke=\"#000000\" stroke-opacity=\"1\" stroke-width=\"3.2\"/>\n<circle clip-path=\"url(#clip162)\" cx=\"278.139\" cy=\"1392.83\" r=\"14.4\" fill=\"#009af9\" fill-rule=\"evenodd\" fill-opacity=\"1\" stroke=\"#000000\" stroke-opacity=\"1\" stroke-width=\"3.2\"/>\n<circle clip-path=\"url(#clip162)\" cx=\"389.857\" cy=\"1321.22\" r=\"14.4\" fill=\"#009af9\" fill-rule=\"evenodd\" fill-opacity=\"1\" stroke=\"#000000\" stroke-opacity=\"1\" stroke-width=\"3.2\"/>\n<circle clip-path=\"url(#clip162)\" cx=\"501.576\" cy=\"1249.6\" r=\"14.4\" fill=\"#009af9\" fill-rule=\"evenodd\" fill-opacity=\"1\" stroke=\"#000000\" stroke-opacity=\"1\" stroke-width=\"3.2\"/>\n<circle clip-path=\"url(#clip162)\" cx=\"613.295\" cy=\"1177.99\" r=\"14.4\" fill=\"#009af9\" fill-rule=\"evenodd\" fill-opacity=\"1\" stroke=\"#000000\" stroke-opacity=\"1\" stroke-width=\"3.2\"/>\n<circle clip-path=\"url(#clip162)\" cx=\"725.014\" cy=\"1106.38\" r=\"14.4\" fill=\"#009af9\" fill-rule=\"evenodd\" fill-opacity=\"1\" stroke=\"#000000\" stroke-opacity=\"1\" stroke-width=\"3.2\"/>\n<circle clip-path=\"url(#clip162)\" cx=\"836.732\" cy=\"1034.77\" r=\"14.4\" fill=\"#009af9\" fill-rule=\"evenodd\" fill-opacity=\"1\" stroke=\"#000000\" stroke-opacity=\"1\" stroke-width=\"3.2\"/>\n<circle clip-path=\"url(#clip162)\" cx=\"948.451\" cy=\"963.156\" r=\"14.4\" fill=\"#009af9\" fill-rule=\"evenodd\" fill-opacity=\"1\" stroke=\"#000000\" stroke-opacity=\"1\" stroke-width=\"3.2\"/>\n<circle clip-path=\"url(#clip162)\" cx=\"1060.17\" cy=\"891.544\" r=\"14.4\" fill=\"#009af9\" fill-rule=\"evenodd\" fill-opacity=\"1\" stroke=\"#000000\" stroke-opacity=\"1\" stroke-width=\"3.2\"/>\n<circle clip-path=\"url(#clip162)\" cx=\"1171.89\" cy=\"819.932\" r=\"14.4\" fill=\"#009af9\" fill-rule=\"evenodd\" fill-opacity=\"1\" stroke=\"#000000\" stroke-opacity=\"1\" stroke-width=\"3.2\"/>\n<circle clip-path=\"url(#clip162)\" cx=\"1283.61\" cy=\"748.32\" r=\"14.4\" fill=\"#009af9\" fill-rule=\"evenodd\" fill-opacity=\"1\" stroke=\"#000000\" stroke-opacity=\"1\" stroke-width=\"3.2\"/>\n<circle clip-path=\"url(#clip162)\" cx=\"1395.33\" cy=\"676.708\" r=\"14.4\" fill=\"#009af9\" fill-rule=\"evenodd\" fill-opacity=\"1\" stroke=\"#000000\" stroke-opacity=\"1\" stroke-width=\"3.2\"/>\n<circle clip-path=\"url(#clip162)\" cx=\"1507.04\" cy=\"605.096\" r=\"14.4\" fill=\"#009af9\" fill-rule=\"evenodd\" fill-opacity=\"1\" stroke=\"#000000\" stroke-opacity=\"1\" stroke-width=\"3.2\"/>\n<circle clip-path=\"url(#clip162)\" cx=\"1618.76\" cy=\"533.484\" r=\"14.4\" fill=\"#009af9\" fill-rule=\"evenodd\" fill-opacity=\"1\" stroke=\"#000000\" stroke-opacity=\"1\" stroke-width=\"3.2\"/>\n<circle clip-path=\"url(#clip162)\" cx=\"1730.48\" cy=\"461.872\" r=\"14.4\" fill=\"#009af9\" fill-rule=\"evenodd\" fill-opacity=\"1\" stroke=\"#000000\" stroke-opacity=\"1\" stroke-width=\"3.2\"/>\n<circle clip-path=\"url(#clip162)\" cx=\"1842.2\" cy=\"390.259\" r=\"14.4\" fill=\"#009af9\" fill-rule=\"evenodd\" fill-opacity=\"1\" stroke=\"#000000\" stroke-opacity=\"1\" stroke-width=\"3.2\"/>\n<circle clip-path=\"url(#clip162)\" cx=\"1953.92\" cy=\"318.647\" r=\"14.4\" fill=\"#009af9\" fill-rule=\"evenodd\" fill-opacity=\"1\" stroke=\"#000000\" stroke-opacity=\"1\" stroke-width=\"3.2\"/>\n<circle clip-path=\"url(#clip162)\" cx=\"2065.64\" cy=\"247.035\" r=\"14.4\" fill=\"#009af9\" fill-rule=\"evenodd\" fill-opacity=\"1\" stroke=\"#000000\" stroke-opacity=\"1\" stroke-width=\"3.2\"/>\n<circle clip-path=\"url(#clip162)\" cx=\"2177.36\" cy=\"175.423\" r=\"14.4\" fill=\"#009af9\" fill-rule=\"evenodd\" fill-opacity=\"1\" stroke=\"#000000\" stroke-opacity=\"1\" stroke-width=\"3.2\"/>\n<circle clip-path=\"url(#clip162)\" cx=\"2289.08\" cy=\"103.811\" r=\"14.4\" fill=\"#009af9\" fill-rule=\"evenodd\" fill-opacity=\"1\" stroke=\"#000000\" stroke-opacity=\"1\" stroke-width=\"3.2\"/>\n</svg>\n","category":"page"},{"location":"generated/suffixes/","page":"Generating Suffixes","title":"Generating Suffixes","text":"Similarly, the amount of memory allocated in the process of generating the suffixes is approximately linear in the length of the input:","category":"page"},{"location":"generated/suffixes/","page":"Generating Suffixes","title":"Generating Suffixes","text":"plot(input_lengths, allocated/1000,\n     seriestype = :scatter,\n     xlabel = \"# of input elements\",\n     ylabel = \"memory allocated (kB)\",\n     title = \"Total memory allocated during construction of suffixes\",\n     legend = false)","category":"page"},{"location":"generated/suffixes/","page":"Generating Suffixes","title":"Generating Suffixes","text":"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"600\" height=\"400\" viewBox=\"0 0 2400 1600\">\n<defs>\n  <clipPath id=\"clip190\">\n    <rect x=\"0\" y=\"0\" width=\"2400\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip190)\" d=\"\nM0 1600 L2400 1600 L2400 0 L0 0  Z\n  \" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip191\">\n    <rect x=\"480\" y=\"0\" width=\"1681\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip190)\" d=\"\nM102.74 1505.26 L2352.76 1505.26 L2352.76 62.9921 L102.74 62.9921  Z\n  \" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip192\">\n    <rect x=\"102\" y=\"62\" width=\"2251\" height=\"1443\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip192)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"\n  501.576,1505.26 501.576,62.9921 \n  \"/>\n<polyline clip-path=\"url(#clip192)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"\n  948.451,1505.26 948.451,62.9921 \n  \"/>\n<polyline clip-path=\"url(#clip192)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"\n  1395.33,1505.26 1395.33,62.9921 \n  \"/>\n<polyline clip-path=\"url(#clip192)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"\n  1842.2,1505.26 1842.2,62.9921 \n  \"/>\n<polyline clip-path=\"url(#clip192)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"\n  2289.08,1505.26 2289.08,62.9921 \n  \"/>\n<polyline clip-path=\"url(#clip190)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"\n  102.74,1505.26 2352.76,1505.26 \n  \"/>\n<polyline clip-path=\"url(#clip190)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"\n  501.576,1505.26 501.576,1486.36 \n  \"/>\n<polyline clip-path=\"url(#clip190)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"\n  948.451,1505.26 948.451,1486.36 \n  \"/>\n<polyline clip-path=\"url(#clip190)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"\n  1395.33,1505.26 1395.33,1486.36 \n  \"/>\n<polyline clip-path=\"url(#clip190)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"\n  1842.2,1505.26 1842.2,1486.36 \n  \"/>\n<polyline clip-path=\"url(#clip190)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"\n  2289.08,1505.26 2289.08,1486.36 \n  \"/>\n<path clip-path=\"url(#clip190)\" d=\"M461.183 1563.72 L468.822 1563.72 L468.822 1537.36 L460.512 1539.03 L460.512 1534.77 L468.775 1533.1 L473.451 1533.1 L473.451 1563.72 L481.09 1563.72 L481.09 1567.66 L461.183 1567.66 L461.183 1563.72 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip190)\" d=\"M500.534 1536.18 Q496.923 1536.18 495.095 1539.74 Q493.289 1543.28 493.289 1550.41 Q493.289 1557.52 495.095 1561.09 Q496.923 1564.63 500.534 1564.63 Q504.169 1564.63 505.974 1561.09 Q507.803 1557.52 507.803 1550.41 Q507.803 1543.28 505.974 1539.74 Q504.169 1536.18 500.534 1536.18 M500.534 1532.47 Q506.345 1532.47 509.4 1537.08 Q512.479 1541.66 512.479 1550.41 Q512.479 1559.14 509.4 1563.75 Q506.345 1568.33 500.534 1568.33 Q494.724 1568.33 491.646 1563.75 Q488.59 1559.14 488.59 1550.41 Q488.59 1541.66 491.646 1537.08 Q494.724 1532.47 500.534 1532.47 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip190)\" d=\"M530.696 1536.18 Q527.085 1536.18 525.257 1539.74 Q523.451 1543.28 523.451 1550.41 Q523.451 1557.52 525.257 1561.09 Q527.085 1564.63 530.696 1564.63 Q534.331 1564.63 536.136 1561.09 Q537.965 1557.52 537.965 1550.41 Q537.965 1543.28 536.136 1539.74 Q534.331 1536.18 530.696 1536.18 M530.696 1532.47 Q536.506 1532.47 539.562 1537.08 Q542.641 1541.66 542.641 1550.41 Q542.641 1559.14 539.562 1563.75 Q536.506 1568.33 530.696 1568.33 Q524.886 1568.33 521.807 1563.75 Q518.752 1559.14 518.752 1550.41 Q518.752 1541.66 521.807 1537.08 Q524.886 1532.47 530.696 1532.47 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip190)\" d=\"M912.143 1563.72 L928.463 1563.72 L928.463 1567.66 L906.518 1567.66 L906.518 1563.72 Q909.181 1560.97 913.764 1556.34 Q918.37 1551.69 919.551 1550.35 Q921.796 1547.82 922.676 1546.09 Q923.579 1544.33 923.579 1542.64 Q923.579 1539.88 921.634 1538.15 Q919.713 1536.41 916.611 1536.41 Q914.412 1536.41 911.958 1537.17 Q909.528 1537.94 906.75 1539.49 L906.75 1534.77 Q909.574 1533.63 912.028 1533.05 Q914.481 1532.47 916.518 1532.47 Q921.889 1532.47 925.083 1535.16 Q928.278 1537.85 928.278 1542.34 Q928.278 1544.47 927.467 1546.39 Q926.68 1548.28 924.574 1550.88 Q923.995 1551.55 920.893 1554.77 Q917.792 1557.96 912.143 1563.72 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip190)\" d=\"M948.278 1536.18 Q944.666 1536.18 942.838 1539.74 Q941.032 1543.28 941.032 1550.41 Q941.032 1557.52 942.838 1561.09 Q944.666 1564.63 948.278 1564.63 Q951.912 1564.63 953.717 1561.09 Q955.546 1557.52 955.546 1550.41 Q955.546 1543.28 953.717 1539.74 Q951.912 1536.18 948.278 1536.18 M948.278 1532.47 Q954.088 1532.47 957.143 1537.08 Q960.222 1541.66 960.222 1550.41 Q960.222 1559.14 957.143 1563.75 Q954.088 1568.33 948.278 1568.33 Q942.467 1568.33 939.389 1563.75 Q936.333 1559.14 936.333 1550.41 Q936.333 1541.66 939.389 1537.08 Q942.467 1532.47 948.278 1532.47 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip190)\" d=\"M978.439 1536.18 Q974.828 1536.18 973 1539.74 Q971.194 1543.28 971.194 1550.41 Q971.194 1557.52 973 1561.09 Q974.828 1564.63 978.439 1564.63 Q982.074 1564.63 983.879 1561.09 Q985.708 1557.52 985.708 1550.41 Q985.708 1543.28 983.879 1539.74 Q982.074 1536.18 978.439 1536.18 M978.439 1532.47 Q984.25 1532.47 987.305 1537.08 Q990.384 1541.66 990.384 1550.41 Q990.384 1559.14 987.305 1563.75 Q984.25 1568.33 978.439 1568.33 Q972.629 1568.33 969.551 1563.75 Q966.495 1559.14 966.495 1550.41 Q966.495 1541.66 969.551 1537.08 Q972.629 1532.47 978.439 1532.47 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip190)\" d=\"M1369.09 1549.03 Q1372.44 1549.74 1374.32 1552.01 Q1376.22 1554.28 1376.22 1557.61 Q1376.22 1562.73 1372.7 1565.53 Q1369.18 1568.33 1362.7 1568.33 Q1360.52 1568.33 1358.21 1567.89 Q1355.92 1567.47 1353.46 1566.62 L1353.46 1562.1 Q1355.41 1563.24 1357.72 1563.82 Q1360.04 1564.4 1362.56 1564.4 Q1366.96 1564.4 1369.25 1562.66 Q1371.56 1560.92 1371.56 1557.61 Q1371.56 1554.56 1369.41 1552.85 Q1367.28 1551.11 1363.46 1551.11 L1359.44 1551.11 L1359.44 1547.27 L1363.65 1547.27 Q1367.1 1547.27 1368.93 1545.9 Q1370.75 1544.51 1370.75 1541.92 Q1370.75 1539.26 1368.86 1537.85 Q1366.98 1536.41 1363.46 1536.41 Q1361.54 1536.41 1359.34 1536.83 Q1357.14 1537.24 1354.5 1538.12 L1354.5 1533.96 Q1357.17 1533.22 1359.48 1532.85 Q1361.82 1532.47 1363.88 1532.47 Q1369.2 1532.47 1372.31 1534.91 Q1375.41 1537.31 1375.41 1541.43 Q1375.41 1544.3 1373.76 1546.29 Q1372.12 1548.26 1369.09 1549.03 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip190)\" d=\"M1395.08 1536.18 Q1391.47 1536.18 1389.64 1539.74 Q1387.84 1543.28 1387.84 1550.41 Q1387.84 1557.52 1389.64 1561.09 Q1391.47 1564.63 1395.08 1564.63 Q1398.72 1564.63 1400.52 1561.09 Q1402.35 1557.52 1402.35 1550.41 Q1402.35 1543.28 1400.52 1539.74 Q1398.72 1536.18 1395.08 1536.18 M1395.08 1532.47 Q1400.89 1532.47 1403.95 1537.08 Q1407.03 1541.66 1407.03 1550.41 Q1407.03 1559.14 1403.95 1563.75 Q1400.89 1568.33 1395.08 1568.33 Q1389.27 1568.33 1386.19 1563.75 Q1383.14 1559.14 1383.14 1550.41 Q1383.14 1541.66 1386.19 1537.08 Q1389.27 1532.47 1395.08 1532.47 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip190)\" d=\"M1425.24 1536.18 Q1421.63 1536.18 1419.81 1539.74 Q1418 1543.28 1418 1550.41 Q1418 1557.52 1419.81 1561.09 Q1421.63 1564.63 1425.24 1564.63 Q1428.88 1564.63 1430.68 1561.09 Q1432.51 1557.52 1432.51 1550.41 Q1432.51 1543.28 1430.68 1539.74 Q1428.88 1536.18 1425.24 1536.18 M1425.24 1532.47 Q1431.06 1532.47 1434.11 1537.08 Q1437.19 1541.66 1437.19 1550.41 Q1437.19 1559.14 1434.11 1563.75 Q1431.06 1568.33 1425.24 1568.33 Q1419.43 1568.33 1416.36 1563.75 Q1413.3 1559.14 1413.3 1550.41 Q1413.3 1541.66 1416.36 1537.08 Q1419.43 1532.47 1425.24 1532.47 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip190)\" d=\"M1815.29 1537.17 L1803.49 1555.62 L1815.29 1555.62 L1815.29 1537.17 M1814.06 1533.1 L1819.94 1533.1 L1819.94 1555.62 L1824.87 1555.62 L1824.87 1559.51 L1819.94 1559.51 L1819.94 1567.66 L1815.29 1567.66 L1815.29 1559.51 L1799.69 1559.51 L1799.69 1555 L1814.06 1533.1 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip190)\" d=\"M1842.61 1536.18 Q1839 1536.18 1837.17 1539.74 Q1835.36 1543.28 1835.36 1550.41 Q1835.36 1557.52 1837.17 1561.09 Q1839 1564.63 1842.61 1564.63 Q1846.24 1564.63 1848.05 1561.09 Q1849.87 1557.52 1849.87 1550.41 Q1849.87 1543.28 1848.05 1539.74 Q1846.24 1536.18 1842.61 1536.18 M1842.61 1532.47 Q1848.42 1532.47 1851.47 1537.08 Q1854.55 1541.66 1854.55 1550.41 Q1854.55 1559.14 1851.47 1563.75 Q1848.42 1568.33 1842.61 1568.33 Q1836.8 1568.33 1833.72 1563.75 Q1830.66 1559.14 1830.66 1550.41 Q1830.66 1541.66 1833.72 1537.08 Q1836.8 1532.47 1842.61 1532.47 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip190)\" d=\"M1872.77 1536.18 Q1869.16 1536.18 1867.33 1539.74 Q1865.52 1543.28 1865.52 1550.41 Q1865.52 1557.52 1867.33 1561.09 Q1869.16 1564.63 1872.77 1564.63 Q1876.4 1564.63 1878.21 1561.09 Q1880.04 1557.52 1880.04 1550.41 Q1880.04 1543.28 1878.21 1539.74 Q1876.4 1536.18 1872.77 1536.18 M1872.77 1532.47 Q1878.58 1532.47 1881.63 1537.08 Q1884.71 1541.66 1884.71 1550.41 Q1884.71 1559.14 1881.63 1563.75 Q1878.58 1568.33 1872.77 1568.33 Q1866.96 1568.33 1863.88 1563.75 Q1860.82 1559.14 1860.82 1550.41 Q1860.82 1541.66 1863.88 1537.08 Q1866.96 1532.47 1872.77 1532.47 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip190)\" d=\"M2248.69 1533.1 L2267.05 1533.1 L2267.05 1537.04 L2252.98 1537.04 L2252.98 1545.51 Q2254 1545.16 2255.01 1545 Q2256.03 1544.81 2257.05 1544.81 Q2262.84 1544.81 2266.22 1547.98 Q2269.6 1551.16 2269.6 1556.57 Q2269.6 1562.15 2266.12 1565.25 Q2262.65 1568.33 2256.33 1568.33 Q2254.16 1568.33 2251.89 1567.96 Q2249.64 1567.59 2247.24 1566.85 L2247.24 1562.15 Q2249.32 1563.28 2251.54 1563.84 Q2253.76 1564.4 2256.24 1564.4 Q2260.25 1564.4 2262.58 1562.29 Q2264.92 1560.18 2264.92 1556.57 Q2264.92 1552.96 2262.58 1550.85 Q2260.25 1548.75 2256.24 1548.75 Q2254.37 1548.75 2252.49 1549.16 Q2250.64 1549.58 2248.69 1550.46 L2248.69 1533.1 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip190)\" d=\"M2288.81 1536.18 Q2285.2 1536.18 2283.37 1539.74 Q2281.56 1543.28 2281.56 1550.41 Q2281.56 1557.52 2283.37 1561.09 Q2285.2 1564.63 2288.81 1564.63 Q2292.44 1564.63 2294.25 1561.09 Q2296.08 1557.52 2296.08 1550.41 Q2296.08 1543.28 2294.25 1539.74 Q2292.44 1536.18 2288.81 1536.18 M2288.81 1532.47 Q2294.62 1532.47 2297.68 1537.08 Q2300.75 1541.66 2300.75 1550.41 Q2300.75 1559.14 2297.68 1563.75 Q2294.62 1568.33 2288.81 1568.33 Q2283 1568.33 2279.92 1563.75 Q2276.87 1559.14 2276.87 1550.41 Q2276.87 1541.66 2279.92 1537.08 Q2283 1532.47 2288.81 1532.47 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip190)\" d=\"M2318.97 1536.18 Q2315.36 1536.18 2313.53 1539.74 Q2311.73 1543.28 2311.73 1550.41 Q2311.73 1557.52 2313.53 1561.09 Q2315.36 1564.63 2318.97 1564.63 Q2322.61 1564.63 2324.41 1561.09 Q2326.24 1557.52 2326.24 1550.41 Q2326.24 1543.28 2324.41 1539.74 Q2322.61 1536.18 2318.97 1536.18 M2318.97 1532.47 Q2324.78 1532.47 2327.84 1537.08 Q2330.92 1541.66 2330.92 1550.41 Q2330.92 1559.14 2327.84 1563.75 Q2324.78 1568.33 2318.97 1568.33 Q2313.16 1568.33 2310.08 1563.75 Q2307.03 1559.14 2307.03 1550.41 Q2307.03 1541.66 2310.08 1537.08 Q2313.16 1532.47 2318.97 1532.47 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip190)\" d=\"M935.132 1621.45 L925.87 1621.45 L923.197 1632.08 L932.522 1632.08 L935.132 1621.45 M930.358 1603.34 L927.048 1616.54 L936.342 1616.54 L939.684 1603.34 L944.776 1603.34 L941.498 1616.54 L951.429 1616.54 L951.429 1621.45 L940.257 1621.45 L937.647 1632.08 L947.768 1632.08 L947.768 1636.95 L936.406 1636.95 L933.095 1650.12 L928.003 1650.12 L931.281 1636.95 L921.955 1636.95 L918.677 1650.12 L913.553 1650.12 L916.863 1636.95 L906.837 1636.95 L906.837 1632.08 L918.04 1632.08 L920.714 1621.45 L910.465 1621.45 L910.465 1616.54 L921.955 1616.54 L925.202 1603.34 L930.358 1603.34 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip190)\" d=\"M997.103 1618.58 Q992.392 1618.58 989.655 1622.27 Q986.917 1625.93 986.917 1632.33 Q986.917 1638.73 989.623 1642.42 Q992.36 1646.08 997.103 1646.08 Q1001.78 1646.08 1004.52 1642.39 Q1007.26 1638.7 1007.26 1632.33 Q1007.26 1626 1004.52 1622.31 Q1001.78 1618.58 997.103 1618.58 M997.103 1613.62 Q1004.74 1613.62 1009.1 1618.58 Q1013.46 1623.55 1013.46 1632.33 Q1013.46 1641.08 1009.1 1646.08 Q1004.74 1651.05 997.103 1651.05 Q989.432 1651.05 985.071 1646.08 Q980.743 1641.08 980.743 1632.33 Q980.743 1623.55 985.071 1618.58 Q989.432 1613.62 997.103 1613.62 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip190)\" d=\"M1041.22 1600.6 L1041.22 1605.47 L1035.62 1605.47 Q1032.46 1605.47 1031.22 1606.74 Q1030.01 1608.01 1030.01 1611.32 L1030.01 1614.48 L1039.66 1614.48 L1039.66 1619.03 L1030.01 1619.03 L1030.01 1650.12 L1024.12 1650.12 L1024.12 1619.03 L1018.52 1619.03 L1018.52 1614.48 L1024.12 1614.48 L1024.12 1611.99 Q1024.12 1606.04 1026.89 1603.34 Q1029.66 1600.6 1035.68 1600.6 L1041.22 1600.6 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip190)\" d=\"M1066.84 1614.48 L1072.7 1614.48 L1072.7 1650.12 L1066.84 1650.12 L1066.84 1614.48 M1066.84 1600.6 L1072.7 1600.6 L1072.7 1608.01 L1066.84 1608.01 L1066.84 1600.6 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip190)\" d=\"M1114.58 1628.61 L1114.58 1650.12 L1108.73 1650.12 L1108.73 1628.8 Q1108.73 1623.74 1106.75 1621.22 Q1104.78 1618.71 1100.83 1618.71 Q1096.09 1618.71 1093.35 1621.73 Q1090.61 1624.76 1090.61 1629.98 L1090.61 1650.12 L1084.73 1650.12 L1084.73 1614.48 L1090.61 1614.48 L1090.61 1620.01 Q1092.72 1616.8 1095.55 1615.21 Q1098.41 1613.62 1102.14 1613.62 Q1108.28 1613.62 1111.43 1617.44 Q1114.58 1621.22 1114.58 1628.61 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip190)\" d=\"M1131.93 1644.78 L1131.93 1663.68 L1126.04 1663.68 L1126.04 1614.48 L1131.93 1614.48 L1131.93 1619.89 Q1133.77 1616.7 1136.58 1615.18 Q1139.41 1613.62 1143.32 1613.62 Q1149.82 1613.62 1153.86 1618.77 Q1157.93 1623.93 1157.93 1632.33 Q1157.93 1640.73 1153.86 1645.89 Q1149.82 1651.05 1143.32 1651.05 Q1139.41 1651.05 1136.58 1649.52 Q1133.77 1647.96 1131.93 1644.78 M1151.85 1632.33 Q1151.85 1625.87 1149.18 1622.21 Q1146.54 1618.52 1141.89 1618.52 Q1137.24 1618.52 1134.57 1622.21 Q1131.93 1625.87 1131.93 1632.33 Q1131.93 1638.79 1134.57 1642.48 Q1137.24 1646.15 1141.89 1646.15 Q1146.54 1646.15 1149.18 1642.48 Q1151.85 1638.79 1151.85 1632.33 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip190)\" d=\"M1167.04 1636.06 L1167.04 1614.48 L1172.89 1614.48 L1172.89 1635.83 Q1172.89 1640.89 1174.86 1643.44 Q1176.84 1645.95 1180.79 1645.95 Q1185.53 1645.95 1188.26 1642.93 Q1191.03 1639.91 1191.03 1634.69 L1191.03 1614.48 L1196.89 1614.48 L1196.89 1650.12 L1191.03 1650.12 L1191.03 1644.65 Q1188.9 1647.9 1186.07 1649.49 Q1183.27 1651.05 1179.54 1651.05 Q1173.4 1651.05 1170.22 1647.23 Q1167.04 1643.41 1167.04 1636.06 M1181.77 1613.62 L1181.77 1613.62 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip190)\" d=\"M1214.75 1604.35 L1214.75 1614.48 L1226.81 1614.48 L1226.81 1619.03 L1214.75 1619.03 L1214.75 1638.38 Q1214.75 1642.74 1215.92 1643.98 Q1217.13 1645.22 1220.79 1645.22 L1226.81 1645.22 L1226.81 1650.12 L1220.79 1650.12 Q1214.01 1650.12 1211.44 1647.61 Q1208.86 1645.06 1208.86 1638.38 L1208.86 1619.03 L1204.56 1619.03 L1204.56 1614.48 L1208.86 1614.48 L1208.86 1604.35 L1214.75 1604.35 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip190)\" d=\"M1285.72 1630.84 L1285.72 1633.7 L1258.8 1633.7 Q1259.18 1639.75 1262.43 1642.93 Q1265.7 1646.08 1271.53 1646.08 Q1274.9 1646.08 1278.05 1645.25 Q1281.24 1644.43 1284.36 1642.77 L1284.36 1648.31 Q1281.2 1649.65 1277.89 1650.35 Q1274.58 1651.05 1271.18 1651.05 Q1262.65 1651.05 1257.65 1646.08 Q1252.69 1641.12 1252.69 1632.65 Q1252.69 1623.9 1257.4 1618.77 Q1262.14 1613.62 1270.16 1613.62 Q1277.35 1613.62 1281.52 1618.26 Q1285.72 1622.88 1285.72 1630.84 M1279.87 1629.12 Q1279.8 1624.31 1277.16 1621.45 Q1274.55 1618.58 1270.22 1618.58 Q1265.32 1618.58 1262.36 1621.35 Q1259.43 1624.12 1258.99 1629.15 L1279.87 1629.12 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip190)\" d=\"M1295.34 1600.6 L1301.19 1600.6 L1301.19 1650.12 L1295.34 1650.12 L1295.34 1600.6 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip190)\" d=\"M1343.94 1630.84 L1343.94 1633.7 L1317.01 1633.7 Q1317.39 1639.75 1320.64 1642.93 Q1323.92 1646.08 1329.74 1646.08 Q1333.12 1646.08 1336.27 1645.25 Q1339.45 1644.43 1342.57 1642.77 L1342.57 1648.31 Q1339.42 1649.65 1336.11 1650.35 Q1332.8 1651.05 1329.39 1651.05 Q1320.86 1651.05 1315.87 1646.08 Q1310.9 1641.12 1310.9 1632.65 Q1310.9 1623.9 1315.61 1618.77 Q1320.35 1613.62 1328.37 1613.62 Q1335.57 1613.62 1339.74 1618.26 Q1343.94 1622.88 1343.94 1630.84 M1338.08 1629.12 Q1338.02 1624.31 1335.38 1621.45 Q1332.77 1618.58 1328.44 1618.58 Q1323.54 1618.58 1320.58 1621.35 Q1317.65 1624.12 1317.2 1629.15 L1338.08 1629.12 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip190)\" d=\"M1381.3 1621.32 Q1383.5 1617.37 1386.56 1615.49 Q1389.61 1613.62 1393.75 1613.62 Q1399.32 1613.62 1402.34 1617.53 Q1405.37 1621.41 1405.37 1628.61 L1405.37 1650.12 L1399.48 1650.12 L1399.48 1628.8 Q1399.48 1623.67 1397.66 1621.19 Q1395.85 1618.71 1392.13 1618.71 Q1387.58 1618.71 1384.93 1621.73 Q1382.29 1624.76 1382.29 1629.98 L1382.29 1650.12 L1376.4 1650.12 L1376.4 1628.8 Q1376.4 1623.64 1374.59 1621.19 Q1372.77 1618.71 1368.99 1618.71 Q1364.5 1618.71 1361.86 1621.76 Q1359.22 1624.79 1359.22 1629.98 L1359.22 1650.12 L1353.33 1650.12 L1353.33 1614.48 L1359.22 1614.48 L1359.22 1620.01 Q1361.22 1616.74 1364.02 1615.18 Q1366.82 1613.62 1370.67 1613.62 Q1374.56 1613.62 1377.26 1615.59 Q1380 1617.56 1381.3 1621.32 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip190)\" d=\"M1447.54 1630.84 L1447.54 1633.7 L1420.61 1633.7 Q1420.99 1639.75 1424.24 1642.93 Q1427.52 1646.08 1433.34 1646.08 Q1436.72 1646.08 1439.87 1645.25 Q1443.05 1644.43 1446.17 1642.77 L1446.17 1648.31 Q1443.02 1649.65 1439.71 1650.35 Q1436.4 1651.05 1432.99 1651.05 Q1424.46 1651.05 1419.47 1646.08 Q1414.5 1641.12 1414.5 1632.65 Q1414.5 1623.9 1419.21 1618.77 Q1423.96 1613.62 1431.98 1613.62 Q1439.17 1613.62 1443.34 1618.26 Q1447.54 1622.88 1447.54 1630.84 M1441.68 1629.12 Q1441.62 1624.31 1438.98 1621.45 Q1436.37 1618.58 1432.04 1618.58 Q1427.14 1618.58 1424.18 1621.35 Q1421.25 1624.12 1420.8 1629.15 L1441.68 1629.12 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip190)\" d=\"M1486.78 1628.61 L1486.78 1650.12 L1480.93 1650.12 L1480.93 1628.8 Q1480.93 1623.74 1478.95 1621.22 Q1476.98 1618.71 1473.03 1618.71 Q1468.29 1618.71 1465.55 1621.73 Q1462.82 1624.76 1462.82 1629.98 L1462.82 1650.12 L1456.93 1650.12 L1456.93 1614.48 L1462.82 1614.48 L1462.82 1620.01 Q1464.92 1616.8 1467.75 1615.21 Q1470.62 1613.62 1474.34 1613.62 Q1480.48 1613.62 1483.63 1617.44 Q1486.78 1621.22 1486.78 1628.61 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip190)\" d=\"M1504.26 1604.35 L1504.26 1614.48 L1516.32 1614.48 L1516.32 1619.03 L1504.26 1619.03 L1504.26 1638.38 Q1504.26 1642.74 1505.44 1643.98 Q1506.65 1645.22 1510.31 1645.22 L1516.32 1645.22 L1516.32 1650.12 L1510.31 1650.12 Q1503.53 1650.12 1500.95 1647.61 Q1498.37 1645.06 1498.37 1638.38 L1498.37 1619.03 L1494.07 1619.03 L1494.07 1614.48 L1498.37 1614.48 L1498.37 1604.35 L1504.26 1604.35 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip190)\" d=\"M1546.75 1615.53 L1546.75 1621.06 Q1544.27 1619.79 1541.59 1619.15 Q1538.92 1618.52 1536.06 1618.52 Q1531.69 1618.52 1529.5 1619.85 Q1527.33 1621.19 1527.33 1623.87 Q1527.33 1625.9 1528.89 1627.08 Q1530.45 1628.23 1535.16 1629.28 L1537.17 1629.72 Q1543.41 1631.06 1546.02 1633.51 Q1548.66 1635.93 1548.66 1640.29 Q1548.66 1645.25 1544.71 1648.15 Q1540.8 1651.05 1533.92 1651.05 Q1531.06 1651.05 1527.94 1650.47 Q1524.85 1649.93 1521.41 1648.82 L1521.41 1642.77 Q1524.66 1644.46 1527.81 1645.32 Q1530.96 1646.15 1534.05 1646.15 Q1538.19 1646.15 1540.42 1644.74 Q1542.64 1643.31 1542.64 1640.73 Q1542.64 1638.35 1541.02 1637.07 Q1539.43 1635.8 1533.99 1634.62 L1531.95 1634.15 Q1526.51 1633 1524.09 1630.64 Q1521.67 1628.26 1521.67 1624.12 Q1521.67 1619.09 1525.23 1616.35 Q1528.8 1613.62 1535.35 1613.62 Q1538.6 1613.62 1541.47 1614.09 Q1544.33 1614.57 1546.75 1615.53 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip192)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"\n  102.74,1237.67 2352.76,1237.67 \n  \"/>\n<polyline clip-path=\"url(#clip192)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"\n  102.74,939.286 2352.76,939.286 \n  \"/>\n<polyline clip-path=\"url(#clip192)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"\n  102.74,640.902 2352.76,640.902 \n  \"/>\n<polyline clip-path=\"url(#clip192)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"\n  102.74,342.518 2352.76,342.518 \n  \"/>\n<polyline clip-path=\"url(#clip190)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"\n  102.74,1505.26 102.74,62.9921 \n  \"/>\n<polyline clip-path=\"url(#clip190)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"\n  102.74,1237.67 121.638,1237.67 \n  \"/>\n<polyline clip-path=\"url(#clip190)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"\n  102.74,939.286 121.638,939.286 \n  \"/>\n<polyline clip-path=\"url(#clip190)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"\n  102.74,640.902 121.638,640.902 \n  \"/>\n<polyline clip-path=\"url(#clip190)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"\n  102.74,342.518 121.638,342.518 \n  \"/>\n<path clip-path=\"url(#clip190)\" d=\"M15.4441 1251.01 L23.083 1251.01 L23.083 1224.65 L14.7728 1226.32 L14.7728 1222.06 L23.0367 1220.39 L27.7126 1220.39 L27.7126 1251.01 L35.3514 1251.01 L35.3514 1254.95 L15.4441 1254.95 L15.4441 1251.01 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip190)\" d=\"M54.7958 1223.47 Q51.1847 1223.47 49.356 1227.03 Q47.5504 1230.57 47.5504 1237.7 Q47.5504 1244.81 49.356 1248.38 Q51.1847 1251.92 54.7958 1251.92 Q58.43 1251.92 60.2356 1248.38 Q62.0643 1244.81 62.0643 1237.7 Q62.0643 1230.57 60.2356 1227.03 Q58.43 1223.47 54.7958 1223.47 M54.7958 1219.76 Q60.6059 1219.76 63.6615 1224.37 Q66.7402 1228.95 66.7402 1237.7 Q66.7402 1246.43 63.6615 1251.04 Q60.6059 1255.62 54.7958 1255.62 Q48.9856 1255.62 45.9069 1251.04 Q42.8514 1246.43 42.8514 1237.7 Q42.8514 1228.95 45.9069 1224.37 Q48.9856 1219.76 54.7958 1219.76 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip190)\" d=\"M18.6617 952.63 L34.9811 952.63 L34.9811 956.566 L13.0367 956.566 L13.0367 952.63 Q15.6988 949.876 20.2821 945.246 Q24.8885 940.593 26.0691 939.251 Q28.3144 936.728 29.1941 934.992 Q30.0968 933.232 30.0968 931.543 Q30.0968 928.788 28.1524 927.052 Q26.2311 925.316 23.1293 925.316 Q20.9302 925.316 18.4765 926.08 Q16.046 926.843 13.2682 928.394 L13.2682 923.672 Q16.0923 922.538 18.546 921.959 Q20.9997 921.381 23.0367 921.381 Q28.407 921.381 31.6015 924.066 Q34.7959 926.751 34.7959 931.242 Q34.7959 933.371 33.9857 935.293 Q33.1987 937.191 31.0922 939.783 Q30.5135 940.455 27.4117 943.672 Q24.3098 946.867 18.6617 952.63 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip190)\" d=\"M54.7958 925.084 Q51.1847 925.084 49.356 928.649 Q47.5504 932.191 47.5504 939.32 Q47.5504 946.427 49.356 949.991 Q51.1847 953.533 54.7958 953.533 Q58.43 953.533 60.2356 949.991 Q62.0643 946.427 62.0643 939.32 Q62.0643 932.191 60.2356 928.649 Q58.43 925.084 54.7958 925.084 M54.7958 921.381 Q60.6059 921.381 63.6615 925.987 Q66.7402 930.57 66.7402 939.32 Q66.7402 948.047 63.6615 952.654 Q60.6059 957.237 54.7958 957.237 Q48.9856 957.237 45.9069 952.654 Q42.8514 948.047 42.8514 939.32 Q42.8514 930.57 45.9069 925.987 Q48.9856 921.381 54.7958 921.381 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip190)\" d=\"M28.8005 639.548 Q32.157 640.265 34.032 642.534 Q35.9301 644.802 35.9301 648.136 Q35.9301 653.251 32.4116 656.052 Q28.8931 658.853 22.4117 658.853 Q20.2358 658.853 17.921 658.413 Q15.6293 657.997 13.1756 657.14 L13.1756 652.626 Q15.1201 653.761 17.4349 654.339 Q19.7497 654.918 22.2728 654.918 Q26.6709 654.918 28.9626 653.182 Q31.2774 651.446 31.2774 648.136 Q31.2774 645.08 29.1246 643.367 Q26.995 641.631 23.1756 641.631 L19.1478 641.631 L19.1478 637.788 L23.3608 637.788 Q26.8098 637.788 28.6385 636.423 Q30.4672 635.034 30.4672 632.441 Q30.4672 629.779 28.5691 628.367 Q26.6941 626.932 23.1756 626.932 Q21.2543 626.932 19.0552 627.349 Q16.8562 627.765 14.2173 628.645 L14.2173 624.478 Q16.8793 623.738 19.1941 623.367 Q21.5321 622.997 23.5922 622.997 Q28.9163 622.997 32.0181 625.427 Q35.12 627.835 35.12 631.955 Q35.12 634.825 33.4764 636.816 Q31.8329 638.784 28.8005 639.548 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip190)\" d=\"M54.7958 626.7 Q51.1847 626.7 49.356 630.265 Q47.5504 633.807 47.5504 640.937 Q47.5504 648.043 49.356 651.608 Q51.1847 655.149 54.7958 655.149 Q58.43 655.149 60.2356 651.608 Q62.0643 648.043 62.0643 640.937 Q62.0643 633.807 60.2356 630.265 Q58.43 626.7 54.7958 626.7 M54.7958 622.997 Q60.6059 622.997 63.6615 627.603 Q66.7402 632.187 66.7402 640.937 Q66.7402 649.663 63.6615 654.27 Q60.6059 658.853 54.7958 658.853 Q48.9856 658.853 45.9069 654.27 Q42.8514 649.663 42.8514 640.937 Q42.8514 632.187 45.9069 627.603 Q48.9856 622.997 54.7958 622.997 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip190)\" d=\"M27.4811 329.312 L15.6756 347.761 L27.4811 347.761 L27.4811 329.312 M26.2543 325.238 L32.1339 325.238 L32.1339 347.761 L37.0644 347.761 L37.0644 351.65 L32.1339 351.65 L32.1339 359.798 L27.4811 359.798 L27.4811 351.65 L11.8793 351.65 L11.8793 347.136 L26.2543 325.238 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip190)\" d=\"M54.7958 328.317 Q51.1847 328.317 49.356 331.882 Q47.5504 335.423 47.5504 342.553 Q47.5504 349.659 49.356 353.224 Q51.1847 356.766 54.7958 356.766 Q58.43 356.766 60.2356 353.224 Q62.0643 349.659 62.0643 342.553 Q62.0643 335.423 60.2356 331.882 Q58.43 328.317 54.7958 328.317 M54.7958 324.613 Q60.6059 324.613 63.6615 329.219 Q66.7402 333.803 66.7402 342.553 Q66.7402 351.28 63.6615 355.886 Q60.6059 360.469 54.7958 360.469 Q48.9856 360.469 45.9069 355.886 Q42.8514 351.28 42.8514 342.553 Q42.8514 333.803 45.9069 329.219 Q48.9856 324.613 54.7958 324.613 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip190)\" d=\"M-67.1815 1123.39 Q-71.1282 1121.19 -73.0061 1118.13 Q-74.884 1115.08 -74.884 1110.94 Q-74.884 1105.37 -70.9691 1102.35 Q-67.086 1099.32 -59.8927 1099.32 L-38.3767 1099.32 L-38.3767 1105.21 L-59.7018 1105.21 Q-64.8262 1105.21 -67.3088 1107.03 Q-69.7914 1108.84 -69.7914 1112.56 Q-69.7914 1117.12 -66.7677 1119.76 Q-63.744 1122.4 -58.5241 1122.4 L-38.3767 1122.4 L-38.3767 1128.29 L-59.7018 1128.29 Q-64.858 1128.29 -67.3088 1130.1 Q-69.7914 1131.92 -69.7914 1135.7 Q-69.7914 1140.19 -66.7359 1142.83 Q-63.7122 1145.48 -58.5241 1145.48 L-38.3767 1145.48 L-38.3767 1151.36 L-74.0246 1151.36 L-74.0246 1145.48 L-68.4865 1145.48 Q-71.7648 1143.47 -73.3244 1140.67 Q-74.884 1137.87 -74.884 1134.02 Q-74.884 1130.13 -72.9106 1127.43 Q-70.9372 1124.69 -67.1815 1123.39 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip190)\" d=\"M-57.6648 1057.15 L-54.8002 1057.15 L-54.8002 1084.08 Q-48.7528 1083.7 -45.5699 1080.45 Q-42.4189 1077.17 -42.4189 1071.35 Q-42.4189 1067.97 -43.2464 1064.82 Q-44.074 1061.64 -45.7291 1058.52 L-40.1909 1058.52 Q-38.8541 1061.67 -38.1539 1064.98 Q-37.4536 1068.29 -37.4536 1071.7 Q-37.4536 1080.23 -42.4189 1085.22 Q-47.3841 1090.19 -55.8505 1090.19 Q-64.6034 1090.19 -69.7278 1085.48 Q-74.884 1080.74 -74.884 1072.72 Q-74.884 1065.52 -70.237 1061.35 Q-65.6219 1057.15 -57.6648 1057.15 M-59.3835 1063.01 Q-64.1896 1063.07 -67.0542 1065.71 Q-69.9187 1068.32 -69.9187 1072.65 Q-69.9187 1077.55 -67.1497 1080.51 Q-64.3806 1083.44 -59.3517 1083.89 L-59.3835 1063.01 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip190)\" d=\"M-67.1815 1019.78 Q-71.1282 1017.59 -73.0061 1014.53 Q-74.884 1011.48 -74.884 1007.34 Q-74.884 1001.77 -70.9691 998.746 Q-67.086 995.722 -59.8927 995.722 L-38.3767 995.722 L-38.3767 1001.61 L-59.7018 1001.61 Q-64.8262 1001.61 -67.3088 1003.42 Q-69.7914 1005.24 -69.7914 1008.96 Q-69.7914 1013.51 -66.7677 1016.16 Q-63.744 1018.8 -58.5241 1018.8 L-38.3767 1018.8 L-38.3767 1024.69 L-59.7018 1024.69 Q-64.858 1024.69 -67.3088 1026.5 Q-69.7914 1028.31 -69.7914 1032.1 Q-69.7914 1036.59 -66.7359 1039.23 Q-63.7122 1041.87 -58.5241 1041.87 L-38.3767 1041.87 L-38.3767 1047.76 L-74.0246 1047.76 L-74.0246 1041.87 L-68.4865 1041.87 Q-71.7648 1039.87 -73.3244 1037.07 Q-74.884 1034.27 -74.884 1030.42 Q-74.884 1026.53 -72.9106 1023.83 Q-70.9372 1021.09 -67.1815 1019.78 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip190)\" d=\"M-69.9187 970.227 Q-69.9187 974.938 -66.2266 977.675 Q-62.5663 980.413 -56.1688 980.413 Q-49.7713 980.413 -46.0792 977.707 Q-42.4189 974.97 -42.4189 970.227 Q-42.4189 965.549 -46.111 962.811 Q-49.8031 960.074 -56.1688 960.074 Q-62.5027 960.074 -66.1948 962.811 Q-69.9187 965.549 -69.9187 970.227 M-74.884 970.227 Q-74.884 962.589 -69.9187 958.228 Q-64.9535 953.868 -56.1688 953.868 Q-47.416 953.868 -42.4189 958.228 Q-37.4536 962.589 -37.4536 970.227 Q-37.4536 977.898 -42.4189 982.259 Q-47.416 986.587 -56.1688 986.587 Q-64.9535 986.587 -69.9187 982.259 Q-74.884 977.898 -74.884 970.227 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip190)\" d=\"M-68.5501 923.503 Q-69.123 924.49 -69.3777 925.667 Q-69.6641 926.813 -69.6641 928.214 Q-69.6641 933.179 -66.4176 935.853 Q-63.2029 938.494 -57.1555 938.494 L-38.3767 938.494 L-38.3767 944.383 L-74.0246 944.383 L-74.0246 938.494 L-68.4865 938.494 Q-71.733 936.648 -73.2926 933.688 Q-74.884 930.728 -74.884 926.495 Q-74.884 925.89 -74.7885 925.158 Q-74.7248 924.426 -74.5657 923.535 L-68.5501 923.503 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip190)\" d=\"M-35.0665 902.528 Q-28.7008 905.011 -26.7592 907.366 Q-24.8177 909.721 -24.8177 913.668 L-24.8177 918.347 L-29.7193 918.347 L-29.7193 914.909 Q-29.7193 912.49 -30.8651 911.154 Q-32.011 909.817 -36.276 908.194 L-38.9496 907.143 L-74.0246 921.562 L-74.0246 915.355 L-46.1428 904.215 L-74.0246 893.075 L-74.0246 886.868 L-35.0665 902.528 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip190)\" d=\"M-56.2961 841.863 Q-56.2961 848.961 -54.6729 851.698 Q-53.0496 854.435 -49.1347 854.435 Q-46.0155 854.435 -44.1695 852.398 Q-42.3552 850.329 -42.3552 846.796 Q-42.3552 841.927 -45.7927 838.998 Q-49.262 836.038 -54.9912 836.038 L-56.2961 836.038 L-56.2961 841.863 M-58.7151 830.182 L-38.3767 830.182 L-38.3767 836.038 L-43.7875 836.038 Q-40.541 838.044 -38.9814 841.035 Q-37.4536 844.027 -37.4536 848.356 Q-37.4536 853.83 -40.5092 857.077 Q-43.5965 860.292 -48.7528 860.292 Q-54.7684 860.292 -57.8239 856.281 Q-60.8794 852.239 -60.8794 844.25 L-60.8794 836.038 L-61.4523 836.038 Q-65.4946 836.038 -67.6907 838.712 Q-69.9187 841.354 -69.9187 846.16 Q-69.9187 849.215 -69.1867 852.112 Q-68.4546 855.008 -66.9905 857.682 L-72.4014 857.682 Q-73.6427 854.467 -74.2474 851.443 Q-74.884 848.42 -74.884 845.555 Q-74.884 837.821 -70.8736 834.001 Q-66.8632 830.182 -58.7151 830.182 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip190)\" d=\"M-87.9019 818.119 L-87.9019 812.262 L-38.3767 812.262 L-38.3767 818.119 L-87.9019 818.119 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip190)\" d=\"M-87.9019 800.008 L-87.9019 794.152 L-38.3767 794.152 L-38.3767 800.008 L-87.9019 800.008 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip190)\" d=\"M-69.9187 768.084 Q-69.9187 772.795 -66.2266 775.532 Q-62.5663 778.27 -56.1688 778.27 Q-49.7713 778.27 -46.0792 775.564 Q-42.4189 772.827 -42.4189 768.084 Q-42.4189 763.406 -46.111 760.668 Q-49.8031 757.931 -56.1688 757.931 Q-62.5027 757.931 -66.1948 760.668 Q-69.9187 763.406 -69.9187 768.084 M-74.884 768.084 Q-74.884 760.446 -69.9187 756.085 Q-64.9535 751.725 -56.1688 751.725 Q-47.416 751.725 -42.4189 756.085 Q-37.4536 760.446 -37.4536 768.084 Q-37.4536 775.755 -42.4189 780.116 Q-47.416 784.444 -56.1688 784.444 Q-64.9535 784.444 -69.9187 780.116 Q-74.884 775.755 -74.884 768.084 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip190)\" d=\"M-72.656 716.363 L-67.1815 716.363 Q-68.5501 718.846 -69.2185 721.36 Q-69.9187 723.843 -69.9187 726.389 Q-69.9187 732.086 -66.2903 735.237 Q-62.6937 738.388 -56.1688 738.388 Q-49.644 738.388 -46.0155 735.237 Q-42.4189 732.086 -42.4189 726.389 Q-42.4189 723.843 -43.0873 721.36 Q-43.7875 718.846 -45.1561 716.363 L-39.7453 716.363 Q-38.5995 718.814 -38.0265 721.456 Q-37.4536 724.066 -37.4536 727.026 Q-37.4536 735.078 -42.5144 739.821 Q-47.5751 744.563 -56.1688 744.563 Q-64.8898 744.563 -69.8869 739.789 Q-74.884 734.983 -74.884 726.644 Q-74.884 723.938 -74.3111 721.36 Q-73.77 718.782 -72.656 716.363 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip190)\" d=\"M-56.2961 689.977 Q-56.2961 697.075 -54.6729 699.812 Q-53.0496 702.549 -49.1347 702.549 Q-46.0155 702.549 -44.1695 700.512 Q-42.3552 698.444 -42.3552 694.911 Q-42.3552 690.041 -45.7927 687.113 Q-49.262 684.153 -54.9912 684.153 L-56.2961 684.153 L-56.2961 689.977 M-58.7151 678.296 L-38.3767 678.296 L-38.3767 684.153 L-43.7875 684.153 Q-40.541 686.158 -38.9814 689.15 Q-37.4536 692.142 -37.4536 696.47 Q-37.4536 701.945 -40.5092 705.191 Q-43.5965 708.406 -48.7528 708.406 Q-54.7684 708.406 -57.8239 704.396 Q-60.8794 700.353 -60.8794 692.364 L-60.8794 684.153 L-61.4523 684.153 Q-65.4946 684.153 -67.6907 686.826 Q-69.9187 689.468 -69.9187 694.274 Q-69.9187 697.33 -69.1867 700.226 Q-68.4546 703.122 -66.9905 705.796 L-72.4014 705.796 Q-73.6427 702.581 -74.2474 699.558 Q-74.884 696.534 -74.884 693.669 Q-74.884 685.935 -70.8736 682.116 Q-66.8632 678.296 -58.7151 678.296 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip190)\" d=\"M-84.1461 660.44 L-74.0246 660.44 L-74.0246 648.377 L-69.4731 648.377 L-69.4731 660.44 L-50.1214 660.44 Q-45.7609 660.44 -44.5196 659.263 Q-43.2783 658.053 -43.2783 654.393 L-43.2783 648.377 L-38.3767 648.377 L-38.3767 654.393 Q-38.3767 661.172 -40.8911 663.75 Q-43.4374 666.329 -50.1214 666.329 L-69.4731 666.329 L-69.4731 670.625 L-74.0246 670.625 L-74.0246 666.329 L-84.1461 666.329 L-84.1461 660.44 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip190)\" d=\"M-57.6648 610.183 L-54.8002 610.183 L-54.8002 637.11 Q-48.7528 636.728 -45.5699 633.482 Q-42.4189 630.203 -42.4189 624.379 Q-42.4189 621.005 -43.2464 617.854 Q-44.074 614.671 -45.7291 611.552 L-40.1909 611.552 Q-38.8541 614.703 -38.1539 618.013 Q-37.4536 621.323 -37.4536 624.729 Q-37.4536 633.259 -42.4189 638.256 Q-47.3841 643.221 -55.8505 643.221 Q-64.6034 643.221 -69.7278 638.51 Q-74.884 633.768 -74.884 625.747 Q-74.884 618.554 -70.237 614.384 Q-65.6219 610.183 -57.6648 610.183 M-59.3835 616.04 Q-64.1896 616.103 -67.0542 618.745 Q-69.9187 621.355 -69.9187 625.684 Q-69.9187 630.585 -67.1497 633.545 Q-64.3806 636.473 -59.3517 636.919 L-59.3835 616.04 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip190)\" d=\"M-68.6138 577.113 L-87.9019 577.113 L-87.9019 571.257 L-38.3767 571.257 L-38.3767 577.113 L-43.7239 577.113 Q-40.541 578.959 -38.9814 581.792 Q-37.4536 584.593 -37.4536 588.54 Q-37.4536 595.001 -42.6099 599.075 Q-47.7661 603.117 -56.1688 603.117 Q-64.5715 603.117 -69.7278 599.075 Q-74.884 595.001 -74.884 588.54 Q-74.884 584.593 -73.3244 581.792 Q-71.7966 578.959 -68.6138 577.113 M-56.1688 597.07 Q-49.7076 597.07 -46.0155 594.428 Q-42.3552 591.754 -42.3552 587.107 Q-42.3552 582.46 -46.0155 579.787 Q-49.7076 577.113 -56.1688 577.113 Q-62.63 577.113 -66.2903 579.787 Q-69.9824 582.46 -69.9824 587.107 Q-69.9824 591.754 -66.2903 594.428 Q-62.63 597.07 -56.1688 597.07 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip190)\" d=\"M-87.8382 524.405 Q-80.5176 528.67 -73.3562 530.739 Q-66.1948 532.808 -58.8424 532.808 Q-51.49 532.808 -44.2649 530.739 Q-37.0717 528.638 -29.783 524.405 L-29.783 529.498 Q-37.2627 534.272 -44.4877 536.659 Q-51.7128 539.014 -58.8424 539.014 Q-65.9402 539.014 -73.1334 536.659 Q-80.3267 534.304 -87.8382 529.498 L-87.8382 524.405 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip190)\" d=\"M-87.9019 513.265 L-87.9019 507.377 L-58.6514 507.377 L-74.0246 489.903 L-74.0246 482.423 L-57.3465 501.329 L-38.3767 481.628 L-38.3767 489.266 L-55.7869 507.377 L-38.3767 507.377 L-38.3767 513.265 L-87.9019 513.265 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip190)\" d=\"M-61.0704 468.61 L-43.6602 468.61 L-43.6602 458.297 Q-43.6602 453.109 -45.7927 450.627 Q-47.957 448.112 -52.3812 448.112 Q-56.8372 448.112 -58.9379 450.627 Q-61.0704 453.109 -61.0704 458.297 L-61.0704 468.61 M-80.6131 468.61 L-66.2903 468.61 L-66.2903 459.093 Q-66.2903 454.382 -68.0409 452.091 Q-69.8233 449.767 -73.4517 449.767 Q-77.0483 449.767 -78.8307 452.091 Q-80.6131 454.382 -80.6131 459.093 L-80.6131 468.61 M-85.8967 475.039 L-85.8967 458.616 Q-85.8967 451.263 -82.8411 447.285 Q-79.7856 443.306 -74.1519 443.306 Q-69.7914 443.306 -67.2133 445.343 Q-64.6352 447.38 -63.9986 451.327 Q-62.9801 446.584 -59.7336 443.974 Q-56.5189 441.333 -51.681 441.333 Q-45.3153 441.333 -41.846 445.661 Q-38.3767 449.99 -38.3767 457.979 L-38.3767 475.039 L-85.8967 475.039 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip190)\" d=\"M-87.8382 431.498 L-87.8382 426.405 Q-80.3267 421.631 -73.1334 419.276 Q-65.9402 416.888 -58.8424 416.888 Q-51.7128 416.888 -44.4877 419.276 Q-37.2627 421.631 -29.783 426.405 L-29.783 431.498 Q-37.0717 427.264 -44.2649 425.196 Q-51.49 423.095 -58.8424 423.095 Q-66.1948 423.095 -73.3562 425.196 Q-80.5176 427.264 -87.8382 431.498 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip190)\" d=\"M99.3484 12.096 L150.511 12.096 L150.511 18.9825 L129.042 18.9825 L129.042 72.576 L120.818 72.576 L120.818 18.9825 L99.3484 18.9825 L99.3484 12.096 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip190)\" d=\"M161.57 32.4315 Q155.575 32.4315 152.091 37.1306 Q148.607 41.7891 148.607 49.9314 Q148.607 58.0738 152.051 62.7728 Q155.534 67.4314 161.57 67.4314 Q167.525 67.4314 171.009 62.7323 Q174.493 58.0333 174.493 49.9314 Q174.493 41.8701 171.009 37.1711 Q167.525 32.4315 161.57 32.4315 M161.57 26.1121 Q171.292 26.1121 176.842 32.4315 Q182.392 38.7509 182.392 49.9314 Q182.392 61.0714 176.842 67.4314 Q171.292 73.7508 161.57 73.7508 Q151.808 73.7508 146.258 67.4314 Q140.749 61.0714 140.749 49.9314 Q140.749 38.7509 146.258 32.4315 Q151.808 26.1121 161.57 26.1121 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip190)\" d=\"M202.12 14.324 L202.12 27.2059 L217.473 27.2059 L217.473 32.9987 L202.12 32.9987 L202.12 57.6282 Q202.12 63.1779 203.619 64.7578 Q205.158 66.3376 209.817 66.3376 L217.473 66.3376 L217.473 72.576 L209.817 72.576 Q201.188 72.576 197.907 69.3758 Q194.626 66.1351 194.626 57.6282 L194.626 32.9987 L189.157 32.9987 L189.157 27.2059 L194.626 27.2059 L194.626 14.324 L202.12 14.324 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip190)\" d=\"M247.895 49.7694 Q238.862 49.7694 235.378 51.8354 Q231.894 53.9013 231.894 58.8839 Q231.894 62.8538 234.487 65.2034 Q237.12 67.5124 241.616 67.5124 Q247.814 67.5124 251.541 63.1374 Q255.308 58.7219 255.308 51.4303 L255.308 49.7694 L247.895 49.7694 M262.762 46.6907 L262.762 72.576 L255.308 72.576 L255.308 65.6895 Q252.756 69.8214 248.948 71.8063 Q245.14 73.7508 239.631 73.7508 Q232.664 73.7508 228.532 69.8619 Q224.44 65.9325 224.44 59.3701 Q224.44 51.7138 229.544 47.825 Q234.689 43.9361 244.857 43.9361 L255.308 43.9361 L255.308 43.2069 Q255.308 38.0623 251.905 35.2672 Q248.543 32.4315 242.426 32.4315 Q238.537 32.4315 234.851 33.3632 Q231.165 34.295 227.762 36.1584 L227.762 29.2718 Q231.853 27.692 235.702 26.9223 Q239.55 26.1121 243.196 26.1121 Q253.04 26.1121 257.901 31.2163 Q262.762 36.3204 262.762 46.6907 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip190)\" d=\"M278.115 9.54393 L285.568 9.54393 L285.568 72.576 L278.115 72.576 L278.115 9.54393 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip190)\" d=\"M362.86 35.9153 Q365.655 30.8922 369.544 28.5022 Q373.433 26.1121 378.699 26.1121 Q385.788 26.1121 389.636 31.0947 Q393.485 36.0368 393.485 45.1919 L393.485 72.576 L385.99 72.576 L385.99 45.4349 Q385.99 38.913 383.681 35.7533 Q381.372 32.5936 376.633 32.5936 Q370.84 32.5936 367.478 36.4419 Q364.116 40.2903 364.116 46.9338 L364.116 72.576 L356.621 72.576 L356.621 45.4349 Q356.621 38.8725 354.312 35.7533 Q352.003 32.5936 347.183 32.5936 Q341.471 32.5936 338.109 36.4824 Q334.746 40.3308 334.746 46.9338 L334.746 72.576 L327.252 72.576 L327.252 27.2059 L334.746 27.2059 L334.746 34.2544 Q337.299 30.082 340.863 28.0971 Q344.428 26.1121 349.33 26.1121 Q354.272 26.1121 357.715 28.6237 Q361.199 31.1352 362.86 35.9153 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip190)\" d=\"M447.159 48.0275 L447.159 51.6733 L412.888 51.6733 Q413.375 59.3701 417.506 63.421 Q421.679 67.4314 429.092 67.4314 Q433.386 67.4314 437.396 66.3781 Q441.447 65.3249 445.417 63.2184 L445.417 70.267 Q441.407 71.9684 437.194 72.8596 Q432.981 73.7508 428.646 73.7508 Q417.79 73.7508 411.43 67.4314 Q405.111 61.1119 405.111 50.3365 Q405.111 39.1965 411.106 32.6746 Q417.142 26.1121 427.35 26.1121 Q436.505 26.1121 441.812 32.0264 Q447.159 37.9003 447.159 48.0275 M439.705 45.84 Q439.624 39.7232 436.262 36.0774 Q432.94 32.4315 427.431 32.4315 Q421.193 32.4315 417.425 35.9558 Q413.699 39.4801 413.131 45.8805 L439.705 45.84 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip190)\" d=\"M494.717 35.9153 Q497.512 30.8922 501.401 28.5022 Q505.29 26.1121 510.556 26.1121 Q517.645 26.1121 521.493 31.0947 Q525.341 36.0368 525.341 45.1919 L525.341 72.576 L517.847 72.576 L517.847 45.4349 Q517.847 38.913 515.538 35.7533 Q513.229 32.5936 508.49 32.5936 Q502.697 32.5936 499.335 36.4419 Q495.972 40.2903 495.972 46.9338 L495.972 72.576 L488.478 72.576 L488.478 45.4349 Q488.478 38.8725 486.169 35.7533 Q483.86 32.5936 479.04 32.5936 Q473.328 32.5936 469.966 36.4824 Q466.603 40.3308 466.603 46.9338 L466.603 72.576 L459.109 72.576 L459.109 27.2059 L466.603 27.2059 L466.603 34.2544 Q469.155 30.082 472.72 28.0971 Q476.285 26.1121 481.187 26.1121 Q486.129 26.1121 489.572 28.6237 Q493.056 31.1352 494.717 35.9153 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip190)\" d=\"M557.789 32.4315 Q551.794 32.4315 548.31 37.1306 Q544.826 41.7891 544.826 49.9314 Q544.826 58.0738 548.27 62.7728 Q551.753 67.4314 557.789 67.4314 Q563.744 67.4314 567.228 62.7323 Q570.712 58.0333 570.712 49.9314 Q570.712 41.8701 567.228 37.1711 Q563.744 32.4315 557.789 32.4315 M557.789 26.1121 Q567.511 26.1121 573.061 32.4315 Q578.611 38.7509 578.611 49.9314 Q578.611 61.0714 573.061 67.4314 Q567.511 73.7508 557.789 73.7508 Q548.027 73.7508 542.477 67.4314 Q536.968 61.0714 536.968 49.9314 Q536.968 38.7509 542.477 32.4315 Q548.027 26.1121 557.789 26.1121 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip190)\" d=\"M617.257 34.1734 Q616.001 33.4443 614.502 33.1202 Q613.044 32.7556 611.261 32.7556 Q604.942 32.7556 601.539 36.8875 Q598.177 40.9789 598.177 48.6757 L598.177 72.576 L590.683 72.576 L590.683 27.2059 L598.177 27.2059 L598.177 34.2544 Q600.526 30.1225 604.294 28.1376 Q608.061 26.1121 613.449 26.1121 Q614.218 26.1121 615.15 26.2337 Q616.082 26.3147 617.216 26.5172 L617.257 34.1734 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip190)\" d=\"M643.952 76.7889 Q640.792 84.8907 637.795 87.3618 Q634.797 89.8329 629.774 89.8329 L623.819 89.8329 L623.819 83.5945 L628.194 83.5945 Q631.273 83.5945 632.974 82.1361 Q634.675 80.6778 636.741 75.2496 L638.078 71.8468 L619.728 27.2059 L627.627 27.2059 L641.805 62.6918 L655.983 27.2059 L663.882 27.2059 L643.952 76.7889 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip190)\" d=\"M721.162 49.7694 Q712.129 49.7694 708.645 51.8354 Q705.161 53.9013 705.161 58.8839 Q705.161 62.8538 707.754 65.2034 Q710.387 67.5124 714.883 67.5124 Q721.081 67.5124 724.808 63.1374 Q728.575 58.7219 728.575 51.4303 L728.575 49.7694 L721.162 49.7694 M736.029 46.6907 L736.029 72.576 L728.575 72.576 L728.575 65.6895 Q726.023 69.8214 722.215 71.8063 Q718.408 73.7508 712.898 73.7508 Q705.931 73.7508 701.799 69.8619 Q697.707 65.9325 697.707 59.3701 Q697.707 51.7138 702.812 47.825 Q707.956 43.9361 718.124 43.9361 L728.575 43.9361 L728.575 43.2069 Q728.575 38.0623 725.173 35.2672 Q721.81 32.4315 715.693 32.4315 Q711.805 32.4315 708.118 33.3632 Q704.432 34.295 701.029 36.1584 L701.029 29.2718 Q705.121 27.692 708.969 26.9223 Q712.817 26.1121 716.463 26.1121 Q726.307 26.1121 731.168 31.2163 Q736.029 36.3204 736.029 46.6907 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip190)\" d=\"M751.382 9.54393 L758.836 9.54393 L758.836 72.576 L751.382 72.576 L751.382 9.54393 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip190)\" d=\"M774.432 9.54393 L781.885 9.54393 L781.885 72.576 L774.432 72.576 L774.432 9.54393 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip190)\" d=\"M815.062 32.4315 Q809.067 32.4315 805.583 37.1306 Q802.099 41.7891 802.099 49.9314 Q802.099 58.0738 805.543 62.7728 Q809.026 67.4314 815.062 67.4314 Q821.017 67.4314 824.501 62.7323 Q827.985 58.0333 827.985 49.9314 Q827.985 41.8701 824.501 37.1711 Q821.017 32.4315 815.062 32.4315 M815.062 26.1121 Q824.784 26.1121 830.334 32.4315 Q835.884 38.7509 835.884 49.9314 Q835.884 61.0714 830.334 67.4314 Q824.784 73.7508 815.062 73.7508 Q805.299 73.7508 799.75 67.4314 Q794.241 61.0714 794.241 49.9314 Q794.241 38.7509 799.75 32.4315 Q805.299 26.1121 815.062 26.1121 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip190)\" d=\"M880.889 28.9478 L880.889 35.9153 Q877.73 34.1734 874.529 33.3227 Q871.37 32.4315 868.129 32.4315 Q860.878 32.4315 856.867 37.0496 Q852.857 41.6271 852.857 49.9314 Q852.857 58.2358 856.867 62.8538 Q860.878 67.4314 868.129 67.4314 Q871.37 67.4314 874.529 66.5807 Q877.73 65.6895 880.889 63.9476 L880.889 70.8341 Q877.77 72.2924 874.408 73.0216 Q871.086 73.7508 867.319 73.7508 Q857.07 73.7508 851.034 67.3098 Q844.998 60.8689 844.998 49.9314 Q844.998 38.832 851.075 32.472 Q857.192 26.1121 867.805 26.1121 Q871.248 26.1121 874.529 26.8413 Q877.811 27.5299 880.889 28.9478 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip190)\" d=\"M914.471 49.7694 Q905.438 49.7694 901.954 51.8354 Q898.47 53.9013 898.47 58.8839 Q898.47 62.8538 901.063 65.2034 Q903.696 67.5124 908.192 67.5124 Q914.39 67.5124 918.117 63.1374 Q921.885 58.7219 921.885 51.4303 L921.885 49.7694 L914.471 49.7694 M929.338 46.6907 L929.338 72.576 L921.885 72.576 L921.885 65.6895 Q919.332 69.8214 915.525 71.8063 Q911.717 73.7508 906.208 73.7508 Q899.24 73.7508 895.108 69.8619 Q891.017 65.9325 891.017 59.3701 Q891.017 51.7138 896.121 47.825 Q901.265 43.9361 911.433 43.9361 L921.885 43.9361 L921.885 43.2069 Q921.885 38.0623 918.482 35.2672 Q915.119 32.4315 909.003 32.4315 Q905.114 32.4315 901.427 33.3632 Q897.741 34.295 894.338 36.1584 L894.338 29.2718 Q898.43 27.692 902.278 26.9223 Q906.126 26.1121 909.772 26.1121 Q919.616 26.1121 924.477 31.2163 Q929.338 36.3204 929.338 46.6907 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip190)\" d=\"M952.064 14.324 L952.064 27.2059 L967.417 27.2059 L967.417 32.9987 L952.064 32.9987 L952.064 57.6282 Q952.064 63.1779 953.563 64.7578 Q955.102 66.3376 959.76 66.3376 L967.417 66.3376 L967.417 72.576 L959.76 72.576 Q951.132 72.576 947.851 69.3758 Q944.57 66.1351 944.57 57.6282 L944.57 32.9987 L939.101 32.9987 L939.101 27.2059 L944.57 27.2059 L944.57 14.324 L952.064 14.324 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip190)\" d=\"M1016.03 48.0275 L1016.03 51.6733 L981.757 51.6733 Q982.243 59.3701 986.375 63.421 Q990.547 67.4314 997.96 67.4314 Q1002.25 67.4314 1006.26 66.3781 Q1010.32 65.3249 1014.29 63.2184 L1014.29 70.267 Q1010.28 71.9684 1006.06 72.8596 Q1001.85 73.7508 997.515 73.7508 Q986.658 73.7508 980.299 67.4314 Q973.979 61.1119 973.979 50.3365 Q973.979 39.1965 979.974 32.6746 Q986.01 26.1121 996.219 26.1121 Q1005.37 26.1121 1010.68 32.0264 Q1016.03 37.9003 1016.03 48.0275 M1008.57 45.84 Q1008.49 39.7232 1005.13 36.0774 Q1001.81 32.4315 996.3 32.4315 Q990.061 32.4315 986.294 35.9558 Q982.567 39.4801 982 45.8805 L1008.57 45.84 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip190)\" d=\"M1058.12 34.0924 L1058.12 9.54393 L1065.57 9.54393 L1065.57 72.576 L1058.12 72.576 L1058.12 65.7705 Q1055.77 69.8214 1052.16 71.8063 Q1048.6 73.7508 1043.57 73.7508 Q1035.35 73.7508 1030.17 67.1883 Q1025.02 60.6258 1025.02 49.9314 Q1025.02 39.2371 1030.17 32.6746 Q1035.35 26.1121 1043.57 26.1121 Q1048.6 26.1121 1052.16 28.0971 Q1055.77 30.0415 1058.12 34.0924 M1032.72 49.9314 Q1032.72 58.1548 1036.08 62.8538 Q1039.48 67.5124 1045.4 67.5124 Q1051.31 67.5124 1054.71 62.8538 Q1058.12 58.1548 1058.12 49.9314 Q1058.12 41.7081 1054.71 37.0496 Q1051.31 32.3505 1045.4 32.3505 Q1039.48 32.3505 1036.08 37.0496 Q1032.72 41.7081 1032.72 49.9314 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip190)\" d=\"M1137.15 34.0924 L1137.15 9.54393 L1144.6 9.54393 L1144.6 72.576 L1137.15 72.576 L1137.15 65.7705 Q1134.8 69.8214 1131.19 71.8063 Q1127.63 73.7508 1122.61 73.7508 Q1114.38 73.7508 1109.2 67.1883 Q1104.05 60.6258 1104.05 49.9314 Q1104.05 39.2371 1109.2 32.6746 Q1114.38 26.1121 1122.61 26.1121 Q1127.63 26.1121 1131.19 28.0971 Q1134.8 30.0415 1137.15 34.0924 M1111.75 49.9314 Q1111.75 58.1548 1115.11 62.8538 Q1118.52 67.5124 1124.43 67.5124 Q1130.34 67.5124 1133.75 62.8538 Q1137.15 58.1548 1137.15 49.9314 Q1137.15 41.7081 1133.75 37.0496 Q1130.34 32.3505 1124.43 32.3505 Q1118.52 32.3505 1115.11 37.0496 Q1111.75 41.7081 1111.75 49.9314 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip190)\" d=\"M1159.19 54.671 L1159.19 27.2059 L1166.64 27.2059 L1166.64 54.3874 Q1166.64 60.8284 1169.15 64.0691 Q1171.66 67.2693 1176.69 67.2693 Q1182.72 67.2693 1186.21 63.421 Q1189.73 59.5726 1189.73 52.9291 L1189.73 27.2059 L1197.18 27.2059 L1197.18 72.576 L1189.73 72.576 L1189.73 65.6084 Q1187.02 69.7404 1183.41 71.7658 Q1179.85 73.7508 1175.11 73.7508 Q1167.29 73.7508 1163.24 68.8897 Q1159.19 64.0286 1159.19 54.671 M1177.94 26.1121 L1177.94 26.1121 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip190)\" d=\"M1238.83 34.1734 Q1237.57 33.4443 1236.07 33.1202 Q1234.61 32.7556 1232.83 32.7556 Q1226.51 32.7556 1223.11 36.8875 Q1219.75 40.9789 1219.75 48.6757 L1219.75 72.576 L1212.25 72.576 L1212.25 27.2059 L1219.75 27.2059 L1219.75 34.2544 Q1222.1 30.1225 1225.86 28.1376 Q1229.63 26.1121 1235.02 26.1121 Q1235.79 26.1121 1236.72 26.2337 Q1237.65 26.3147 1238.79 26.5172 L1238.83 34.1734 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip190)\" d=\"M1246.65 27.2059 L1254.1 27.2059 L1254.1 72.576 L1246.65 72.576 L1246.65 27.2059 M1246.65 9.54393 L1254.1 9.54393 L1254.1 18.9825 L1246.65 18.9825 L1246.65 9.54393 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip190)\" d=\"M1307.41 45.1919 L1307.41 72.576 L1299.96 72.576 L1299.96 45.4349 Q1299.96 38.994 1297.44 35.7938 Q1294.93 32.5936 1289.91 32.5936 Q1283.87 32.5936 1280.39 36.4419 Q1276.91 40.2903 1276.91 46.9338 L1276.91 72.576 L1269.41 72.576 L1269.41 27.2059 L1276.91 27.2059 L1276.91 34.2544 Q1279.58 30.163 1283.18 28.1376 Q1286.83 26.1121 1291.57 26.1121 Q1299.39 26.1121 1303.4 30.9732 Q1307.41 35.7938 1307.41 45.1919 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip190)\" d=\"M1352.13 49.3643 Q1352.13 41.2625 1348.77 36.8065 Q1345.45 32.3505 1339.41 32.3505 Q1333.42 32.3505 1330.05 36.8065 Q1326.73 41.2625 1326.73 49.3643 Q1326.73 57.4256 1330.05 61.8816 Q1333.42 66.3376 1339.41 66.3376 Q1345.45 66.3376 1348.77 61.8816 Q1352.13 57.4256 1352.13 49.3643 M1359.58 66.9452 Q1359.58 78.5308 1354.44 84.1616 Q1349.3 89.8329 1338.68 89.8329 Q1334.75 89.8329 1331.27 89.2252 Q1327.79 88.6581 1324.5 87.4428 L1324.5 80.1917 Q1327.79 81.9741 1330.99 82.8248 Q1334.19 83.6755 1337.51 83.6755 Q1344.84 83.6755 1348.49 79.8271 Q1352.13 76.0193 1352.13 68.282 L1352.13 64.5957 Q1349.82 68.6061 1346.22 70.5911 Q1342.61 72.576 1337.59 72.576 Q1329.24 72.576 1324.14 66.2161 Q1319.04 59.8562 1319.04 49.3643 Q1319.04 38.832 1324.14 32.472 Q1329.24 26.1121 1337.59 26.1121 Q1342.61 26.1121 1346.22 28.0971 Q1349.82 30.082 1352.13 34.0924 L1352.13 27.2059 L1359.58 27.2059 L1359.58 66.9452 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip190)\" d=\"M1433.96 28.9478 L1433.96 35.9153 Q1430.8 34.1734 1427.6 33.3227 Q1424.44 32.4315 1421.2 32.4315 Q1413.95 32.4315 1409.94 37.0496 Q1405.93 41.6271 1405.93 49.9314 Q1405.93 58.2358 1409.94 62.8538 Q1413.95 67.4314 1421.2 67.4314 Q1424.44 67.4314 1427.6 66.5807 Q1430.8 65.6895 1433.96 63.9476 L1433.96 70.8341 Q1430.84 72.2924 1427.48 73.0216 Q1424.16 73.7508 1420.39 73.7508 Q1410.14 73.7508 1404.1 67.3098 Q1398.07 60.8689 1398.07 49.9314 Q1398.07 38.832 1404.14 32.472 Q1410.26 26.1121 1420.87 26.1121 Q1424.32 26.1121 1427.6 26.8413 Q1430.88 27.5299 1433.96 28.9478 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip190)\" d=\"M1464.5 32.4315 Q1458.51 32.4315 1455.02 37.1306 Q1451.54 41.7891 1451.54 49.9314 Q1451.54 58.0738 1454.98 62.7728 Q1458.47 67.4314 1464.5 67.4314 Q1470.46 67.4314 1473.94 62.7323 Q1477.43 58.0333 1477.43 49.9314 Q1477.43 41.8701 1473.94 37.1711 Q1470.46 32.4315 1464.5 32.4315 M1464.5 26.1121 Q1474.23 26.1121 1479.78 32.4315 Q1485.32 38.7509 1485.32 49.9314 Q1485.32 61.0714 1479.78 67.4314 Q1474.23 73.7508 1464.5 73.7508 Q1454.74 73.7508 1449.19 67.4314 Q1443.68 61.0714 1443.68 49.9314 Q1443.68 38.7509 1449.19 32.4315 Q1454.74 26.1121 1464.5 26.1121 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip190)\" d=\"M1535.39 45.1919 L1535.39 72.576 L1527.94 72.576 L1527.94 45.4349 Q1527.94 38.994 1525.43 35.7938 Q1522.92 32.5936 1517.89 32.5936 Q1511.86 32.5936 1508.37 36.4419 Q1504.89 40.2903 1504.89 46.9338 L1504.89 72.576 L1497.4 72.576 L1497.4 27.2059 L1504.89 27.2059 L1504.89 34.2544 Q1507.56 30.163 1511.17 28.1376 Q1514.82 26.1121 1519.55 26.1121 Q1527.37 26.1121 1531.38 30.9732 Q1535.39 35.7938 1535.39 45.1919 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip190)\" d=\"M1579.18 28.5427 L1579.18 35.5912 Q1576.02 33.9709 1572.62 33.1607 Q1569.22 32.3505 1565.57 32.3505 Q1560.02 32.3505 1557.23 34.0519 Q1554.47 35.7533 1554.47 39.156 Q1554.47 41.7486 1556.46 43.2475 Q1558.44 44.7058 1564.44 46.0426 L1566.99 46.6097 Q1574.93 48.3111 1578.25 51.4303 Q1581.61 54.509 1581.61 60.0587 Q1581.61 66.3781 1576.59 70.0644 Q1571.61 73.7508 1562.86 73.7508 Q1559.21 73.7508 1555.24 73.0216 Q1551.31 72.3329 1546.94 70.9151 L1546.94 63.2184 Q1551.07 65.3654 1555.08 66.4591 Q1559.09 67.5124 1563.02 67.5124 Q1568.29 67.5124 1571.12 65.73 Q1573.96 63.9071 1573.96 60.6258 Q1573.96 57.5877 1571.89 55.9673 Q1569.87 54.3469 1562.94 52.8481 L1560.35 52.2405 Q1553.42 50.7821 1550.34 47.7845 Q1547.26 44.7463 1547.26 39.4801 Q1547.26 33.0797 1551.8 29.5959 Q1556.34 26.1121 1564.68 26.1121 Q1568.81 26.1121 1572.46 26.7198 Q1576.11 27.3274 1579.18 28.5427 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip190)\" d=\"M1600.86 14.324 L1600.86 27.2059 L1616.21 27.2059 L1616.21 32.9987 L1600.86 32.9987 L1600.86 57.6282 Q1600.86 63.1779 1602.36 64.7578 Q1603.89 66.3376 1608.55 66.3376 L1616.21 66.3376 L1616.21 72.576 L1608.55 72.576 Q1599.92 72.576 1596.64 69.3758 Q1593.36 66.1351 1593.36 57.6282 L1593.36 32.9987 L1587.89 32.9987 L1587.89 27.2059 L1593.36 27.2059 L1593.36 14.324 L1600.86 14.324 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip190)\" d=\"M1652.3 34.1734 Q1651.05 33.4443 1649.55 33.1202 Q1648.09 32.7556 1646.31 32.7556 Q1639.99 32.7556 1636.59 36.8875 Q1633.22 40.9789 1633.22 48.6757 L1633.22 72.576 L1625.73 72.576 L1625.73 27.2059 L1633.22 27.2059 L1633.22 34.2544 Q1635.57 30.1225 1639.34 28.1376 Q1643.11 26.1121 1648.5 26.1121 Q1649.26 26.1121 1650.2 26.2337 Q1651.13 26.3147 1652.26 26.5172 L1652.3 34.1734 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip190)\" d=\"M1659.35 54.671 L1659.35 27.2059 L1666.81 27.2059 L1666.81 54.3874 Q1666.81 60.8284 1669.32 64.0691 Q1671.83 67.2693 1676.85 67.2693 Q1682.89 67.2693 1686.37 63.421 Q1689.9 59.5726 1689.9 52.9291 L1689.9 27.2059 L1697.35 27.2059 L1697.35 72.576 L1689.9 72.576 L1689.9 65.6084 Q1687.18 69.7404 1683.58 71.7658 Q1680.01 73.7508 1675.27 73.7508 Q1667.45 73.7508 1663.4 68.8897 Q1659.35 64.0286 1659.35 54.671 M1678.11 26.1121 L1678.11 26.1121 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip190)\" d=\"M1745.35 28.9478 L1745.35 35.9153 Q1742.19 34.1734 1738.99 33.3227 Q1735.83 32.4315 1732.59 32.4315 Q1725.34 32.4315 1721.33 37.0496 Q1717.32 41.6271 1717.32 49.9314 Q1717.32 58.2358 1721.33 62.8538 Q1725.34 67.4314 1732.59 67.4314 Q1735.83 67.4314 1738.99 66.5807 Q1742.19 65.6895 1745.35 63.9476 L1745.35 70.8341 Q1742.23 72.2924 1738.87 73.0216 Q1735.55 73.7508 1731.78 73.7508 Q1721.53 73.7508 1715.5 67.3098 Q1709.46 60.8689 1709.46 49.9314 Q1709.46 38.832 1715.54 32.472 Q1721.65 26.1121 1732.27 26.1121 Q1735.71 26.1121 1738.99 26.8413 Q1742.27 27.5299 1745.35 28.9478 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip190)\" d=\"M1765.69 14.324 L1765.69 27.2059 L1781.04 27.2059 L1781.04 32.9987 L1765.69 32.9987 L1765.69 57.6282 Q1765.69 63.1779 1767.19 64.7578 Q1768.73 66.3376 1773.38 66.3376 L1781.04 66.3376 L1781.04 72.576 L1773.38 72.576 Q1764.76 72.576 1761.47 69.3758 Q1758.19 66.1351 1758.19 57.6282 L1758.19 32.9987 L1752.72 32.9987 L1752.72 27.2059 L1758.19 27.2059 L1758.19 14.324 L1765.69 14.324 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip190)\" d=\"M1790.84 27.2059 L1798.3 27.2059 L1798.3 72.576 L1790.84 72.576 L1790.84 27.2059 M1790.84 9.54393 L1798.3 9.54393 L1798.3 18.9825 L1790.84 18.9825 L1790.84 9.54393 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip190)\" d=\"M1831.47 32.4315 Q1825.48 32.4315 1822 37.1306 Q1818.51 41.7891 1818.51 49.9314 Q1818.51 58.0738 1821.95 62.7728 Q1825.44 67.4314 1831.47 67.4314 Q1837.43 67.4314 1840.91 62.7323 Q1844.4 58.0333 1844.4 49.9314 Q1844.4 41.8701 1840.91 37.1711 Q1837.43 32.4315 1831.47 32.4315 M1831.47 26.1121 Q1841.2 26.1121 1846.75 32.4315 Q1852.3 38.7509 1852.3 49.9314 Q1852.3 61.0714 1846.75 67.4314 Q1841.2 73.7508 1831.47 73.7508 Q1821.71 73.7508 1816.16 67.4314 Q1810.65 61.0714 1810.65 49.9314 Q1810.65 38.7509 1816.16 32.4315 Q1821.71 26.1121 1831.47 26.1121 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip190)\" d=\"M1902.37 45.1919 L1902.37 72.576 L1894.91 72.576 L1894.91 45.4349 Q1894.91 38.994 1892.4 35.7938 Q1889.89 32.5936 1884.87 32.5936 Q1878.83 32.5936 1875.35 36.4419 Q1871.86 40.2903 1871.86 46.9338 L1871.86 72.576 L1864.37 72.576 L1864.37 27.2059 L1871.86 27.2059 L1871.86 34.2544 Q1874.54 30.163 1878.14 28.1376 Q1881.79 26.1121 1886.53 26.1121 Q1894.34 26.1121 1898.35 30.9732 Q1902.37 35.7938 1902.37 45.1919 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip190)\" d=\"M1961.18 32.4315 Q1955.19 32.4315 1951.71 37.1306 Q1948.22 41.7891 1948.22 49.9314 Q1948.22 58.0738 1951.66 62.7728 Q1955.15 67.4314 1961.18 67.4314 Q1967.14 67.4314 1970.62 62.7323 Q1974.11 58.0333 1974.11 49.9314 Q1974.11 41.8701 1970.62 37.1711 Q1967.14 32.4315 1961.18 32.4315 M1961.18 26.1121 Q1970.91 26.1121 1976.46 32.4315 Q1982.01 38.7509 1982.01 49.9314 Q1982.01 61.0714 1976.46 67.4314 Q1970.91 73.7508 1961.18 73.7508 Q1951.42 73.7508 1945.87 67.4314 Q1940.36 61.0714 1940.36 49.9314 Q1940.36 38.7509 1945.87 32.4315 Q1951.42 26.1121 1961.18 26.1121 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip190)\" d=\"M2017.33 9.54393 L2017.33 15.7418 L2010.2 15.7418 Q2006.19 15.7418 2004.61 17.3622 Q2003.07 18.9825 2003.07 23.1955 L2003.07 27.2059 L2015.35 27.2059 L2015.35 32.9987 L2003.07 32.9987 L2003.07 72.576 L1995.58 72.576 L1995.58 32.9987 L1988.45 32.9987 L1988.45 27.2059 L1995.58 27.2059 L1995.58 24.0462 Q1995.58 16.471 1999.1 13.0277 Q2002.63 9.54393 2010.28 9.54393 L2017.33 9.54393 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip190)\" d=\"M2078.86 28.5427 L2078.86 35.5912 Q2075.7 33.9709 2072.3 33.1607 Q2068.9 32.3505 2065.25 32.3505 Q2059.7 32.3505 2056.91 34.0519 Q2054.15 35.7533 2054.15 39.156 Q2054.15 41.7486 2056.14 43.2475 Q2058.12 44.7058 2064.12 46.0426 L2066.67 46.6097 Q2074.61 48.3111 2077.93 51.4303 Q2081.29 54.509 2081.29 60.0587 Q2081.29 66.3781 2076.27 70.0644 Q2071.29 73.7508 2062.54 73.7508 Q2058.89 73.7508 2054.92 73.0216 Q2050.99 72.3329 2046.62 70.9151 L2046.62 63.2184 Q2050.75 65.3654 2054.76 66.4591 Q2058.77 67.5124 2062.7 67.5124 Q2067.97 67.5124 2070.8 65.73 Q2073.64 63.9071 2073.64 60.6258 Q2073.64 57.5877 2071.57 55.9673 Q2069.55 54.3469 2062.62 52.8481 L2060.03 52.2405 Q2053.1 50.7821 2050.02 47.7845 Q2046.94 44.7463 2046.94 39.4801 Q2046.94 33.0797 2051.48 29.5959 Q2056.02 26.1121 2064.36 26.1121 Q2068.49 26.1121 2072.14 26.7198 Q2075.78 27.3274 2078.86 28.5427 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip190)\" d=\"M2092.39 54.671 L2092.39 27.2059 L2099.85 27.2059 L2099.85 54.3874 Q2099.85 60.8284 2102.36 64.0691 Q2104.87 67.2693 2109.89 67.2693 Q2115.93 67.2693 2119.41 63.421 Q2122.94 59.5726 2122.94 52.9291 L2122.94 27.2059 L2130.39 27.2059 L2130.39 72.576 L2122.94 72.576 L2122.94 65.6084 Q2120.22 69.7404 2116.62 71.7658 Q2113.05 73.7508 2108.31 73.7508 Q2100.5 73.7508 2096.44 68.8897 Q2092.39 64.0286 2092.39 54.671 M2111.15 26.1121 L2111.15 26.1121 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip190)\" d=\"M2168.71 9.54393 L2168.71 15.7418 L2161.58 15.7418 Q2157.57 15.7418 2155.99 17.3622 Q2154.45 18.9825 2154.45 23.1955 L2154.45 27.2059 L2166.73 27.2059 L2166.73 32.9987 L2154.45 32.9987 L2154.45 72.576 L2146.96 72.576 L2146.96 32.9987 L2139.83 32.9987 L2139.83 27.2059 L2146.96 27.2059 L2146.96 24.0462 Q2146.96 16.471 2150.48 13.0277 Q2154.01 9.54393 2161.66 9.54393 L2168.71 9.54393 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip190)\" d=\"M2197.92 9.54393 L2197.92 15.7418 L2190.79 15.7418 Q2186.78 15.7418 2185.2 17.3622 Q2183.66 18.9825 2183.66 23.1955 L2183.66 27.2059 L2195.93 27.2059 L2195.93 32.9987 L2183.66 32.9987 L2183.66 72.576 L2176.17 72.576 L2176.17 32.9987 L2169.04 32.9987 L2169.04 27.2059 L2176.17 27.2059 L2176.17 24.0462 Q2176.17 16.471 2179.69 13.0277 Q2183.21 9.54393 2190.87 9.54393 L2197.92 9.54393 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip190)\" d=\"M2204.16 27.2059 L2211.61 27.2059 L2211.61 72.576 L2204.16 72.576 L2204.16 27.2059 M2204.16 9.54393 L2211.61 9.54393 L2211.61 18.9825 L2204.16 18.9825 L2204.16 9.54393 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip190)\" d=\"M2264.92 27.2059 L2248.52 49.2833 L2265.77 72.576 L2256.98 72.576 L2243.78 54.752 L2230.57 72.576 L2221.78 72.576 L2239.4 48.8377 L2223.28 27.2059 L2232.07 27.2059 L2244.1 43.369 L2256.13 27.2059 L2264.92 27.2059 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip190)\" d=\"M2312.56 48.0275 L2312.56 51.6733 L2278.29 51.6733 Q2278.78 59.3701 2282.91 63.421 Q2287.08 67.4314 2294.49 67.4314 Q2298.79 67.4314 2302.8 66.3781 Q2306.85 65.3249 2310.82 63.2184 L2310.82 70.267 Q2306.81 71.9684 2302.59 72.8596 Q2298.38 73.7508 2294.05 73.7508 Q2283.19 73.7508 2276.83 67.4314 Q2270.51 61.1119 2270.51 50.3365 Q2270.51 39.1965 2276.51 32.6746 Q2282.54 26.1121 2292.75 26.1121 Q2301.91 26.1121 2307.21 32.0264 Q2312.56 37.9003 2312.56 48.0275 M2305.11 45.84 Q2305.03 39.7232 2301.66 36.0774 Q2298.34 32.4315 2292.83 32.4315 Q2286.59 32.4315 2282.83 35.9558 Q2279.1 39.4801 2278.53 45.8805 L2305.11 45.84 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><path clip-path=\"url(#clip190)\" d=\"M2353.72 28.5427 L2353.72 35.5912 Q2350.56 33.9709 2347.15 33.1607 Q2343.75 32.3505 2340.11 32.3505 Q2334.56 32.3505 2331.76 34.0519 Q2329.01 35.7533 2329.01 39.156 Q2329.01 41.7486 2330.99 43.2475 Q2332.98 44.7058 2338.97 46.0426 L2341.52 46.6097 Q2349.46 48.3111 2352.79 51.4303 Q2356.15 54.509 2356.15 60.0587 Q2356.15 66.3781 2351.12 70.0644 Q2346.14 73.7508 2337.39 73.7508 Q2333.75 73.7508 2329.78 73.0216 Q2325.85 72.3329 2321.47 70.9151 L2321.47 63.2184 Q2325.6 65.3654 2329.61 66.4591 Q2333.62 67.5124 2337.55 67.5124 Q2342.82 67.5124 2345.66 65.73 Q2348.49 63.9071 2348.49 60.6258 Q2348.49 57.5877 2346.43 55.9673 Q2344.4 54.3469 2337.47 52.8481 L2334.88 52.2405 Q2327.95 50.7821 2324.87 47.7845 Q2321.8 44.7463 2321.8 39.4801 Q2321.8 33.0797 2326.33 29.5959 Q2330.87 26.1121 2339.21 26.1121 Q2343.35 26.1121 2346.99 26.7198 Q2350.64 27.3274 2353.72 28.5427 Z\" fill=\"#000000\" fill-rule=\"evenodd\" fill-opacity=\"1\" /><circle clip-path=\"url(#clip192)\" cx=\"166.42\" cy=\"1464.44\" r=\"14.4\" fill=\"#009af9\" fill-rule=\"evenodd\" fill-opacity=\"1\" stroke=\"#000000\" stroke-opacity=\"1\" stroke-width=\"3.2\"/>\n<circle clip-path=\"url(#clip192)\" cx=\"278.139\" cy=\"1392.83\" r=\"14.4\" fill=\"#009af9\" fill-rule=\"evenodd\" fill-opacity=\"1\" stroke=\"#000000\" stroke-opacity=\"1\" stroke-width=\"3.2\"/>\n<circle clip-path=\"url(#clip192)\" cx=\"389.857\" cy=\"1321.22\" r=\"14.4\" fill=\"#009af9\" fill-rule=\"evenodd\" fill-opacity=\"1\" stroke=\"#000000\" stroke-opacity=\"1\" stroke-width=\"3.2\"/>\n<circle clip-path=\"url(#clip192)\" cx=\"501.576\" cy=\"1249.6\" r=\"14.4\" fill=\"#009af9\" fill-rule=\"evenodd\" fill-opacity=\"1\" stroke=\"#000000\" stroke-opacity=\"1\" stroke-width=\"3.2\"/>\n<circle clip-path=\"url(#clip192)\" cx=\"613.295\" cy=\"1177.99\" r=\"14.4\" fill=\"#009af9\" fill-rule=\"evenodd\" fill-opacity=\"1\" stroke=\"#000000\" stroke-opacity=\"1\" stroke-width=\"3.2\"/>\n<circle clip-path=\"url(#clip192)\" cx=\"725.014\" cy=\"1106.38\" r=\"14.4\" fill=\"#009af9\" fill-rule=\"evenodd\" fill-opacity=\"1\" stroke=\"#000000\" stroke-opacity=\"1\" stroke-width=\"3.2\"/>\n<circle clip-path=\"url(#clip192)\" cx=\"836.732\" cy=\"1034.77\" r=\"14.4\" fill=\"#009af9\" fill-rule=\"evenodd\" fill-opacity=\"1\" stroke=\"#000000\" stroke-opacity=\"1\" stroke-width=\"3.2\"/>\n<circle clip-path=\"url(#clip192)\" cx=\"948.451\" cy=\"963.156\" r=\"14.4\" fill=\"#009af9\" fill-rule=\"evenodd\" fill-opacity=\"1\" stroke=\"#000000\" stroke-opacity=\"1\" stroke-width=\"3.2\"/>\n<circle clip-path=\"url(#clip192)\" cx=\"1060.17\" cy=\"891.544\" r=\"14.4\" fill=\"#009af9\" fill-rule=\"evenodd\" fill-opacity=\"1\" stroke=\"#000000\" stroke-opacity=\"1\" stroke-width=\"3.2\"/>\n<circle clip-path=\"url(#clip192)\" cx=\"1171.89\" cy=\"819.932\" r=\"14.4\" fill=\"#009af9\" fill-rule=\"evenodd\" fill-opacity=\"1\" stroke=\"#000000\" stroke-opacity=\"1\" stroke-width=\"3.2\"/>\n<circle clip-path=\"url(#clip192)\" cx=\"1283.61\" cy=\"748.32\" r=\"14.4\" fill=\"#009af9\" fill-rule=\"evenodd\" fill-opacity=\"1\" stroke=\"#000000\" stroke-opacity=\"1\" stroke-width=\"3.2\"/>\n<circle clip-path=\"url(#clip192)\" cx=\"1395.33\" cy=\"676.708\" r=\"14.4\" fill=\"#009af9\" fill-rule=\"evenodd\" fill-opacity=\"1\" stroke=\"#000000\" stroke-opacity=\"1\" stroke-width=\"3.2\"/>\n<circle clip-path=\"url(#clip192)\" cx=\"1507.04\" cy=\"605.096\" r=\"14.4\" fill=\"#009af9\" fill-rule=\"evenodd\" fill-opacity=\"1\" stroke=\"#000000\" stroke-opacity=\"1\" stroke-width=\"3.2\"/>\n<circle clip-path=\"url(#clip192)\" cx=\"1618.76\" cy=\"533.484\" r=\"14.4\" fill=\"#009af9\" fill-rule=\"evenodd\" fill-opacity=\"1\" stroke=\"#000000\" stroke-opacity=\"1\" stroke-width=\"3.2\"/>\n<circle clip-path=\"url(#clip192)\" cx=\"1730.48\" cy=\"461.872\" r=\"14.4\" fill=\"#009af9\" fill-rule=\"evenodd\" fill-opacity=\"1\" stroke=\"#000000\" stroke-opacity=\"1\" stroke-width=\"3.2\"/>\n<circle clip-path=\"url(#clip192)\" cx=\"1842.2\" cy=\"390.259\" r=\"14.4\" fill=\"#009af9\" fill-rule=\"evenodd\" fill-opacity=\"1\" stroke=\"#000000\" stroke-opacity=\"1\" stroke-width=\"3.2\"/>\n<circle clip-path=\"url(#clip192)\" cx=\"1953.92\" cy=\"318.647\" r=\"14.4\" fill=\"#009af9\" fill-rule=\"evenodd\" fill-opacity=\"1\" stroke=\"#000000\" stroke-opacity=\"1\" stroke-width=\"3.2\"/>\n<circle clip-path=\"url(#clip192)\" cx=\"2065.64\" cy=\"247.035\" r=\"14.4\" fill=\"#009af9\" fill-rule=\"evenodd\" fill-opacity=\"1\" stroke=\"#000000\" stroke-opacity=\"1\" stroke-width=\"3.2\"/>\n<circle clip-path=\"url(#clip192)\" cx=\"2177.36\" cy=\"175.423\" r=\"14.4\" fill=\"#009af9\" fill-rule=\"evenodd\" fill-opacity=\"1\" stroke=\"#000000\" stroke-opacity=\"1\" stroke-width=\"3.2\"/>\n<circle clip-path=\"url(#clip192)\" cx=\"2289.08\" cy=\"103.811\" r=\"14.4\" fill=\"#009af9\" fill-rule=\"evenodd\" fill-opacity=\"1\" stroke=\"#000000\" stroke-opacity=\"1\" stroke-width=\"3.2\"/>\n</svg>\n","category":"page"},{"location":"generated/suffixes/","page":"Generating Suffixes","title":"Generating Suffixes","text":"","category":"page"},{"location":"generated/suffixes/","page":"Generating Suffixes","title":"Generating Suffixes","text":"This page was generated using Literate.jl.","category":"page"},{"location":"lists/","page":"Lists","title":"Lists","text":"CurrentModule = PureFun\nDocSetup = quote using PureFun end","category":"page"},{"location":"lists/#Lists","page":"Lists","title":"Lists","text":"","category":"section"},{"location":"lists/","page":"Lists","title":"Lists","text":"Provide efficient access to the front element, and can efficiently add and remove elements from the front. Sometimes also called a \"stack.\" Primary operations:","category":"page"},{"location":"lists/","page":"Lists","title":"Lists","text":"first(xs): get the first element of xs\npopfirst(xs): returns a new list that looks like xs but with the first element removed\npushfirst(xs, x): returns a new list with x added to the front of xs. The infix operator ⇀ (pronounced \\rightharpoonup) is often more convenient. Note that it is right-associative, so x ⇀ y ⇀ zs is equivalent to pushfirst(pushfirst(zs, y), x)","category":"page"},{"location":"lists/","page":"Lists","title":"Lists","text":"Additionally, PureFun.jl implements default implementations of a variety of Abstract Vector-like methods for list types, though they are not necessarily efficient. All of these functions have similar meanings to their mutating (with a ! at the end of the function name) counterparts in Base. When these functions are already present in StaticArrays.jl, PureFun.jl just adds methods to the existing functions.","category":"page"},{"location":"lists/","page":"Lists","title":"Lists","text":"reverse\ninsert\ngetindex (xs[i] to get the i-th element of xs)\nsetindex (help wanted: nice syntax for non-mutating setindex)\nappend (use the infix notation xs ⧺ ys to append ys to the end of xs)","category":"page"},{"location":"lists/","page":"Lists","title":"Lists","text":"Lists iterate in LIFO order, and work with a variety of built-in higher-order functions:","category":"page"},{"location":"lists/","page":"Lists","title":"Lists","text":"eager versions of map, filter, accumulate\n(map)foldl, (map)foldr, (map)reduce","category":"page"},{"location":"lists/","page":"Lists","title":"Lists","text":"All of the lists types provide the same functionality and interface, but different implementations are optimized for different use-cases and types of operations. For example, getting or setting an index in a linked list usually takes mathcalO(n) time, but PureFun.RandomAccess.List provides indexing operations that take mathcalO(log_2n). All of the list implementations in PureFun.jl inherit from the abstract type PureFun.PFList. Complexities presented below are worst-case, unless stated otherwise.","category":"page"},{"location":"lists/#Linked.List-(\\S{2.1})","page":"Lists","title":"Linked.List (S21)","text":"","category":"section"},{"location":"lists/","page":"Lists","title":"Lists","text":"Linked.List","category":"page"},{"location":"lists/#PureFun.Linked.List","page":"Lists","title":"PureFun.Linked.List","text":"Linked.List{T}()\nLinked.List(iter)\n\nThe Linked.List (S21) is the simplest of the list types, and the fastest for the primary operations, which are all mathcalO(1).\n\nExamples\n\njulia> using PureFun, PureFun.Linked\njulia> l = Linked.List(1:3)\n3-element PureFun.Linked.NonEmpty{Int64}\n1\n2\n3\n\n\njulia> m = pushfirst(l, 10)\n4-element PureFun.Linked.NonEmpty{Int64}\n10\n1\n2\n3\n\n\njulia> first(l)\n1\n\njulia> first(m)\n10\n\njulia> popfirst(m) == l\ntrue\n\n\n\n\n\n","category":"type"},{"location":"lists/#RandomAccess.List-(\\S{9.3.1})","page":"Lists","title":"RandomAccess.List (S931)","text":"","category":"section"},{"location":"lists/","page":"Lists","title":"Lists","text":"RandomAccess.List","category":"page"},{"location":"lists/#PureFun.RandomAccess.List","page":"Lists","title":"PureFun.RandomAccess.List","text":"RandomAccess.List{T}()\nRandomAccess.List(iter)\n\nA RandomAccess.List (S932) adds efficient (mathcalO(logn)) indexing (getindex and setindex) operations to the mathcalO(1) primary operations. The implementation stores elements in complete binary trees representing digits in the skew binary number system, as described in this blog post.\n\nExamples\n\njulia> rl = PureFun.RandomAccess.List(1:1_000)\n1\n2\n3\n4\n5\n6\n7\n...\n\n\njulia> rl[937]\n937\n\n\n\n\n\n","category":"type"},{"location":"lists/#Catenable.List-(\\S{10.2.1})","page":"Lists","title":"Catenable.List (S1021)","text":"","category":"section"},{"location":"lists/","page":"Lists","title":"Lists","text":"Catenable.List","category":"page"},{"location":"lists/#PureFun.Catenable.List","page":"Lists","title":"PureFun.Catenable.List","text":"Catenable.List{T}()\nCatenable.List(iter)\n\nA Catenable.List (S1021) supports the usual list operations, but unlike the Linked.List you can append two catenable lists in constant time. These lists are presented in section 10.2.1 of the book, as an example of data-structural bootstrapping. In addition to list functions, catenable lists also support push. Catenable lists work by maintaining the head element plus a queue of catenable lists. Each element of this queue is suspended. first takes constant time, while pushfirst, popfirst, push, and ⧺ require amortized (rather than worst-case) constant time.\n\nExamples\n\njulia> a = PureFun.Catenable.List(1:3);\n\njulia> b = PureFun.Catenable.List(4:5);\n\njulia> a ⧺ b\n1\n2\n7\n4\n5\n\n\n\n\n\n","category":"type"},{"location":"lists/#VectorCopy.List:-an-immutable-wrapper-for-Base.Vector","page":"Lists","title":"VectorCopy.List: an immutable wrapper for Base.Vector","text":"","category":"section"},{"location":"lists/","page":"Lists","title":"Lists","text":"VectorCopy.List","category":"page"},{"location":"lists/#PureFun.VectorCopy.List","page":"Lists","title":"PureFun.VectorCopy.List","text":"VectorCopy.List{T}()\nVectorCopy.List(iter)\n\nVectorCopy.List is a wrapper around Base.Vector with copy-on-write semantics. pushfirst is mathcalO(n), but iteration and indexing are very fast. Useful for small lists, or for lists that are traversed frequently relative to how often they are modified.\n\n\n\n\n\n","category":"type"},{"location":"lists/#CPU-cache-friendly-lists:-Chunky.@list","page":"Lists","title":"CPU-cache friendly lists: Chunky.@list","text":"","category":"section"},{"location":"lists/","page":"Lists","title":"Lists","text":"Pointer-based data structures are at a disadvantage performance-wise when compared to arrays and vectors. Memory accesses are high-latency operations, so that observed performance will be determined by the number of cache misses regardless of the on-paper complexity guarantees of an algorithm. The VectorCopy.List gets around this issue by storing adjacent list values physically close to each other in contiguous memory, but write operations require allocating mathcalO(n) memory, which quickly becomes prohibitive. The unrolled linked list strikes a compromise between the two extremes by storing chunks of values together in each list cell. PureFun.Chunky.@list converts any list type to a \"chunky\" version, using one of the chunk types provided by PureFun.Contiguous:","category":"page"},{"location":"lists/","page":"Lists","title":"Lists","text":"Contiguous.StaticChunk{N}: Backed by StaticArrays.SVector\nContiguous.VectorChunk{N}: Backed by Base.Vector","category":"page"},{"location":"lists/","page":"Lists","title":"Lists","text":"Chunky.@list","category":"page"},{"location":"lists/#PureFun.Chunky.@list","page":"Lists","title":"PureFun.Chunky.@list","text":"Chunky.@list Name ListType ChunkType\n\nCreates a new list type (implements all list functions and inherits from PureFun.PFList) by assembling a list (of type ListType) of chunks (of type ChunkType). Assuming ChunkType stores chunk elements contiguously, the resulting list will have improved iteration performance. PureFun.Contiguous.VectorChunk and PureFun.Contiguous.StaticChunk implement the chunk type and can be used in chunky lists.\n\nExamples\n\nThis example creates a chunky list called ChunkyList consisting of (up to) 16-element chunks stored contiguously in memory as static arrays, linked together via a linked list. The resulting list has the same interface as any other list type in PureFun.jl:\n\njulia> using PureFun, PureFun.Linked, PureFun.Chunky, PureFun.Contiguous\n\njulia> Chunky.@list ChunkyList Linked.List Contiguous.StaticChunk{16}\n\njulia> clist = ChunkyList(1:100)\n100-element ChunkyList{Int64}\n1\n2\n3\n4\n5\n6\n7\n...\n\njulia> clist[18]\n18\n\njulia> mapfoldl(sqrt, +, clist)\n671.4629471031477\n\nSimilarly, the following example uses PureFun.RandomAccess.Lists and chunks of Base.Vector:\n\njulia> using PureFun, PureFun.RandomAccess, PureFun.Chunky, PureFun.Contiguous\n\njulia> Chunky.@list CRList RandomAccess.List Contiguous.VectorChunk{256}\n\njulia> em = CRList{Float64}()\n0-element CRList{Float64}\n\n\njulia> 1.0 ⇀ 2.0 ⇀ em\n2-element CRList{Float64}\n1.0\n2.0\n\n\n\n\n\n\n","category":"macro"},{"location":"lists/","page":"Lists","title":"Lists","text":"For more on cache-friendly data structures and the role of cache misses on performance:","category":"page"},{"location":"lists/","page":"Lists","title":"Lists","text":"Data Locality\nGoing nowhere faster \nGallery of processor cache effects","category":"page"},{"location":"lists/#Custom-double-ended-queue:-\\S{5.2}-(excercise-5.1)","page":"Lists","title":"Custom double-ended queue: S52 (excercise 5.1)","text":"","category":"section"},{"location":"lists/","page":"Lists","title":"Lists","text":"Batched.@deque","category":"page"},{"location":"lists/#PureFun.Batched.@deque","page":"Lists","title":"PureFun.Batched.@deque","text":"Batched.@deque Name ListType\n\nDeques are like lists but with symmetric efficient operations on the front (pushfirst, popfirst, first) and the back (push, pop, last). The Batched.@deque functor takes any existing list implementation (ListType), and makes it double-ended. The Batched.@deque works by batching occasional reversals (which are mathcalO(n)) so that all operations require amortized constant time.\n\nExamples\n\njulia> Batched.@deque Deque PureFun.Linked.List\n\njulia> d = Deque{Int}()\n0-element Deque{Int64}\n\n\njulia> 1 ⇀ 2 ⇀ 3 ⇀ d\n3-element Deque{Int64}\n1\n2\n3\n\n\njulia> alpha = Deque('a':'z')\n26-element Deque{Char}\na\nb\nc\nd\ne\nf\ng\n...\n\njulia> first(alpha), last(alpha)\n('a', 'z')\n\njulia> alpha |> pop |> last\n'y': ASCII/Unicode U+0079 (category Ll: Letter, lowercase)\n\njulia> alpha |> popfirst |> first\n'b': ASCII/Unicode U+0062 (category Ll: Letter, lowercase)\n\n\n\n\n\n","category":"macro"},{"location":"lists/#Function-reference","page":"Lists","title":"Function reference","text":"","category":"section"},{"location":"lists/","page":"Lists","title":"Lists","text":"PureFun.pushfirst(::PureFun.PFList, x)\nPureFun.popfirst(::PureFun.PFListy)\nPureFun.append\nPureFun.insert(::PureFun.PFList, i, v)\nPureFun.setindex(::PureFun.PFList, v, i)\nPureFun.halfish","category":"page"},{"location":"lists/#StaticArrays.pushfirst-Tuple{PureFun.PFList, Any}","page":"Lists","title":"StaticArrays.pushfirst","text":"cons(x, xs::PFList)\npushfirst(xs::PFList, x)\nx ⇀ xs\n\nReturn the PFList that results from adding x to the front of xs.\n\n\n\n\n\n","category":"method"},{"location":"lists/#StaticArrays.popfirst-Tuple{Union{PureFun.PFList{T}, PureFun.PFQueue{T}, PureFun.PFStream{T}} where T}","page":"Lists","title":"StaticArrays.popfirst","text":"popfirst(xs)\n\nReturn the collection xs without its first element (without modifying xs).\n\n\n\n\n\n","category":"method"},{"location":"lists/#PureFun.append","page":"Lists","title":"PureFun.append","text":"append(xs, ys)\nxs ⧺ ys\n\nConcatenate two PFLists.\n\njulia> l1 = PureFun.Linked.List(1:3);\n\njulia> l2 = PureFun.Linked.List(4:6);\n\njulia> l1 ⧺ l2\n1\n2\n3\n4\n5\n6\n\n\n\n\n\n\n","category":"function"},{"location":"lists/#StaticArrays.insert-Tuple{PureFun.PFList, Any, Any}","page":"Lists","title":"StaticArrays.insert","text":"insert(list::PFList, ix, v)\n\nReturn a new list with the element v inserted at index ix.\n\n\n\n\n\n","category":"method"},{"location":"lists/#Base.setindex-Tuple{PureFun.PFList, Any, Any}","page":"Lists","title":"Base.setindex","text":"setindex(l::PFList, newval, ind)\n\nReturn a new list with the value at index ind set to newval\n\nExamples\n\njulia> using PureFun, PureFun.RandomAccess\n\njulia> l = RandomAccess.List(1:10)\n10-element PureFun.RandomAccess.List{Int64}\n1\n2\n3\n4\n5\n6\n7\n...\n\njulia> setindex(l, 99, 4)\n10-element PureFun.RandomAccess.List{Int64}\n1\n2\n3\n99\n5\n6\n7\n...\n\n\n\n\n\n\n","category":"method"},{"location":"lists/#PureFun.halfish","page":"Lists","title":"PureFun.halfish","text":"halfish(xs)\n\nSplit xs roughly in half, and return the two halves as a tuple (front, back).\n\nExamples\n\njulia< using PureFun\njulia> l = PureFun.Linked.List(1:100)\n100-element PureFun.Linked.NonEmpty{Int64}\n1\n2\n3\n4\n5\n6\n7\n...\n\njulia> halves = halfish(l)\n(1, 2, 3, 4, 5, ..., 51, 52, 53, 54, 55, ...)\n\njulia> length(halves[1]), length(halves[2])\n(50, 50)\n\njulia> halves[2]\n50-element PureFun.Linked.NonEmpty{Int64}\n51\n52\n53\n54\n55\n56\n57\n...\n\n\n\n\n\n","category":"function"},{"location":"heaps/","page":"Heaps","title":"Heaps","text":"CurrentModule = PureFun\nDocSetup = quote using PureFun end","category":"page"},{"location":"heaps/#Heaps","page":"Heaps","title":"Heaps","text":"","category":"section"},{"location":"heaps/","page":"Heaps","title":"Heaps","text":"Heaps, also known as priority queues, provide efficient access to the minimum element in a collection, and an efficient delete-the-minimum operation as well as a merge operation that takes two heaps and returns one.","category":"page"},{"location":"heaps/","page":"Heaps","title":"Heaps","text":"We define \"minimum\" with respect to an Ordering type parameter, so heaps are parameterized by both the element type and the ordering.","category":"page"},{"location":"heaps/","page":"Heaps","title":"Heaps","text":"Heaps in PureFun.jl inherit from the abstract type PureFun.PFHeap. The full interface:","category":"page"},{"location":"heaps/","page":"Heaps","title":"Heaps","text":"push(xs, x) returns a new heap containing x as well as all elements in xs\nminimum\ndelete_min\nmerge","category":"page"},{"location":"heaps/","page":"Heaps","title":"Heaps","text":"Heaps iterate in sorted order, so first(xs::Heap) == minimum(xs)","category":"page"},{"location":"heaps/","page":"Heaps","title":"Heaps","text":"If not specified, the ordering for a heap defaults to Base.Order.Forward. Heap constructors are like the constructors for lists and queues, but take the ordering as an additional optional argument.","category":"page"},{"location":"heaps/#Pairing.Heap-\\S{5.5}","page":"Heaps","title":"Pairing.Heap S55","text":"","category":"section"},{"location":"heaps/","page":"Heaps","title":"Heaps","text":"The Pairing.Heap is very fast, but requires occasional expensive rebalancing operations to maintain efficient access to the minimum element, and should be used when the data structure has only a single logical future (see the discussion in Queues for more information about this concept). Otherwise, try the SkewBinomial.Heap or the BootstrappedSkewBinomial.Heap","category":"page"},{"location":"heaps/","page":"Heaps","title":"Heaps","text":"Pairing.Heap","category":"page"},{"location":"heaps/#PureFun.Pairing.Heap","page":"Heaps","title":"PureFun.Pairing.Heap","text":"Pairing.Heap{T}(o::Base.Order.Ordering=Base.Order.Forward)\nPairing.Heap(iter, ord=Base.Order.Forward)\n\nPairing heaps (S55):\n\n... are one of those data structures that drive theoreticians crazy. On the one hand, pairing heaps are simple to implement and perform extremely well in practice. On the other hand, they have resisted analysis for over ten years!\n\npush, merge, and minimum all run in mathcalO(1) worst-case time. delete_min can take mathcalO(n) time in the worst-case. However, it has been proven that the amortized time required by delete_min is no worse than mathcalO(logn), and there is an open conjecture that it is in fact mathcalO(1). The amortized bounds here do not apply in persistent settings. For heaps suited to persistent use-cases, see PureFun.SkewBinomial.Heap and PureFun.BootstrappedSkewBinomial.Heap\n\nExamples\n\njulia> using PureFun, PureFun.Pairing\njulia> xs = [5, 3, 1, 4, 2];\n\njulia> Pairing.Heap(xs)\n5-element PureFun.Pairing.NonEmpty{Int64, Base.Order.ForwardOrdering}\n1\n2\n3\n4\n5\n\n\njulia> Pairing.Heap(xs, Base.Order.Reverse)\n5-element PureFun.Pairing.NonEmpty{Int64, Base.Order.ReverseOrdering{Base.Order.ForwardOrdering}}\n5\n4\n3\n2\n1\n\n\njulia> empty = Pairing.Heap{Int}(Base.Order.Reverse);\njulia> reduce(push, xs, init=empty)\n5-element PureFun.Pairing.NonEmpty{Int64, Base.Order.ReverseOrdering{Base.Order.ForwardOrdering}}\n5\n4\n3\n2\n1\n\n\n\n\n\n","category":"type"},{"location":"heaps/#SkewBinomial.Heap-\\S{9.3.2}","page":"Heaps","title":"SkewBinomial.Heap S932","text":"","category":"section"},{"location":"heaps/","page":"Heaps","title":"Heaps","text":"SkewBinomial.Heap","category":"page"},{"location":"heaps/#PureFun.SkewBinomial.Heap","page":"Heaps","title":"PureFun.SkewBinomial.Heap","text":"SkewBinomial.Heap{T}(o=Base.Order.Forward)\nSkewBinomial.Heap(iter, o=Base.Order.Forward)\n\nThe Skew Binomial Heap S932 is a twist on the Binomial Heap: by basing tree sizes on skew-binary (rather than binary) numbers, pushing a new element into a skew binomial heap is worst-case mathcalO(1) (as opposed to mathcalO(logn) for binomial heaps). merge, delete_min, and minimum are worst-case mathcalO(logn). See also PureFun.BootstrappedSkewBinomial.Heap, which uses structural abstraction to improve minimum and merge to worst-case mathcalO(1)\n\n\n\n\n\n","category":"type"},{"location":"heaps/#BootstrappedSkewBinomial.Heap-\\S{10.2.2}","page":"Heaps","title":"BootstrappedSkewBinomial.Heap S1022","text":"","category":"section"},{"location":"heaps/","page":"Heaps","title":"Heaps","text":"BootstrappedSkewBinomial.Heap","category":"page"},{"location":"heaps/#PureFun.BootstrappedSkewBinomial.Heap","page":"Heaps","title":"PureFun.BootstrappedSkewBinomial.Heap","text":"BootstrappedSkewBinomial.Heap{T}(ord=Base.Order.Forward)\nBootstrappedSkewBinomial.Heap(iter, ord=Base.Order.Forward)\n\nSection S1022 of Purely Functional Data Structures demonstrates how to use structural abstraction to take a heap implementation with mathcalO(1) push and improve the running time of merge and minimum to mathcalO(1). The BootStrappedSkewBinomial.Heap uses the technique on the PureFun.SkewBinomial.Heap.\n\n\n\n\n\n","category":"type"},{"location":"heaps/#Function-reference","page":"Heaps","title":"Function reference","text":"","category":"section"},{"location":"heaps/","page":"Heaps","title":"Heaps","text":"PureFun.minimum(::PFHeap)\nPureFun.delete_min\nPureFun.push(::PFHeap, x)\nBase.merge(::PFHeap, ::PFHeap)","category":"page"},{"location":"heaps/#Base.minimum-Tuple{PureFun.PFHeap}","page":"Heaps","title":"Base.minimum","text":"minimum(xs::PFHeap)\n\nReturn the smallest element in xs, according to its ordering. Since heaps iterate in order, this is identical to first for heaps.\n\n\n\n\n\n","category":"method"},{"location":"heaps/#PureFun.delete_min","page":"Heaps","title":"PureFun.delete_min","text":"delete_min(xs::PFHeap)\n\nreturn a new heap that is the result of deleting the minimum element from xs, according to the ordering of xs.\n\n\n\n\n\n","category":"function"},{"location":"heaps/#StaticArrays.push-Tuple{PureFun.PFHeap, Any}","page":"Heaps","title":"StaticArrays.push","text":"push(xs::PFHeap, x)\n\nReturn the PFHeap that results from adding x to the collection.\n\n\n\n\n\n","category":"method"},{"location":"heaps/#Base.merge-Tuple{PureFun.PFHeap, PureFun.PFHeap}","page":"Heaps","title":"Base.merge","text":"merge(xs::PFHeap, ys::PFHeap)\n\nReturn a new heap with the merged contents of xs and ys (xs and ys must have the same ordering)\n\n\n\n\n\n","category":"method"},{"location":"contiguous/","page":"Small size optimizations","title":"Small size optimizations","text":"CurrentModule = PureFun\nDocSetup = quote using PureFun end","category":"page"},{"location":"contiguous/#PureFun.Contiguous-for-small-size-optimizations","page":"Small size optimizations","title":"PureFun.Contiguous for small size optimizations","text":"","category":"section"},{"location":"contiguous/","page":"Small size optimizations","title":"Small size optimizations","text":"PureFun.Contiguous","category":"page"},{"location":"contiguous/#PureFun.Contiguous","page":"Small size optimizations","title":"PureFun.Contiguous","text":"PureFun.Contiguous implements small-sized versions of lists, sets, and dictionaries. These structures maintain data in contiguous storage, allowing them to leverage the CPU cache to improve the performance of indexing and iteration.\n\n\n\n\n\n","category":"module"},{"location":"contiguous/#Chunks:-densely-packed-lists","page":"Small size optimizations","title":"Chunks: densely packed lists","text":"","category":"section"},{"location":"contiguous/","page":"Small size optimizations","title":"Small size optimizations","text":"PureFun.Contiguous.StaticChunk\nPureFun.Contiguous.VectorChunk","category":"page"},{"location":"contiguous/#PureFun.Contiguous.StaticChunk","page":"Small size optimizations","title":"PureFun.Contiguous.StaticChunk","text":"StaticChunk{N,T}\nStaticChunk{N}(iter)\n\nBacked by Static Arrays, StaticChunks implement all list functions but are constrained to a maximum size. Useful in conjunction with PureFun.Chunky.@list, which chains together small chunks to build general list types that benefit from data locality.\n\nExamples\n\nThis example builds a list with maximum length 8. Until we hit the maximum length, we can use the StaticChunk like any other list type:\n\njulia> xs = Contiguous.StaticChunk{8}(1:3)\n3-element PureFun.Contiguous.StaticChunk{8, Int64}\n1\n2\n3\n\njulia> 41 ⇀ 42 ⇀ xs\n5-element PureFun.Contiguous.StaticChunk{8, Int64}\n41\n42\n1\n2\n3\n\njulia> popfirst(xs)\n2-element PureFun.Contiguous.StaticChunk{8, Int64}\n2\n3\n\n\n\n\n\n","category":"type"},{"location":"contiguous/#PureFun.Contiguous.VectorChunk","page":"Small size optimizations","title":"PureFun.Contiguous.VectorChunk","text":"VectorChunk{N,T}\nVectorChunk{N}(iter)\n\nBacked by Base.Vector, VectorChunks implement all list functions but are constrained to a maximum size. Useful in conjunction with PureFun.Chunky.@list, which chains together small chunks to build general list types that benefit from data locality.\n\nExamples\n\nThis example builds a list with maximum length 128. Until we hit the maximum length, we can use the VectorChunk like any other list type:\n\njulia> using PureFun, PureFun.Contiguous\njulia> xs = Contiguous.VectorChunk{128}(1:3)\n3-element PureFun.Contiguous.VectorChunk{128, Int64}\n1\n2\n3\n\n\njulia> (41 ⇀ 42 ⇀ xs) ⧺ xs\n8-element PureFun.Contiguous.VectorChunk{128, Int64}\n41\n42\n1\n2\n3\n1\n2\n...\n\n\n\n\n\n\n","category":"type"},{"location":"contiguous/#Bits:-a-set-requiring-one-integer-worth-of-storage","page":"Small size optimizations","title":"Bits: a set requiring one integer worth of storage","text":"","category":"section"},{"location":"contiguous/","page":"Small size optimizations","title":"Small size optimizations","text":"PureFun.Contiguous.Bits","category":"page"},{"location":"contiguous/#PureFun.Contiguous.Bits","page":"Small size optimizations","title":"PureFun.Contiguous.Bits","text":"A sparse set with small integer elements.\n\nExamples\n\njulia> b = PureFun.Contiguous.Bits{UInt16}()\n0000000000000000\n\n# the 1s in the bitstring mark the elements that are present\njulia> b = reduce(push, [1,9,4,15,15], init=b)\n0100000100001001\n\n\njulia> 15 ∈ b, 4 ∈ b, 2 ∈ b\n(true, true, false)\n\n\n\n\n\n","category":"type"},{"location":"contiguous/#bitmap:-a-small-dictionary","page":"Small size optimizations","title":"bitmap: a small dictionary","text":"","category":"section"},{"location":"contiguous/","page":"Small size optimizations","title":"Small size optimizations","text":"PureFun.Contiguous.bitmap","category":"page"},{"location":"contiguous/#PureFun.Contiguous.bitmap","page":"Small size optimizations","title":"PureFun.Contiguous.bitmap","text":"bitmap(n_elems=Val{16}())\n\nCreate a BitMap with n_elems elements. See also PureFun.Tries.@trie. If the number of elements are known at compile time, then using Val{N}() rather than N to specify the number might be more efficient.\n\nExamples\n\njulia> using PureFun, PureFun.Contiguous\njulia> BM = Contiguous.bitmap(8) # equivalently: Contiguous.bitmap(Val{8}())\nPureFun.Contiguous.BitMap{PureFun.Contiguous.Bits{UInt8}}\n\njulia> b = BM{Int,Char}()\nPureFun.Contiguous.BitMap{PureFun.Contiguous.Bits{UInt8}, Int64, Char}()\n\njulia> setindex(b, 'a', 1)\nPureFun.Contiguous.BitMap{PureFun.Contiguous.Bits{UInt8}, Int64, Char} with 1 entry:\n  1 => 'a'\n\n\n\n\n\n","category":"function"},{"location":"contiguous/#biterate:-bit-wise-iteration-over-single-integers","page":"Small size optimizations","title":"biterate: bit-wise iteration over single integers","text":"","category":"section"},{"location":"contiguous/","page":"Small size optimizations","title":"Small size optimizations","text":"Contiguous.bitmap is great if you only need a dictionary with small integer keys, but doesn't generalize to other use-cases. Contiguous.biterate takes arbitrary integers and breaks them into smaller integers suitable to be keys in a bitmap. PureFun.Tries.@trie allows you to chain together simpler dictionaries to build more general ones, so biterate, bitmap, and @trie combine to build very efficient BitMapped tries, as described in Fast and Space Efficient Trie Searches and Ideal Hash Trees","category":"page"},{"location":"contiguous/","page":"Small size optimizations","title":"Small size optimizations","text":"PureFun.Contiguous.biterate","category":"page"},{"location":"contiguous/#PureFun.Contiguous.biterate","page":"Small size optimizations","title":"PureFun.Contiguous.biterate","text":"biterate(v)\nbiterate(v, x)\n\ntake an integer and iterate over it N bits at a time. The iterated elements are interpreted as integers between 1 and 2^v (e.g. if v = 6, then biterate will iterate integers between 1 and 64). The iterated integers are meant to be interpreted as array indexes, and are are always greater than 0.\n\nIf the number of bits v is known at compile-time, specifying it as Val{N}() might be more efficient than just passing the number as an integer.\n\nExamples\n\njulia> using PureFun, PureFun.Contiguous\njulia> Contiguous.biterate(4, UInt16(79)) |> collect\n4-element Vector{Int64}:\n 16\n  5\n  1\n  1\n\n\n\n\n\n","category":"function"},{"location":"generated/balanced-parentheses/","page":"Balanced Parentheses","title":"Balanced Parentheses","text":"EditURL = \"https://github.com/tarakc02/PureFun.jl/blob/main/docs/src/balanced-parentheses.jl\"","category":"page"},{"location":"generated/balanced-parentheses/","page":"Balanced Parentheses","title":"Balanced Parentheses","text":"using PureFun\nusing PureFun.Linked: List","category":"page"},{"location":"generated/balanced-parentheses/","page":"Balanced Parentheses","title":"Balanced Parentheses","text":"The balanced parentheses problem:","category":"page"},{"location":"generated/balanced-parentheses/","page":"Balanced Parentheses","title":"Balanced Parentheses","text":"Given a string s containing just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid.An input string is valid if:Open brackets must be closed by the same type of brackets.\nOpen brackets must be closed in the correct order.","category":"page"},{"location":"generated/balanced-parentheses/","page":"Balanced Parentheses","title":"Balanced Parentheses","text":"So, for example:","category":"page"},{"location":"generated/balanced-parentheses/","page":"Balanced Parentheses","title":"Balanced Parentheses","text":"(): valid\n()[]{}: valid\n(]: invalid\n{[}]: invalid\n{[{()}]}: valid","category":"page"},{"location":"generated/balanced-parentheses/","page":"Balanced Parentheses","title":"Balanced Parentheses","text":"we start with some helper functions:","category":"page"},{"location":"generated/balanced-parentheses/","page":"Balanced Parentheses","title":"Balanced Parentheses","text":"isopening(char) = char ∈ [ '(', '{', '[' ]\nisclosing(char) = char ∈ [ ')', '}', ']' ]\n\nfunction bracketmatch(b1, b2)\n    b1 == '(' && b2 == ')' ||\n    b1 == '{' && b2 == '}' ||\n    b1 == '[' && b2 == ']'\nend;","category":"page"},{"location":"generated/balanced-parentheses/","page":"Balanced Parentheses","title":"Balanced Parentheses","text":"For the main logic, we traverse the characters of the input string, keeping track of any unclosed open brackets we've seen on a stack. If we encounter a closing bracket, we check whether it closes the most recent opening bracket, and if it does we continue to match the previous opening bracket.","category":"page"},{"location":"generated/balanced-parentheses/","page":"Balanced Parentheses","title":"Balanced Parentheses","text":"function balanced(chars, opens)\n    isempty(chars) && return isempty(opens)\n    c, rest... = chars\n    isopening(c) ?\n        balanced(rest, c ⇀ opens) :\n        valid(opens, c) && balanced(rest, popfirst(opens))\nend\n\nvalid(opens, c)  = !isempty(opens) && bracketmatch(opens[1], c);","category":"page"},{"location":"generated/balanced-parentheses/","page":"Balanced Parentheses","title":"Balanced Parentheses","text":"We can overload balanced to do the initial setup:","category":"page"},{"location":"generated/balanced-parentheses/","page":"Balanced Parentheses","title":"Balanced Parentheses","text":"balanced(input) = balanced(input, empty(List(input)));","category":"page"},{"location":"generated/balanced-parentheses/","page":"Balanced Parentheses","title":"Balanced Parentheses","text":"let's see how it works:","category":"page"},{"location":"generated/balanced-parentheses/","page":"Balanced Parentheses","title":"Balanced Parentheses","text":"test_data = [\"()\", \"()[]{}\",  \"(]\", \"{[}]\", \"{[{()}]}\"]\nexpected =  [true,   true,   false,  false,    true]\n\nactual = map(balanced, test_data)\nall(actual .== expected)","category":"page"},{"location":"generated/balanced-parentheses/","page":"Balanced Parentheses","title":"Balanced Parentheses","text":"true","category":"page"},{"location":"generated/balanced-parentheses/","page":"Balanced Parentheses","title":"Balanced Parentheses","text":"","category":"page"},{"location":"generated/balanced-parentheses/","page":"Balanced Parentheses","title":"Balanced Parentheses","text":"This page was generated using Literate.jl.","category":"page"},{"location":"dicts/","page":"Dictionaries","title":"Dictionaries","text":"CurrentModule = PureFun\nDocSetup = quote using PureFun end","category":"page"},{"location":"dicts/#Dictionaries","page":"Dictionaries","title":"Dictionaries","text":"","category":"section"},{"location":"dicts/#RedBlack.RBDict-(\\S{3.3})","page":"Dictionaries","title":"RedBlack.RBDict (S33)","text":"","category":"section"},{"location":"dicts/","page":"Dictionaries","title":"Dictionaries","text":"RedBlack.RBDict","category":"page"},{"location":"dicts/#PureFun.RedBlack.RBDict","page":"Dictionaries","title":"PureFun.RedBlack.RBDict","text":"RedBlack.RBDict{O,K,V} where O\nRedBlack.RBDict{K,V}(ord=Base.Order.Forward)\nRedBlack.RBDict(iter, o::Ordering=Base.Order.Forward)\n\nImmutable dictionary implemented using a red-black tree (balanced binary search tree). All major operations are mathcalO(logn). Note the ordering parameter, the RBDict iterates in sorted order according to the ordering O. In addition to the main PFDict methods, RBDict implements delete, delete_min, and delete_max.\n\nExamples\n\njulia> using PureFun, PureFun.RedBlack\n\njulia> f = RedBlack.RBDict((\"zyz\" => 1, \"abc\" => 2, \"ghi\" => 3))\nPureFun.RedBlack.RBDict{Base.Order.ForwardOrdering, String, Int64} with 3 entries:\n  \"abc\" => 2\n  \"ghi\" => 3\n  \"zyz\" => 1\n\njulia> b = RedBlack.RBDict((\"zyz\" => 1, \"abc\" => 2, \"ghi\" => 3), Base.Order.Reverse)\nPureFun.RedBlack.RBDict{Base.Order.ReverseOrdering{Base.Order.ForwardOrdering}, String, Int64} with 3 entries:\n  \"zyz\" => 1\n  \"ghi\" => 3\n  \"abc\" => 2\n\njulia> delete_min(f)\nPureFun.RedBlack.RBDict{Base.Order.ForwardOrdering, String, Int64} with 2 entries:\n  \"ghi\" => 3\n  \"zyz\" => 1\n\njulia> delete_max(f)\nPureFun.RedBlack.RBDict{Base.Order.ForwardOrdering, String, Int64} with 2 entries:\n  \"abc\" => 2\n  \"ghi\" => 3\n\njulia> delete_min(b)\nPureFun.RedBlack.RBDict{Base.Order.ReverseOrdering{Base.Order.ForwardOrdering}, String, Int64} with 2 entries:\n  \"ghi\" => 3\n  \"abc\" => 2\n\njulia> delete_max(b)\nPureFun.RedBlack.RBDict{Base.Order.ReverseOrdering{Base.Order.ForwardOrdering}, String, Int64} with 2 entries:\n  \"zyz\" => 1\n  \"ghi\" => 3\n\njulia> delete(b, \"ghi\")\nPureFun.RedBlack.RBDict{Base.Order.ReverseOrdering{Base.Order.ForwardOrdering}, String, Int64} with 2 entries:\n  \"zyz\" => 1\n  \"abc\" => 2\n\n# forward-ordered by default, so:\njulia> d = RedBlack.RBDict{Base.Order.ForwardOrdering}{String,Int}();\njulia> d === RedBlack.RBDict{String,Int}()\ntrue\n\n\n\n\n\n","category":"type"},{"location":"dicts/#Tries-(\\S{10.3.1})","page":"Dictionaries","title":"Tries (S1031)","text":"","category":"section"},{"location":"dicts/","page":"Dictionaries","title":"Dictionaries","text":"These tries use path compression (exercise 10.10, although using the \"Compressed Trie with digit numbers\" variant presented here), resulting in compact and efficient dictionaries","category":"page"},{"location":"dicts/","page":"Dictionaries","title":"Dictionaries","text":"Tries.@trie","category":"page"},{"location":"dicts/#PureFun.Tries.@trie","page":"Dictionaries","title":"PureFun.Tries.@trie","text":"@trie(Name, edgemap = ...)\nTrie.@trie(Name, edgemap = ..., keyfunc = ...)\n\nTries are defined by an optional keyfunc, which takes keys and returns an iterator of simpler keys, and the edgemap, which maps the simpler keys to subtries. if keyfunc  is not specified it will be set to the identity function for all types except for Strings, for which it is codeunits (in order to properly handle variable width character encodings). Once Name has been defined, it can be used like any other PureFun.PFDict\n\nExamples\n\njulia> using PureFun.Tries\njulia> @trie(SimpleMap, edgemap=PureFun.Association.List)\n\njulia> s = SimpleMap{String,Int}()\nSimpleMap{String, Int64}()\n\njulia> setindex(s, 42, \"hello world\")\nSimpleMap{String, Int64}(...):\n  \"hello world\" => 42\n\njulia> SimpleMap(c => c for c in 'a':'e')\nSimpleMap{Char, Char}(...):\n  'e' => 'e'\n  'd' => 'd'\n  'c' => 'c'\n  'b' => 'b'\n  'a' => 'a'\n\nThe edgemap can be any data structure which implements the PFDict interface: it iterates pairs, has get, setindex, and isempty methods, and an empty constructor that has the signature edgemap{K,V}(). A tricky detail is that edgemap{K,V} should be a concrete type for concrete K and V, something you have to account for when defining the trie type if your edgemap dictionary type has extra type parameters. For example, here we must specify the ordering parameter for our RedBlack dictionary in order to use it as the edgemap:\n\njulia> @trie(RedBlackMap,\n             edgemap = PureFun.RedBlack.RBDict{Base.Order.ForwardOrdering})\n\njulia> RedBlackMap((\"hello\" => \"world\", \"reject\" => \"fascism\"))\nRedBlackMap{String, String}(...):\n  \"hello\"  => \"world\"\n  \"reject\" => \"fascism\"\n\nCache-efficient bitmap tries\n\nPureFun.Contiguous.biterate breaks single integer keys into iterators of smaller integer keys. PureFun.Contiguous.bitmap is a fast dictionary for small integer keys. By combining them, we end up with a bitmap-trie\n\njulia> @trie(BitMapTrie,\n             edgemap = PureFun.Contiguous.bitmap(16),\n             keyfunc = PureFun.Contiguous.biterate(4))\n\njulia> BitMapTrie(x => Char(x) for x in rand(UInt16, 5))\nBitMapTrie{UInt16, Char}(...):\n  0x5f60 => '彠'\n  0xce8b => '캋'\n  0x92c6 => '鋆'\n  0xa2ce => 'ꋎ'\n  0xadff => '귿'\n\njulia> @trie(BitMapTrie64,\n             edgemap = PureFun.Contiguous.bitmap(64),\n             keyfunc = PureFun.Contiguous.biterate(6))\n\njulia> b = BitMapTrie64(x => 2x for x in 1:1_000)\nBitMapTrie64{Int64, Int64}(...):\n  64  => 128\n  128 => 256\n  192 => 384\n  256 => 512\n  320 => 640\n  384 => 768\n  448 => 896\n  512 => 1024\n  576 => 1152\n  640 => 1280\n  ⋮   => ⋮\n\njulia> b[13]\n26\n\nTries themselves can be edgemaps for other tries:\n\njulia> @trie(BitMapTrie,\n             edgemap = PureFun.Contiguous.bitmap(16),\n             keyfunc = PureFun.Contiguous.biterate(4))\njulia> PureFun.Tries.@trie StringTrie Main.BitMapTrie codeunits\n\njulia> StringTrie((\"hello\" => 1, \"world\" => 2))\nStringTrie{String, Int64}(...):\n  \"world\" => 2\n  \"hello\" => 1\n\n\n\n\n\n","category":"macro"},{"location":"dicts/#HashMap:-\\S{10.3.1}-exercise-10.11","page":"Dictionaries","title":"HashMap: S1031 exercise 10.11","text":"","category":"section"},{"location":"dicts/","page":"Dictionaries","title":"Dictionaries","text":"HashMaps.@hashmap","category":"page"},{"location":"dicts/#PureFun.HashMaps.@hashmap","page":"Dictionaries","title":"PureFun.HashMaps.@hashmap","text":"HashMaps.@hashmap(Name, approx = ..., exact = ...)\nHashMaps.@hashmap(Name, approx = ..., exact = ..., hashfunc = ...)\n\nFrom exercise 10.11 in S1031:\n\nAnother common data structure that involves multiple layers of finite maps is the hash table. Complete the following implementation . . .functor HashTable(structure Approx : FiniteMap\n                  structure Exact : FiniteMap\n                  val hash : Exact.Key → Approx.Key) : FiniteMap =\nstruct\n    type Key = Exact.Key\n    type α Map = α Exact.Map Approx.Map\n    ...\n    fun lookup(k,m) = Exact.lookup(k, Approx.lookup(hash k, m))\nendThe advantage of this representation is that Approx can use an efficient key type (such as integers) and Exact can use a trivial implementation (such as association lists)\n\nTo define a hash map, provide a container type for approx, one for exact, and, optionally, a hash function. To avoid confusion, the container type arguments must be named.\n\nExamples\n\nThe dictionary types for the approx and exact maps can be any type DictType that satisfies the following:\n\nDictType{K,V} describes a concrete type\nDictType{K,V}() initializes an empty dictionary for keys of type K and values of type V\nhas methods for get(::DictType, key, default) and setindex(::DictType, val, key)\n\nIn the following example, we have to specify the ordering parameter for the red-black dictionary, so that it conforms to the required specifications. Note also you might need to fully specify object names including their module (so e.g. Main.MyApproxMap rather than MyApproxMap). You can get around this restriction by defining const type aliases, as in this example:\n\njulia> using PureFun, PureFun.HashMaps\n\njulia> const RB = PureFun.RedBlack.RBDict{Base.Order.ForwardOrdering}\nPureFun.RedBlack.RBDict{Base.Order.ForwardOrdering}\n\njulia> const assoclist = PureFun.Association.List\nPureFun.Association.List\n\njulia> HashMaps.@hashmap(MyHashMap, approx = RB, exact = assoclist)\n\njulia> setindex(MyHashMap{String,Int}(), 42, \"hello world\")\nMyHashMap{String, Int64}(...):\n  \"hello world\" => 42\n\njulia> MyHashMap(char => Int(char) for char in 'a':'f')\nMyHashMap{Char, Int64}(...):\n  'c' => 99\n  'd' => 100\n  'e' => 101\n  'f' => 102\n  'b' => 98\n  'a' => 97\n\nWith this general framework for hashmaps as nested finite maps, we can implement the Hash Array Mapped Trie, which features prominently among Clojure's standard data structures, and in FunctionalCollections.jl. We assemble a bitmapped trie to use as our approx map, and use an association list for the exact map. For no particular reason except to demonstrate the functionality, here instead of relying on the usual hash function we specify our own hash function (in this case, it is just the hash of the hash):\n\nExamples\n\njulia> using PureFun, PureFun.Tries, PureFun.HashMaps\n\njulia> PureFun.Tries.@trie(BitMapTrie64,\n                           edgemap = PureFun.Contiguous.bitmap(64),\n                           keyfunc = PureFun.Contiguous.biterate(6))\n\njulia> HashMaps.@hashmap(HAMT,\n                         approx   = Main.BitMapTrie64,\n                         exact    = PureFun.Association.List,\n                         hashfunc = hash ∘ hash)\n\njulia> HAMT{String,Int}()\nHAMT{String, Int64}()\n\njulia> HAMT(x => Char(x) for x in 97:105)\nHAMT{Int64, Char}(...):\n  105 => 'i'\n  99  => 'c'\n  98  => 'b'\n  103 => 'g'\n  102 => 'f'\n  97  => 'a'\n  104 => 'h'\n  100 => 'd'\n  101 => 'e'\n\n\n\n\n\n","category":"macro"},{"location":"dicts/#Association.List","page":"Dictionaries","title":"Association.List","text":"","category":"section"},{"location":"dicts/","page":"Dictionaries","title":"Dictionaries","text":"Association.List","category":"page"},{"location":"dicts/#PureFun.Association.List","page":"Dictionaries","title":"PureFun.Association.List","text":"Association.List{K,V}()\nAssociation.List(iter)\n\nA dictionary implemented as a linked list of pairs. Adding/updating new items is very fast, but lookups can be as bad as mathcalO(n). Almost identical to Base.ImmutableDict, but with a few extra bells and whistles to conform the expected interface for PureFun.PFDict.\n\nExamples\n\njulia> using PureFun, PureFun.Association\n\njulia> Association.List(k => Char(k) for k in rand(UInt16, 5))\nPureFun.Association.List{UInt16, Char} with 5 entries:\n  0x5d5d => '嵝'\n  0x6ab9 => '檹'\n  0x4eb0 => '亰'\n  0xd55c => '한'\n  0xd018 => '퀘'\n\n\n\n\n\n","category":"type"},{"location":"dicts/#Function-reference","page":"Dictionaries","title":"Function reference","text":"","category":"section"},{"location":"dicts/","page":"Dictionaries","title":"Dictionaries","text":"PureFun.setindex(d::PureFun.PFDict, v, i)\nBase.get(d::PureFun.PFDict, key, default)\nPureFun.PFDict","category":"page"},{"location":"dicts/#Base.setindex-Tuple{PureFun.PFDict, Any, Any}","page":"Dictionaries","title":"Base.setindex","text":"setindex(d::PFDict, v, i)\n\nReturn a new dictionary with the value at key i set to v\n\n\n\n\n\n","category":"method"},{"location":"dicts/#Base.get-Tuple{PureFun.PFDict, Any, Any}","page":"Dictionaries","title":"Base.get","text":"get(d::PFDict, key, default)\n\nGet the value associated with key, or return default.\n\n\n\n\n\n","category":"method"},{"location":"dicts/#PureFun.PFDict","page":"Dictionaries","title":"PureFun.PFDict","text":"Abstract supertype for immutable dictionaries.\n\n\n\n\n\n","category":"type"},{"location":"generated/estimating-pi/","page":"Estimating π","title":"Estimating π","text":"EditURL = \"https://github.com/tarakc02/PureFun.jl/blob/main/docs/src/estimating-pi.jl\"","category":"page"},{"location":"generated/estimating-pi/","page":"Estimating π","title":"Estimating π","text":"using PureFun\nusing PureFun.Lazy: Stream, @stream","category":"page"},{"location":"generated/estimating-pi/#Example:-Approximating-\\pi","page":"Estimating π","title":"Example: Approximating pi","text":"","category":"section"},{"location":"generated/estimating-pi/","page":"Estimating π","title":"Estimating π","text":"This example is adapted from Chapter 3 of Structure and Interpretation of Computer Programs","category":"page"},{"location":"generated/estimating-pi/","page":"Estimating π","title":"Estimating π","text":"The summation:","category":"page"},{"location":"generated/estimating-pi/","page":"Estimating π","title":"Estimating π","text":"fracpi4 = 1 - frac13 + frac15 - frac17","category":"page"},{"location":"generated/estimating-pi/","page":"Estimating π","title":"Estimating π","text":"gives us a way to approximate pi:","category":"page"},{"location":"generated/estimating-pi/","page":"Estimating π","title":"Estimating π","text":"function pi_summands(n, one)\n    @stream(Float64, one/n, pi_summands(n+2, -one))\nend\n\nfunction approx_pi(n)\n    summands = pi_summands(n, 1)\n    sums = accumulate(+, summands, init=0.0)\n    map(x -> 4x, sums)\nend\n\nπ̂ = approx_pi(1)","category":"page"},{"location":"generated/estimating-pi/","page":"Estimating π","title":"Estimating π","text":"PureFun.Lazy.NonEmpty{Float64}\n4.0\n2.666666666666667\n3.466666666666667\n2.8952380952380956\n3.3396825396825403\n2.9760461760461765\n3.2837384837384844\n...","category":"page"},{"location":"generated/estimating-pi/","page":"Estimating π","title":"Estimating π","text":"The series converges slowly though. In order to see how close the estimates are:","category":"page"},{"location":"generated/estimating-pi/","page":"Estimating π","title":"Estimating π","text":"map(x -> abs(π - x), π̂)","category":"page"},{"location":"generated/estimating-pi/","page":"Estimating π","title":"Estimating π","text":"PureFun.Lazy.NonEmpty{Float64}\n0.8584073464102069\n0.47492598692312615\n0.32507401307687367\n0.2463545583516975\n0.19808988609274714\n0.16554647754361662\n0.1421458301486913\n...","category":"page"},{"location":"generated/estimating-pi/#A-better-approximation","page":"Estimating π","title":"A better approximation","text":"","category":"section"},{"location":"generated/estimating-pi/","page":"Estimating π","title":"Estimating π","text":"An accelerator is a function that takes a series, and returns a series that converges to the same sum, but more quickly. The Euler transform is an accelerator that works well on series with alternating positive/negative terms, like we have here. It is defined as:","category":"page"},{"location":"generated/estimating-pi/","page":"Estimating π","title":"Estimating π","text":"S_n+1 - frac(S_n+1-S_n)^2S_n-1 - 2S_n + S_n+1","category":"page"},{"location":"generated/estimating-pi/","page":"Estimating π","title":"Estimating π","text":"So:","category":"page"},{"location":"generated/estimating-pi/","page":"Estimating π","title":"Estimating π","text":"euler_transform(s₀, s₁, s₂) = s₂ - (s₂ - s₁)^2/(s₀ - 2s₁ + s₂)\n\nfunction euler_transform(s::Stream)\n    @stream(Float64,\n          euler_transform(s[1], s[2], s[3]),\n          euler_transform(tail(s)))\nend\n\nπ̂₂ = euler_transform(approx_pi(1))","category":"page"},{"location":"generated/estimating-pi/","page":"Estimating π","title":"Estimating π","text":"PureFun.Lazy.NonEmpty{Float64}\n3.166666666666667\n3.1333333333333337\n3.1452380952380956\n3.13968253968254\n3.1427128427128435\n3.1408813408813416\n3.142071817071818\n...","category":"page"},{"location":"generated/estimating-pi/","page":"Estimating π","title":"Estimating π","text":"This converges much more quickly to the true value of pi","category":"page"},{"location":"generated/estimating-pi/","page":"Estimating π","title":"Estimating π","text":"map(x -> abs(π - x), π̂₂)","category":"page"},{"location":"generated/estimating-pi/","page":"Estimating π","title":"Estimating π","text":"PureFun.Lazy.NonEmpty{Float64}\n0.025074013076873847\n0.008259320256459368\n0.0036454416483024943\n0.0019101139072530415\n0.0011201891230503414\n0.0007113127084514836\n0.0004791634820247026\n...","category":"page"},{"location":"generated/estimating-pi/","page":"Estimating π","title":"Estimating π","text":"and we can reuse the accelerator to keep improving our approximation:","category":"page"},{"location":"generated/estimating-pi/","page":"Estimating π","title":"Estimating π","text":"euler_transform(π̂₂)","category":"page"},{"location":"generated/estimating-pi/","page":"Estimating π","title":"Estimating π","text":"PureFun.Lazy.NonEmpty{Float64}\n3.142105263157895\n3.1414502164502167\n3.1416433239962656\n3.1415712902014277\n3.1416028416028423\n3.141587320947787\n3.141595655236941\n...","category":"page"},{"location":"generated/estimating-pi/","page":"Estimating π","title":"Estimating π","text":"...","category":"page"},{"location":"generated/estimating-pi/","page":"Estimating π","title":"Estimating π","text":"π̂₂ |> euler_transform |> euler_transform |> euler_transform","category":"page"},{"location":"generated/estimating-pi/","page":"Estimating π","title":"Estimating π","text":"PureFun.Lazy.NonEmpty{Float64}\n3.1415927140337785\n3.141592637113005\n3.1415926587096235\n3.141592651803974\n3.141592654277287\n3.141592653301986\n3.1415926537192127\n...","category":"page"},{"location":"generated/estimating-pi/","page":"Estimating π","title":"Estimating π","text":"","category":"page"},{"location":"generated/estimating-pi/","page":"Estimating π","title":"Estimating π","text":"This page was generated using Literate.jl.","category":"page"},{"location":"queues/","page":"Queues/Deques","title":"Queues/Deques","text":"CurrentModule = PureFun\nDocSetup = quote using PureFun end","category":"page"},{"location":"queues/#Queues","page":"Queues/Deques","title":"Queues","text":"","category":"section"},{"location":"queues/","page":"Queues/Deques","title":"Queues/Deques","text":"Unlike lists, queues iterate in first-in, last-out order. They implement the following efficiently:","category":"page"},{"location":"queues/","page":"Queues/Deques","title":"Queues/Deques","text":"push (to push to the end, analogous to Base.push! – kinda wish they had called this pushlast! but alas)\nfirst\npopfirst","category":"page"},{"location":"queues/","page":"Queues/Deques","title":"Queues/Deques","text":"You can use any existing list implementation as a Queue, using the Batched.@deque functor. However, the resulting queue achieves amortized constant complexity guarantees by batching expensive rebalancing operations: most operations are fast, but occasionally an operation takes mathcalO(n) time, and we refer to those as expensive operations. In amortized mutable data structures, expensive operations restore internal balance, which guarantees you a budget of cheap operations before the next rebalancing is required. An expensive operation on an immutable data structure returns a new, balanced data structure, and once again if you restrict your usage to this new value then the amortized analysis that we used in the immutable case still applies. But unlike a mutable data structure, a given instance of an immutable data structure may have multiple logical futures – after calling an expensive operation, we can go back to the same imbalanced data structure and call an expensive operation again, without having first benefitted from all the cheap operations in between. The concept is explored in Chapter 6 (S61) of Purely Functional Data Structures, which introduces the use of lazy evaluation in restoring amortized bounds in persistent settings.","category":"page"},{"location":"queues/","page":"Queues/Deques","title":"Queues/Deques","text":"Use the following queue types if your use-case involves utilizing multiple logical futures (example: concurrency/multi-threading):","category":"page"},{"location":"queues/#Bootstrapped.Queue-\\S{10.1.3}","page":"Queues/Deques","title":"Bootstrapped.Queue S1013","text":"","category":"section"},{"location":"queues/","page":"Queues/Deques","title":"Queues/Deques","text":"PureFun.Bootstrapped.Queue","category":"page"},{"location":"queues/#PureFun.Bootstrapped.Queue","page":"Queues/Deques","title":"PureFun.Bootstrapped.Queue","text":"Bootstrapped.Queue{T}()\nBootstrapped.Queue(iter)\n\nfirst takes mathcalO(1) time, while both push and popfirst take mathcalO(log^*n) amortized time, where log^* is the iterated logarithm, which is \"constant in practice.\" The amortized bounds extend to settings that require persistence, this is achieved via disciplined use of lazy evaluation along with memoization\n\nExamples\n\njulia> using PureFun, PureFun.Bootstrapped\njulia> q = Bootstrapped.Queue(1:3)\n3-element PureFun.Bootstrapped.NonEmpty{Int64}\n1\n2\n3\n\njulia> push(q, 4)\n4-element PureFun.Bootstrapped.NonEmpty{Int64}\n1\n2\n3\n4\n\njulia> popfirst(q)\n2-element PureFun.Bootstrapped.NonEmpty{Int64}\n2\n3\n\n\n\n\n\n\n","category":"type"},{"location":"queues/#RealTime.Queue-\\S{7.2}","page":"Queues/Deques","title":"RealTime.Queue S72","text":"","category":"section"},{"location":"queues/","page":"Queues/Deques","title":"Queues/Deques","text":"PureFun.RealTime.Queue","category":"page"},{"location":"queues/#PureFun.RealTime.Queue","page":"Queues/Deques","title":"PureFun.RealTime.Queue","text":"RealTime.Queue{T}()\nRealTime.Queue(iter)\n\nAll operations are worst-case mathcalO(1). These queues make heavy use of lazy evaluation. Due to the overheads associated with lazy evaluation, the PureFun.RealTime.Queue is slower on average than others, but can still be useful in settings (such as interactive user-interfaces) where bounded worst-case performance is more important than average performance.\n\n\n\n\n\n","category":"type"},{"location":"queues/#HoodMelville.Queue-\\S{8.2.1}","page":"Queues/Deques","title":"HoodMelville.Queue S821","text":"","category":"section"},{"location":"queues/","page":"Queues/Deques","title":"Queues/Deques","text":"HoodMelville.Queue","category":"page"},{"location":"queues/#PureFun.HoodMelville.Queue","page":"Queues/Deques","title":"PureFun.HoodMelville.Queue","text":"HoodMelville.Queue{T}()\nHoodMelville.Queue(iter)\n\nHoodMelville.Queues require worst-case constant time for all 3 queue operations. Unlike the PureFun.RealTime.Queue, the Hood-Melville queue does not use lazy evaluation, as it more explicitly schedules incremental work during each operation, smoothing out the costs of rebalancing across cheap operations. Since this requires doing rebalancing work before it becomes necessary, the Hood-Melville queues can end up doing unnecessary work, leading to higher on-average overheads. Use when worst-case performance is more important than average performance.\n\n\n\n\n\n","category":"type"},{"location":"queues/#Function-reference","page":"Queues/Deques","title":"Function reference","text":"","category":"section"},{"location":"queues/","page":"Queues/Deques","title":"Queues/Deques","text":"PureFun.push\nPureFun.popfirst","category":"page"},{"location":"queues/#StaticArrays.push","page":"Queues/Deques","title":"StaticArrays.push","text":"push(vec::StaticVector, item)\n\nReturn a new StaticVector with item inserted on the end of vec.\n\nExamples\n\njulia> push(@SVector[1, 2, 3], 4)\n4-element SArray{Tuple{4},Int64,1,4} with indices SOneTo(4):\n 1\n 2\n 3\n 4\n\n\n\n\n\npush(xs::PFQueue, x)\nsnoc(xs::PFQueue, x)\n\nReturn the PFQueue that results from adding an element to the rear of xs.\n\n\n\n\n\npush(xs::PFHeap, x)\n\nReturn the PFHeap that results from adding x to the collection.\n\n\n\n\n\n","category":"function"},{"location":"queues/#StaticArrays.popfirst","page":"Queues/Deques","title":"StaticArrays.popfirst","text":"popfirst(vec::StaticVector)\n\nReturn a new vector with the first item in vec removed.\n\nExamples\n\njulia> popfirst(@SVector[1,2,3])\n2-element SArray{Tuple{2},Int64,1,2} with indices SOneTo(2):\n 2\n 3\n\n\n\n\n\npopfirst(xs)\n\nReturn the collection xs without its first element (without modifying xs).\n\n\n\n\n\n","category":"function"},{"location":"generated/taxicab/","page":"Ramanujan (taxicab) numbers","title":"Ramanujan (taxicab) numbers","text":"EditURL = \"https://github.com/tarakc02/PureFun.jl/blob/main/docs/src/taxicab.jl\"","category":"page"},{"location":"generated/taxicab/","page":"Ramanujan (taxicab) numbers","title":"Ramanujan (taxicab) numbers","text":"using PureFun\nusing PureFun: Pairing","category":"page"},{"location":"generated/taxicab/","page":"Ramanujan (taxicab) numbers","title":"Ramanujan (taxicab) numbers","text":"Taxicab numbers are numbers that can be expressed as the sum of cubes in two different ways. In this exercise we'll create an iterator over taxicab numbers less than k. We do this by generating pairs of integers and ordering them by the sum of their cubes, and then iterate through them in order looking for adjacent pairs with the same sum of cubes. We use a custom ordering to order a heap by the sum of cubes.","category":"page"},{"location":"generated/taxicab/","page":"Ramanujan (taxicab) numbers","title":"Ramanujan (taxicab) numbers","text":"sum_of_cubes(x,y) = x^3 + y^3\nsum_of_cubes(pair) = sum_of_cubes(pair[1], pair[2]);\n\nfunction taxi(k)\n    all_pairs = distinct_pairs(k)\n    ordered_pairs = Pairing.Heap(all_pairs,\n                                 Base.Order.By(sum_of_cubes))\n    consecutive_matches(ordered_pairs)\nend","category":"page"},{"location":"generated/taxicab/","page":"Ramanujan (taxicab) numbers","title":"Ramanujan (taxicab) numbers","text":"taxi (generic function with 1 method)","category":"page"},{"location":"generated/taxicab/","page":"Ramanujan (taxicab) numbers","title":"Ramanujan (taxicab) numbers","text":"We still need to implement the underlying iterators distinct_pairs, which generates pairs of integers, and consecutive matches, which scans an iterator that's already ordered for pairs of duplicates:","category":"page"},{"location":"generated/taxicab/","page":"Ramanujan (taxicab) numbers","title":"Ramanujan (taxicab) numbers","text":"distinct_pairs(k) = ((p,q) for (p,q) in Iterators.product(1:k, 1:k) if p < q)\nadjacent_pairs(it) = zip(it, Iterators.drop(it, 1));\n\nfunction consecutive_matches(pair_stream)\n    (\n     (pair1,pair2) for (pair1,pair2) in adjacent_pairs(pair_stream)\n     if sum_of_cubes(pair1) == sum_of_cubes(pair2)\n    )\nend","category":"page"},{"location":"generated/taxicab/","page":"Ramanujan (taxicab) numbers","title":"Ramanujan (taxicab) numbers","text":"consecutive_matches (generic function with 1 method)","category":"page"},{"location":"generated/taxicab/","page":"Ramanujan (taxicab) numbers","title":"Ramanujan (taxicab) numbers","text":"The results:","category":"page"},{"location":"generated/taxicab/","page":"Ramanujan (taxicab) numbers","title":"Ramanujan (taxicab) numbers","text":"for t in taxi(75)\n    println(sum_of_cubes(t[1]), \": \", t[1], \" \", t[2], \" :\", sum_of_cubes(t[2]))\nend","category":"page"},{"location":"generated/taxicab/","page":"Ramanujan (taxicab) numbers","title":"Ramanujan (taxicab) numbers","text":"1729: (1, 12) (9, 10) :1729\n4104: (2, 16) (9, 15) :4104\n13832: (2, 24) (18, 20) :13832\n20683: (10, 27) (19, 24) :20683\n32832: (4, 32) (18, 30) :32832\n39312: (2, 34) (15, 33) :39312\n40033: (9, 34) (16, 33) :40033\n46683: (3, 36) (27, 30) :46683\n64232: (17, 39) (26, 36) :64232\n65728: (31, 33) (12, 40) :65728\n110656: (4, 48) (36, 40) :110656\n110808: (6, 48) (27, 45) :110808\n134379: (12, 51) (38, 43) :134379\n149389: (8, 53) (29, 50) :149389\n165464: (20, 54) (38, 48) :165464\n171288: (24, 54) (17, 55) :171288\n195841: (22, 57) (9, 58) :195841\n216027: (3, 60) (22, 59) :216027\n216125: (5, 60) (45, 50) :216125\n262656: (8, 64) (36, 60) :262656\n314496: (30, 66) (4, 68) :314496\n320264: (18, 68) (32, 66) :320264\n327763: (30, 67) (51, 58) :327763\n373464: (54, 60) (6, 72) :373464\n402597: (42, 69) (56, 61) :402597\n","category":"page"},{"location":"generated/taxicab/","page":"Ramanujan (taxicab) numbers","title":"Ramanujan (taxicab) numbers","text":"","category":"page"},{"location":"generated/taxicab/","page":"Ramanujan (taxicab) numbers","title":"Ramanujan (taxicab) numbers","text":"This page was generated using Literate.jl.","category":"page"},{"location":"sets/","page":"Sets","title":"Sets","text":"CurrentModule = PureFun\nDocSetup = quote using PureFun end","category":"page"},{"location":"sets/#Sets","page":"Sets","title":"Sets","text":"","category":"section"},{"location":"sets/#RedBlack.RBSet-(\\S{3.3})","page":"Sets","title":"RedBlack.RBSet (S33)","text":"","category":"section"},{"location":"sets/","page":"Sets","title":"Sets","text":"RedBlack.RBSet","category":"page"},{"location":"sets/#PureFun.RedBlack.RBSet","page":"Sets","title":"PureFun.RedBlack.RBSet","text":"RBSet{O,T} where O\nRBSet{O,T}(ord=Base.Order.Forward)\nRBSet(iter, o=Base.Order.Forward)\n\nAn immutable ordered set. All major operations are mathcalO(logn). Note the ordering parameter, the RBDict iterates in sorted order according to the ordering O. In addition to the main PFDict methods, RBDict implements delete, delete_min, and delete_max.\n\nExamples\n\njulia> using PureFun, PureFun.RedBlack\n\njulia> s1 = RedBlack.RBSet(1:10)\n1\n2\n3\n⋮\n8\n9\n10\n\n\njulia> s2 = RedBlack.RBSet(1:10, Base.Order.Reverse)\n10\n9\n8\n⋮\n3\n2\n1\n\n\njulia> 1 ∈ s1, 1 ∈ s2\n(true, true)\n\njulia> 17 ∈ s1, 17 ∈ s2\n(false, false)\n\njulia> 1 ∈ delete_min(s1)\nfalse\n\njulia> 17 ∈ push(s2, 17)\ntrue\n\n\n\n\n\n","category":"type"},{"location":"sets/#Use-any-dictionary-as-a-set:-PureFun.@dict2set","page":"Sets","title":"Use any dictionary as a set: PureFun.@dict2set","text":"","category":"section"},{"location":"sets/","page":"Sets","title":"Sets","text":"@dict2set","category":"page"},{"location":"sets/#PureFun.@dict2set","page":"Sets","title":"PureFun.@dict2set","text":"@dict2set Name DictType\n\nGiven a dictionary implementation, without any extra overhead we can implement a set by mapping every key to nothing and defining the set methods appropriately. That's what @dict2set does.\n\nExamples\n\njulia> PureFun.Tries.@trie MyDictionary PureFun.Association.List\n\njulia> PureFun.@dict2set MySet MyDictionary\n\njulia> s = MySet([1,2,2,3,4])\n4-element MySet{Int64}\n4\n3\n2\n1\n\n\njulia> push(s, 99)\n5-element MySet{Int64}\n99\n4\n3\n2\n1\n\n\njulia> 3 ∈ s\ntrue\n\njulia> intersect(s, [1,2,3])\n3-element MySet{Int64}\n3\n2\n1\n\n\n\n\n\n","category":"macro"},{"location":"generated/streams/","page":"Streams","title":"Streams","text":"EditURL = \"https://github.com/tarakc02/PureFun.jl/blob/main/docs/src/streams.jl\"","category":"page"},{"location":"generated/streams/#Streams","page":"Streams","title":"Streams","text":"","category":"section"},{"location":"generated/streams/","page":"Streams","title":"Streams","text":"A number of the data structures in PureFun.jl rely on lazy evaluation and lazily evaluated lists, which are provided by PureFun.Lazy. Here we look at some toy examples to get a feel for to use Streams.","category":"page"},{"location":"generated/streams/","page":"Streams","title":"Streams","text":"using PureFun\nusing PureFun.Lazy: Stream, @stream","category":"page"},{"location":"generated/streams/#Basics","page":"Streams","title":"Basics","text":"","category":"section"},{"location":"generated/streams/","page":"Streams","title":"Streams","text":"\"Lazy evaluation\" describes a strategy for evaluating expressions, and has two main features:","category":"page"},{"location":"generated/streams/","page":"Streams","title":"Streams","text":"The evaluation of the expression is delayed (suspended) until its result is needed\nThe result is cached (memoized) the first time the expression is evaluated, so that subsequent evaluations become cheap lookups","category":"page"},{"location":"generated/streams/","page":"Streams","title":"Streams","text":"Streams are lazily evaluated lists, and are described in section 4.2 of the book:","category":"page"},{"location":"generated/streams/","page":"Streams","title":"Streams","text":"Streams (also known as lazy lists) are similar to ordinary lists, except that every cell is systematically suspended","category":"page"},{"location":"generated/streams/","page":"Streams","title":"Streams","text":"integers = Stream(Iterators.countfrom(1))","category":"page"},{"location":"generated/streams/","page":"Streams","title":"Streams","text":"PureFun.Lazy.NonEmpty{Int64}\n1\n2\n3\n4\n5\n6\n7\n...","category":"page"},{"location":"generated/streams/","page":"Streams","title":"Streams","text":"The @stream macro enables you to build streams by providing an expression which evaluates to the first element, and  one that evaluates to a stream of remaining elements. Both expressions are suspended, and only evaluated when the value is needed (at which time, the value is cached).","category":"page"},{"location":"generated/streams/","page":"Streams","title":"Streams","text":"fibonacci(a,b) = @stream(Int, a, fibonacci(b, a+b))\nfibonacci(0, 1)","category":"page"},{"location":"generated/streams/","page":"Streams","title":"Streams","text":"PureFun.Lazy.NonEmpty{Int64}\n0\n1\n1\n2\n3\n5\n8\n...","category":"page"},{"location":"generated/streams/#Comparison-to-iterators","page":"Streams","title":"Comparison to iterators","text":"","category":"section"},{"location":"generated/streams/","page":"Streams","title":"Streams","text":"Like Streams, Julia's iterators are also lazily evaluated. The main difference is that Streams are memoized, meaning that values that have been calculated are cached and can be revisited without having to recalculate them.","category":"page"},{"location":"generated/streams/","page":"Streams","title":"Streams","text":"Like all of the data structures in PureFun.jl, Streams are iterators themselves, and calling a function from Base.Iterators on a Stream works as expected. Calling Stream on an iterator, on the other hand, is kind of like a lazy collect, it materializes computed values as they are iterated out:","category":"page"},{"location":"generated/streams/","page":"Streams","title":"Streams","text":"using Base.Iterators: zip, drop, take\n\nfoo = map(x -> 2x, accumulate(+, filter(isodd, integers), init=0.0)) |> Stream\nbar = zip(foo, drop(foo, 1)) |> Stream\n\ncollect(take(bar, 7))","category":"page"},{"location":"generated/streams/","page":"Streams","title":"Streams","text":"7-element Vector{Tuple{Float64, Float64}}:\n (2.0, 8.0)\n (8.0, 18.0)\n (18.0, 32.0)\n (32.0, 50.0)\n (50.0, 72.0)\n (72.0, 98.0)\n (98.0, 128.0)","category":"page"},{"location":"generated/streams/","page":"Streams","title":"Streams","text":"We can access elements of streams the same way we would do for regular (eager) lists:","category":"page"},{"location":"generated/streams/","page":"Streams","title":"Streams","text":"bar[2000]","category":"page"},{"location":"generated/streams/","page":"Streams","title":"Streams","text":"(8.0e6, 8.008002e6)","category":"page"},{"location":"generated/streams/#Reference","page":"Streams","title":"Reference","text":"","category":"section"},{"location":"generated/streams/","page":"Streams","title":"Streams","text":"PureFun.Lazy.Stream\nPureFun.Lazy.@stream","category":"page"},{"location":"generated/streams/#PureFun.Lazy.Stream","page":"Streams","title":"PureFun.Lazy.Stream","text":"Stream{T} <: PureFun.PFStream{T}\n\nStream with elements of type T. Every cell in a stream is systematically suspended, and only evaluated when the value in that cell is required. Furthermore, the value is cached the first time a cell is evaluated, so that subsequent accesses are cheap. Introduced in S42\n\n\n\n\n\n","category":"type"},{"location":"generated/streams/#PureFun.Lazy.@stream","page":"Streams","title":"PureFun.Lazy.@stream","text":"@stream T headexpr tailexpr\n\nthis macro makes it more convenient to construct a stream\n\n\n\n\n\n","category":"macro"},{"location":"generated/streams/","page":"Streams","title":"Streams","text":"","category":"page"},{"location":"generated/streams/","page":"Streams","title":"Streams","text":"This page was generated using Literate.jl.","category":"page"},{"location":"#Purely-Functional-Data-Structures,-in-Julia","page":"Purely Functional Data Structures, in Julia","title":"Purely Functional Data Structures, in Julia","text":"","category":"section"},{"location":"","page":"Purely Functional Data Structures, in Julia","title":"Purely Functional Data Structures, in Julia","text":"CurrentModule = PureFun\nDocSetup = quote using PureFun end","category":"page"},{"location":"","page":"Purely Functional Data Structures, in Julia","title":"Purely Functional Data Structures, in Julia","text":"Wherein I work my way through the book Purely Functional Data Structures, but in Julia instead of ML/haskell","category":"page"},{"location":"#What-is-a-persistent-data-structure?","page":"Purely Functional Data Structures, in Julia","title":"What is a persistent data structure?","text":"","category":"section"},{"location":"","page":"Purely Functional Data Structures, in Julia","title":"Purely Functional Data Structures, in Julia","text":"Consider the following bit of code:","category":"page"},{"location":"","page":"Purely Functional Data Structures, in Julia","title":"Purely Functional Data Structures, in Julia","text":"x = 42;\ny = x;\ny += 1\nx","category":"page"},{"location":"","page":"Purely Functional Data Structures, in Julia","title":"Purely Functional Data Structures, in Julia","text":"Compare to the similar looking code:","category":"page"},{"location":"","page":"Purely Functional Data Structures, in Julia","title":"Purely Functional Data Structures, in Julia","text":"x = [1,2,3];\ny = x;\npush!(y, 4)\nx","category":"page"},{"location":"","page":"Purely Functional Data Structures, in Julia","title":"Purely Functional Data Structures, in Julia","text":"In the first example, changing the value of y did not affect the value of x. However, in the second, I was able to change the contents of x without re-assigning it directly! This can lead to unexpected program behavior: any time you pass your object as an argument to a function, you can't know for sure if the called function had the side effect of changing the contents of your object. A workaround when you want to avoid that possibility is defensive copying. If we're writing multiple small functions as recommended in the Julia docs, this can get expensive.","category":"page"},{"location":"","page":"Purely Functional Data Structures, in Julia","title":"Purely Functional Data Structures, in Julia","text":"Julia's base arrays, sets, and dictionaries are all mutable. This package provides data structures that are immutable, so they can be treated as values.","category":"page"},{"location":"","page":"Purely Functional Data Structures, in Julia","title":"Purely Functional Data Structures, in Julia","text":"using PureFun\nx = PureFun.Linked.List(1:3);\ny = x;\ny = pushfirst(y, 4)\nx","category":"page"},{"location":"#Overall-design","page":"Purely Functional Data Structures, in Julia","title":"Overall design","text":"","category":"section"},{"location":"","page":"Purely Functional Data Structures, in Julia","title":"Purely Functional Data Structures, in Julia","text":"PureFun.jl provides a bunch of different container types, each has an empty constructor to create a new empty container of that type, and a constructor that takes an iterable. All of the collection types satisfy the iteration interface and can be used in loops, with iterators, etc. There are several functors that allow you to create more complicated container types from simpler container types.","category":"page"},{"location":"","page":"Purely Functional Data Structures, in Julia","title":"Purely Functional Data Structures, in Julia","text":"Whenever an immutable method has a mutating analogue in Base, the immutable version of the function has the same name as the mutating one without the !. For example, push is a non-mutating version of push!, instead of modifying its input argument it returns a new collection with an element added.","category":"page"},{"location":"","page":"Purely Functional Data Structures, in Julia","title":"Purely Functional Data Structures, in Julia","text":"Lists: insert/remove from the front of the list, get the element at the front of the lists, and iterate inserted elements in LIFO order\nQueues: insert at the end, remove from the front, iterate in FIFO order\nHeaps: insert elements, remove elements, retrieve the minimum, and iterate in sorted order (wrt an Ordering)\nDictionaries: associate keys with values\nSets: insert keys, test for membership, various set operations including intersect and union","category":"page"},{"location":"#Build-your-own-data-structures:-Batched.@deque,-Tries.@trie,-Chunky.@list","page":"Purely Functional Data Structures, in Julia","title":"Build your own data structures: Batched.@deque, Tries.@trie, Chunky.@list","text":"","category":"section"},{"location":"","page":"Purely Functional Data Structures, in Julia","title":"Purely Functional Data Structures, in Julia","text":"These use generic design strategies to assemble more powerful data structures from simpler ones.","category":"page"},{"location":"","page":"Purely Functional Data Structures, in Julia","title":"Purely Functional Data Structures, in Julia","text":"PureFun.Batched.@deque takes a list implementation and adds efficient access (push/pop/last) to the rear of the list, making it into a double-ended queue. The resulting deque maintains the advantages of the list used to create it, so for example a deque made from PureFun.RandomAccess.List will maintain fast indexing (get/set index) operations.\nPureFun.Chunky.@list takes any list implementation, and uses it to store chunks of elements contiguously in memory, rather than single elements, in order to improve iteration speed.\nPureFun.Tries.@trie builds efficient dictionaries for aggregate key types by chaining together dictionaries of single keys.\nPureFun.HashMaps.@hashmap nests dictionaries and combines them with hash functions to produce dictionary types that achieve efficient lookups and insertions for arbitrary key types.","category":"page"},{"location":"#PureFun.Contiguous:-small-size-optimizations","page":"Purely Functional Data Structures, in Julia","title":"PureFun.Contiguous: small size optimizations","text":"","category":"section"},{"location":"","page":"Purely Functional Data Structures, in Julia","title":"Purely Functional Data Structures, in Julia","text":"Tries and chunky lists assume the availability of efficient small collections that can be linked together to build general purpose collections. The PureFun.Contiguous module provides a variety of performant data structures that make use of data locality","category":"page"},{"location":"#See-also","page":"Purely Functional Data Structures, in Julia","title":"See also","text":"","category":"section"},{"location":"","page":"Purely Functional Data Structures, in Julia","title":"Purely Functional Data Structures, in Julia","text":"FunctionalCollections.jl\nLazy.jl\nMLStyle.jl\nAir.jl","category":"page"}]
}
